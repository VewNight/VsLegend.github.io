{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2021-05-28-redis-data-structure.md","hash":"7ada6da0220816db0fa84b1ee2a14b922cbd9dd7","modified":1640156739200},{"_id":"source/_posts/2021-05-22-Functional-Programming.md","hash":"cc7c9319e91cc699968cbd90cc454274c93469bc","modified":1640156739199},{"_id":"source/_posts/2021-05-21-JAVA-reflection.md","hash":"0385165a71798c6d848180cd40b82c39a97826be","modified":1640156739198},{"_id":"source/_posts/2021-05-28-redis-key-value.md","hash":"ffd54b8bd229f28de1a71043e245b1c3f2527272","modified":1640156739200},{"_id":"source/_posts/2021-08-03-java-concurrency-2.md","hash":"946cfeb287fe9008dcc4789ce0bfdc0787a26b26","modified":1640156739201},{"_id":"source/_posts/2021-08-03-java-concurrency-1.md","hash":"a3980c2ca6a62ef93e6d55cb5e1f5f66b20f2d56","modified":1640156739201},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"public/2021/12/22/2021-08-03-java-concurrency-2/index.html","hash":"fe5ea367b1f98af0221dbc728a02cd5696089fc2","modified":1640158601969},{"_id":"public/2021/12/22/2021-08-03-java-concurrency-1/index.html","hash":"5b2463632edb2c28a8372d1899673d0d83164dba","modified":1640158601969},{"_id":"public/2021/12/22/hello-world/index.html","hash":"518520c4f242c422cbbc2fa0ec302870e54a7fc6","modified":1640158601969},{"_id":"public/categories/redis/index.html","hash":"4d5e1c01908e64e3471563bb224566e1d1d4abed","modified":1640158601969},{"_id":"public/categories/Java/index.html","hash":"ca42372ba9d17496c94b2dc055142bd8a0b640b6","modified":1640158601969},{"_id":"public/categories/java/index.html","hash":"c3cf2475f9bc385e75497fb73eb296fa29667716","modified":1640158601969},{"_id":"public/archives/index.html","hash":"c3a8fc93955949ddad8f59235d4f5dc9cf66c385","modified":1640158601969},{"_id":"public/archives/2021/index.html","hash":"c3ffbfc6f7fd937429340dcae4ec7975fe5c88ad","modified":1640158601969},{"_id":"public/archives/2021/12/index.html","hash":"39656f0186df666befcc6f0a97fadc2cda4fca12","modified":1640158601969},{"_id":"public/tags/redis/index.html","hash":"ff8a4fe22a0a2e499bafe6db73ef92b3e0519098","modified":1640158601969},{"_id":"public/tags/数据结构/index.html","hash":"af79724d261ed2ac11441daa771a7561eb67089f","modified":1640158601969},{"_id":"public/tags/key-value/index.html","hash":"5d1f34be47a57b9ae31d08c235621d2982d4aa61","modified":1640158601969},{"_id":"public/tags/Java/index.html","hash":"4895049cdb2e952428ac84f3fff24b6a1af0d618","modified":1640158601969},{"_id":"public/tags/反射/index.html","hash":"101354288bfbf0c8421a07d6d56d65cb61de69fb","modified":1640158601969},{"_id":"public/tags/Reflection/index.html","hash":"bf76dec8e1752f3c19fa387aae9436d2514a1a6b","modified":1640158601969},{"_id":"public/tags/Lambda/index.html","hash":"95ad3e71b579e31192b2b06481d468f9c381456e","modified":1640158601969},{"_id":"public/tags/Stream/index.html","hash":"204b2ca12c3fae42f403f0459a4fda8040088c1d","modified":1640158601969},{"_id":"public/tags/functional-programming/index.html","hash":"ed44fb6535c488bb62502e3d6969265a2cef719b","modified":1640158601969},{"_id":"public/tags/thread-pool/index.html","hash":"c7df2e34a0578cb7e2402d4be7a3273c4850f682","modified":1640158601969},{"_id":"public/tags/concurrency/index.html","hash":"9176b21f0dcd3a7458bda6d5171f79d1c6e11e9a","modified":1640158601969},{"_id":"public/2021/12/22/2021-05-28-redis-key-value/index.html","hash":"4085cdd80166803588507c3e3c5aa818aa75e8ca","modified":1640158601969},{"_id":"public/2021/12/22/2021-05-28-redis-data-structure/index.html","hash":"aa3ed57dd63c40d12a33cffa47691ed81069c9f9","modified":1640158601969},{"_id":"public/2021/12/22/2021-05-22-Functional-Programming/index.html","hash":"dfa6f503a7afc0afa17a84845fe38f453d5123b5","modified":1640158601969},{"_id":"public/2021/12/22/2021-05-21-JAVA-reflection/index.html","hash":"8b234904c31286da7603e67c927081e2048f4f4e","modified":1640158601969},{"_id":"public/index.html","hash":"df7e8aff4b6b1ba8c62ec4f5fedc3ba353a8c62d","modified":1640158601969},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1640158601969},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1640158601969},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1640158601969},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1640158601969},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1640158601969},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1640158601969},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1640158601969},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1640158601969},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1640158601969},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1640158601969},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1640158601969},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1640158601969},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1640158601969},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1640158601969},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1640158601969},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1640158601969},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1640158601969},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1640158601969},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1640158601969},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1640158601969},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1640158601969},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1640158601969},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1640158601969}],"Category":[{"name":"redis","_id":"ckxh8313j00025cv14zwkaj4z"},{"name":"Java","_id":"ckxh8313r000b5cv1bfui6rpq"},{"name":"java","_id":"ckxh8313u000j5cv13cm73taa"}],"Data":[],"Page":[],"Post":[{"title":"redis基础知识和底层数据结构","author":"WangJwi","_content":"\n导读：Redis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。\n\n------\n\n# Redis基础知识\n\n## **概念：**\n\nRedis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。\n\n\n\n## **用途：**\n\n常被用于分布式、键值对数据库、高速缓存、消息代理等应用。\n\n\n## redis的优点\n\n1. 内存操作，高性能\n2. 单线程执行，天然支持并发\n\n\n\n\n<br><br>\n\n------\n\n\n# Redis的底层数据结构\n\n## 简单动态字符串：SDS\n### 描述\n\nRedis由C语言编写。它将SDS（simple dynamic string）用作默认的字符串表示方式。而C字符串仅用作字符串字面量（string literal），即无须对字符串值进行修改的地方。Redis的字符串类型的键值都是由SDS实现的。此外，SDS还可以被用作缓冲区（buffer），例如AOF缓冲区、输入缓冲区等。\n\n\n\n\n### 定义\n\nSDS遵循C字符串以空字符结尾的惯例，保存空字符的1字节空间不计算在SDS的len属性里。该空字符的添加操作由SDS函数自动完成。这一操作的好处是，可以直接复用C语言的一些字符串操作。\n\n每个sds.h/sdshdr表示一个SDS值，SDS的定义如下：\n\n``` c\nstruct sdshdr {\n  int len; // 记录buf数组中已使用的字节数量，等于SDS所保存字符串的长度\n  \n  int free; // 记录buf数组中未使用的字节数量\n  \n  char buf[]; // 字节数组，用于保存字符串\n}\n```\n\n\n\n\n\n### 特性\n\n前置知识点：\n内存的重新分配操作可能出现的问题\n\n- 缓冲区溢出：增长字符串时，程序需要通过内存分配来来确定是否需要对底层数组的空间进行扩充，以便存放增长后的字符串的值。如果忘了这一步，那么保存字符串的数组就会发生越界行为，占用未分配给它的内存区域，从而导致其他数据被意外篡改，这就是缓冲区溢出。\n- 内存泄漏：缩短字符串时，同样需要重新分配内存释放掉不需要的那部分空间。如果忘了这一步，那么剩下那一部分空间将会一直处于未使用状态且无法分配给其他程序来使用，这就是内存泄漏。\n- 内存重分配设计辅助的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作。\n\n\n\n\n#### 1. 空间预分配\n\n**描述**：空间预分配操作用于优化SDS字符串的增长操作。\n\n\n\n**实现**：\n\n- 当修改后的SDS长度小于1MB时，那么程序将分配和len相同大小的未使用空间。这时len的值和free的值相同。\n- SDS的长度大于等于1MB时，那么会分配1MB的未使用空间。\n\n\n**作用**：通过内存重分配和空间预分配的策略，Redis可以减少连续执行字符串增长操作所需的内存重分配次数，从而提高性能\n\n\n\n\n#### 2. 惰性空间释放\n\n**描述**：用于优化SDS字符串缩短操作。\n\n\n**实现**：\n\n- 缩短字符串时，程序并不立即使用内存重分配来回收缩短后多出的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。\n\n\n**作用**：SDS避免了缩短字符串时所需的内存重分配操作。并为将来可能出现的增长操作提供了优化；不过有可能造成内存空间的浪费。\n\n\n\n\n#### 3. 二进制安全\n\n**描述**：SDS的API都是二进制安全的。所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据。\n\n\n\n\n#### 4. 兼容部分C字符串函数\n\n**描述**：SDS末尾保存的空字串，使得其可以重用一部分<string.h>库定义的函数，从而避免了不必要的代码重复实现。\n\n\n\n\n\n\n### 与C字符串相比的区别\n\n- 长度获取简单。SDS用len属性记录了SDS字符串的长度，因此只需常熟复杂度就可以获取到字符串长度，而C字符串并不记录长度，它需要遍历整个字符串才能得出字符串长度。\n- len属性解决了扩充时C字符串的缓冲区溢出（buffer overflow）问题；\n- free属性减少修改字符串时带来的内存重分配次数。\n\n\n<br><br>\n\n------\n\n## 链表\n### 描述\n\n- 链表提供了高效的**节点重排**能力，以及顺序性的节点访问方式。\n- 链表在redis中的应用非常广泛，列表键的底层实现之一就是链表（当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时）。\n- 此外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis本身还是用链表保存多个客户端的状态信息。\n\n\n\n\n### 定义\n\nadlist.h/list表示一个链表，而每个链表节点使用一个adlist.h/listNode结构表示。\n\n\n\n``` c\ntypedef struct list {\n  listNode *head;\n  listNode *tail;\n  unsigned long len; // 节点数量\n} list;\n\n\n\ntypedef struct listNode {\n  struct listNode *prev;\n  struct listNode *next;\n  // 任意类型的值\n  void *value;\n} listNod\n```\n\n\n<br><br>\n\n------\n\n\n## 字典\n### 描述\n\n- 字典，又称符号表、关联数组、映射（map），用于保存键值对的抽象数据结构。\n- C语言并没有内置字典。因此字典又Redis本身实现。\n- 除了用来表示数据库外，字典还是哈希键的底层实现之一，当一个哈希键包含的键值对比较多，又或者键值对中的元素都是长字符串时，Redis就会使用字典作为哈希键的底层实现。\n\n\n\n\n### 定义\n\ndict.h/dict表示一个字典。\n\n``` c\ntypedef struct dict {\n  // 特定类型函数\n  dictType *type;\n  // 私有数据\n  void *privdata; \n  // 哈希表\n  dictht ht[2]; \n  // rehash索引，没有进行rehash时，值为-1\n  int trehashidx;\n} dict;\n```\n\n\n\ndict.h/dictht表示一个哈希表。\n\n``` c\ntypedef struct dictht {\n  // 哈希表，这里相当于Java中的 Object [] table;\n  dictEntry **table;\n  // 大小，指数组\n  unsigned long size; \n  // 哈希表大小掩码，总是用于计算索引值，总是等于size - 1\n  unsigned long sizemask; \n  \n  // 哈希表已有节点的数量\n  unsigned long used; \n} dictht;\n```\n\n\n\n而每个哈希节点使用dictEntry表示。\n\n``` c\ntypedef struct dictEntry{\n  void *key;\n\n\n  // 值 可以是一个对象指针，或uint64_t整数或int64_t整数\n  union {\n    void *val;\n    uint64_t u64;\n    int64_t s64;\n  } v; \n\n\n  // 指向下一个哈希节点，用于解决键冲突（链地址法）\n  struct dictEntry *next;\n} dictEntry\n```\n\n\n\n\n### 哈希算法\n\n字典用作数据库底层实现，或哈希键的实现时，Redis使用的**MurmurHash2**算法来计算哈希值\n\nkey：键\n\nht[x]：没有rehash时为ht[0]，rehash时ht[1]\n\n计算哈希值：hash = dict->type->hashFunction(key);\n\n计算在数组中的下标：index = hash & dict->ht[x].sizemask;\n\n\n\n\n### 哈希冲突\n\nRedis使用了链地址法解决，在产生冲突的下标地址的链表中，使用头插法插入哈希节点。\n\n\n\n\n### 渐进式的Rehash\n\nRedis也有一个负载因子用于控制，哈希表的数组大小。当负载因子超过承受限制或远低于预期时，就会进行rehash的操作，进行扩展或缩小哈希表。\n\n负载因子（load factor）计算方式：load_factor = ht[0].used / ht[0].size\n\n\n\n扩展时：\n\n**条件：**一般情况下，负载因子大于等于1，就进行扩展；在执行BGSAVE或BGREERITEAOF命令时，负载因子大于等于5才开始扩展。\n\n方法：\n\n1. 分配ht[1]的空间，size为：大于等于ht[0].used * 2的第一个2^n数\n2. \n\n\n\n收缩时：\n\n**条件：**负载因子小于0.1，就开始收缩\n\n\n<br><br>\n\n------\n\n\n## 跳跃表\n### 描述\n\nRedis使用其作为有序集合键的底层实现之一。当一个有序集合包含的元素数量比较多，又或者集合中的元素都是长字符串时，Redis就会使用跳跃表作为有序集合的底层实现。\n\n\n<br><br>\n\n------\n\n\n## 整数集合\n\n\n### 描述\n\n整数集合是Redis用于保存整数值的集合抽象数据结构，当一个集合只包含整数值元素，且元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。\n\n它可以保存int16_t、int32_t、int64_t的整数值，并且保证集合有序且不会出现重复。\n\n\n\n\n### 定义\n\n每个intset.h/intset结构表示一个整数集合\n\n``` c\ntypedef struct intset {\n  uint32_t encoding; // 编码 三种类型int16_t、int32_t、int64_t\n  uint32_t length; // 元素数量\n  int8_t contents []; // 保存元素的数组，其保存的正真类型取决于encoding\n}\n```\n\n\n\n\n### 升级\n\n新元素超过当前类型的范围时，就要向上转型，redis称为升级（upgrade）。例如16-32，32-64。当然，整数集合不支持降级操作，一旦升级，编码就会一直保持升级后的状态，这一点跟Java一样。\n\n**步骤：**\n\n1. 根据升级类型，扩展底层数组的空间大小，并未新元素分配空间\n2. 把数组中现有的元素转换成升级后的类型，并从最后一个元素开始将之移动到新的位置上（例如：16位的整数转为32位时，数组为每一个元素的空间都分配了32位。从最后一个元素开始移动，可以确保一次移动完毕，且不会造成数据损坏）\n3. 将新元素添加到数组（由于新元素是向上转型，那么新元素只能是大于或小于当前数组的所有数的情况。比如一个32位的正整数或负整数）\n\n\n\n\n<br><br>\n\n------\n\n\n## 压缩列表\n### 描述\n\n压缩列表是Redis为了节约内存而开发的，是由一系列**特殊编码**的**连续内存块**组成的顺序性数据结构。\n\n也是列表键和哈希键的底层实现之一，当一个列表键只包含少量列表项，并且列表项要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现；当一个哈希键只包含少量键值对，并且键值对的键和值要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现。\n\n\n\n\n###  定义\n\n由于是连续的内存块，且经过特殊编码的，因此它跟之前的几种数据结构不同。整个压缩列表的结构如下：\n\n``` c\nzlbyte | zltail | zllen | entry1~~~entryn | zlend\nzlbyet：列表占用的内存字节数\nzltail：记录列表尾节点离列表的起始地址有多少字节\nzllen：记录列表包含的节点数量\nentry：每一个列表节点，数量不定\nzlend：特殊值0xFF（十进制255），用于标记压缩列表的末端\n```\n\n\n\n每一个实体entry包含的内容如下：\n\n``` c\nprevious_entry_lenth  |  encoding  |  content\nprevious_entry_lenth：记录压缩列表前一个节点的长度\nencoding：记录节点content属性所保存数据的类型和长度\ncontent：保存节点值，可以是一个字节数组或者整数\n```\n\n\n\n<br><br>\n\n------\n\n##  对象\n###  描述：\n\nRedis没有直接使用上述的数据机构来实现键值对数据库，而是基于这些数据结构创建一个对象系统。\n\nRedis创建一个键值对时，最少会建两个对象，键的对象和值的对象；键总是一个字符串对象，而值可以是对象系统的任一种。\n\n\n\n\n###  对象系统：\n\n- **对象系统**包含：字符串对象、列表对象、哈希对象、集合对象和有序集合对象五种。\n- 对象系统实现了基于引用计数技术的内存回收机制：当程序不再使用某个对象的时候（什么情况下才表示不再使用呢，即引用计数为0时），这个对象所占用的内存就会被自动释放。此外该技术实现了对象共享机制，通过让多个数据库键公用同一对象来节约内存。\n- 对象带有访问时间记录信息，其用于计算数据库键的空转时长（未被调用），在服务器启用了maxmemory功能的情况下，空转时长较大的键可能会被服务器优先删除。\n\n\n\n\n###  定义：\n\n每个对象都由一个redisObject结构表示：\n\n``` c\ntypedef struct redisObject{\n  // 类型 REDIS_STRING REDIS_LIST REDIS_HASH REDIS_SET REDIS_ZSET\n  unsigned type:4;\n  unsigned encoding; // 编码 决定了该类型使用什么底层数据结构\n  void *ptr; // 指向底层实现数据结构的指针\n  int refcount; // 引用计数 用于内存回收机制、共享机制\n  unsigned lru:22; // 记录对象的最后一次被访问时间\n  // ...\n} robj;\n```\n\n\n\nptr指针所指向数据结构，它的类型由encoding属性决定。encoding记录了对象所使用的编码，即对象使用了什么数据结构作为底层实现。\n\n\n\n\n\n\n###  对象的常用命令：\n\n| object encoding | 值的编码                                    |\n| --------------- | ------------------------------------------- |\n| object refcount | 对象的引用计数                              |\n| object idletime | 对象的空转时长，该命令不会修改对象的lru属性 |\n| type            | 对象类型                                    |\n| del             | 删除键以及值                                |\n| rename          | 重命键                                      |\n| expire          |                                             |\n\n\n\n\n###  对象系统各编码使用的数据结构：\n\n| type类型     | encoding编码              | ptr指向的数据结构               |\n| ------------ | ------------------------- | ------------------------------- |\n| REDIS_STRING | REDIS_ENCODING_INT        | 整数值的实现的字符串对象        |\n| REDIS_STRING | REDIS_ENCODING_EMBSTR     | embstr编码的sds实现的字符串对象 |\n| REDIS_STRING | REDIS_ENCODING_RAW        | sds字符串实现的字符串对象       |\n| REDIS_LIST   | REDIS_ENCODING_ZIPLIST    | 压缩列表实现                    |\n| REDIS_LIST   | REDIS_ENCODING_LINKEDLIST | 链表实现                        |\n| REDIS_HASH   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_HASH   | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_SET    | REDIS_ENCODING_INTSET     | 整数集合实现                    |\n| REDIS_SET    | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_ZSET   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_ZSET   | REDIS_ENCODING_SKIPLIST   | 跳跃表和字典实现                |\n\n\n\n\n###  数据结构的转换：\n\n| 类型         | 转换规则                                                     |\n| ------------ | ------------------------------------------------------------ |\n| REDIS_STRING | 为整数值且可以用long型表示使用int；当保存字符串，且长度小于等于39字节，使用embstr编码；否则使用SDS |\n| REDIS_LIST   | 全是整数或短字符串且元素少使用压缩列表，否则使用链表         |\n| REDIS_HASH   | 全是整数或短字符串且元素少使用压缩列表，否则使用字典         |\n| REDIS_SET    | 全是整数且元素少使用整数列表，否则使用字典                   |\n| REDIS_ZSET   | 全是整数或短字符串且元素少使用压缩列表，否则使用跳跃表和字典 |\n\n\n\n\n###  字符串对象\n\nint embstr raw\n\n字符串对象是五种类型中，唯一一种会被其他四种对象嵌套的类型。\n\nembstr编码与raw编码异同：\n\n- 两者都使用了redisObject机构和sdsstr结构表示字符串\n- 但是raw编码会调用两次内存分配函数来分别创建两个结构，而embstr只需一次且分配了连续的内存空间。\n- 意味着释放内存时，前者也需要释放两次，而后者只需要释放一次。\n- embstr是读取连续内存空间的数据，因此读取速度更快\n- embstr是只读的，而raw可读写。embstr是专门用于保存短字符串的一种优化编码方式。embstr无法修改的只读对象。若要对其进行修改，会将embstr先转为raw对象，再执行修改命令\n\n\n\n常用命令：\n\n| set    |            |\n| ------ | ---------- |\n| get    |            |\n| append | 在值后添加 |\n| strlen | 字符串长度 |\n\n\n\n\n\n\n###  列表对象\n\nziplist linkedlist\n\n编码转换：\n- 字符串元素的长度小于64字节，元素数量小于512个时，使用ziplist\n- 通过配置文件修改：list-max-ziplist-value、list-max-ziplist-entries\n\n\n常用命令：\n\n| lpush          | 头部添加         |\n| -------------- | ---------------- |\n| lpop           | 头部删除         |\n| rpush          | 尾部添加         |\n| rpop           | 尾部删除         |\n| llen           | 长度             |\n| lindex         | 返回下标的元素   |\n| lset           | 更新节点的元素   |\n| lrange key s e | 展示范围内的元素 |\n\n\n\n\n\n\n###  哈希对象\n\nziplist hashtable\n\n当使用ziplist保存哈希键值时，将键和值都作为一个entry，然后以键在前值在后的顺序插入压缩表\n\n编码转换：\n\n- 所有键值对的键和值，都是用字符串，且长度小于64字节，键值对数量小于64个时，使用压缩表\n- 通过配置文件修改：hash-max-ziplist-value、hash-max-ziplist-entries\n\n常用命令：\n\n| hset    | 添加键值对         |\n| ------- | ------------------ |\n| hget    | 获取键的值         |\n| hdel    | 删除键对应的键值对 |\n| hlen    | 长度               |\n| hgetall | 获取所有键值对     |\n\n\n\n\n\n\n###  集合对象\n\nintset hashtable\n\n使用hashtable时，字典的每个键都是一个字符串对象，值则全是NULL。\n\n编码转换：\n\n- 集合对象保存的元素都是用整数值，且元素数量不超过512个时，使用intset\n- 通过配置文件修改：set-max-intset-entries\n\n常用命令：\n\n| sadd      | 添加元素                                               |\n| --------- | ------------------------------------------------------ |\n| scard     | 集合元素的数量                                         |\n| sismember | 指定元素是否存在                                       |\n| smembers  | 获取所有元素                                           |\n| spop      | 随机删除一个元素并返回，在返回给客户端值后才会正真删除 |\n\n\n\n\n\n\n###  有序集合对象\n\nziplist skiplist&hashtable\n\n压缩表的表现形式：\n\n- 使用压缩表时，元素按分值从小到大进行排序，分值小的靠近表头，分值大的靠近表尾。\n- 压缩表中，每个元素用两个连续的entry表示，第一个保存元素，第二个保存元素的分值。\n\n跳跃表和哈希表的表现形式：\n\nskiplist编码的有序集合对象使用zset结构作为底层实现，其同时包含一个字典和一个跳跃表：\n\n``` c\ntypedef struct zset{\n  zskiplist *zsl; // 跳跃表\n  dict *dict; // 字典\n}zset;\n```\n\n虽然zset同时使用字典和跳跃表保存有序集合，但这两种结构都通过指针来共享相同元素的成员和分值，因此不会造成浪费额外的内存。\n\n编码转换：\n\n- 有序集合对象保存的元素长度都小于64字节，且元素数量小于128个时，使用ziplist\n- 通过配置文件修改：zset-max-ziplist-value、zset-max-ziplist-entries\n\n常用命令：\n\n| zadd   | 添加元素                    |\n| ------ | --------------------------- |\n| zrem   | 删除元素中的指定成员        |\n| zcard  | 集合元素的数量              |\n| zcount | 分值在给定范围内的元素数量  |\n| zrange | 返回给定索引范围的所有元素  |\n| zrank  | 元素的排名（相当于index+1） |\n| zscore | 给定元素的分值              |\n\n\n\n\n\n\n\n\n###  内存回收\n\n描述：\n\nC语言并不具备自动内存回收的功能，Redis构建了一个引用计数（reference counting）计数实现的内存回收机制。\n\n对于一个对象而言，它的生命周期为创建对象、操作对象、释放对象三个阶段。\n\n引用计数：\n\n程序通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。\n\n引用计数在对象系统中的属性为：refcount\n\nrefcount的状态变化：\n\n- 创建新对象时，对象的refcount值初始化为1\n- 对象被新程序使用时，refcount++\n- 新程序使用结束时，refcount--\n- 当对象的引用计数为0时，对象占用的内存会被释放\n\n\n\n\n\n\n###  对象共享\n\n描述：\n\n对象的共享也是通过上述的refcount实现的。\n\n哪些对象会被共享：\n\n- Redis只对包含整数值的字符串对象进行共享。\n- Redis初始化服务器时，创建0-9999的字符串对象，用以实现这些整数值的共享\n- Redis不共享包含字符串的对象，那有会增加判断的复杂度，从而影响内存性能\n\n共享的实现：\n\n1. 将数据库键的值指针指向一个现有的值对象；\n2. 将被共享的值对象的引用计数加一\n\n\n\n\n\n\n###  对象的空转时长\n\n描述：\n\nlru属性，记录对象最后一次被访问的时间。\n\n作用：\n\n当服务器打开了maxmemory选项时，且回收内存的算法为volatile-lru或者allkeys-lru，那么当服务器占用的内存数超过了maxmemory设置的上限值时，空转时长较高的那部分键会优先被服务器释放，从而回收内存。\n\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)\n\n[Redis设计与实现-黄健宏]\n","source":"_posts/2021-05-28-redis-data-structure.md","raw":"---\ntitle:  \"redis基础知识和底层数据结构\"\nauthor: WangJwi\ncategories:\n- redis\ntags:\n- redis\n- 数据结构\n---\n\n导读：Redis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。\n\n------\n\n# Redis基础知识\n\n## **概念：**\n\nRedis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。\n\n\n\n## **用途：**\n\n常被用于分布式、键值对数据库、高速缓存、消息代理等应用。\n\n\n## redis的优点\n\n1. 内存操作，高性能\n2. 单线程执行，天然支持并发\n\n\n\n\n<br><br>\n\n------\n\n\n# Redis的底层数据结构\n\n## 简单动态字符串：SDS\n### 描述\n\nRedis由C语言编写。它将SDS（simple dynamic string）用作默认的字符串表示方式。而C字符串仅用作字符串字面量（string literal），即无须对字符串值进行修改的地方。Redis的字符串类型的键值都是由SDS实现的。此外，SDS还可以被用作缓冲区（buffer），例如AOF缓冲区、输入缓冲区等。\n\n\n\n\n### 定义\n\nSDS遵循C字符串以空字符结尾的惯例，保存空字符的1字节空间不计算在SDS的len属性里。该空字符的添加操作由SDS函数自动完成。这一操作的好处是，可以直接复用C语言的一些字符串操作。\n\n每个sds.h/sdshdr表示一个SDS值，SDS的定义如下：\n\n``` c\nstruct sdshdr {\n  int len; // 记录buf数组中已使用的字节数量，等于SDS所保存字符串的长度\n  \n  int free; // 记录buf数组中未使用的字节数量\n  \n  char buf[]; // 字节数组，用于保存字符串\n}\n```\n\n\n\n\n\n### 特性\n\n前置知识点：\n内存的重新分配操作可能出现的问题\n\n- 缓冲区溢出：增长字符串时，程序需要通过内存分配来来确定是否需要对底层数组的空间进行扩充，以便存放增长后的字符串的值。如果忘了这一步，那么保存字符串的数组就会发生越界行为，占用未分配给它的内存区域，从而导致其他数据被意外篡改，这就是缓冲区溢出。\n- 内存泄漏：缩短字符串时，同样需要重新分配内存释放掉不需要的那部分空间。如果忘了这一步，那么剩下那一部分空间将会一直处于未使用状态且无法分配给其他程序来使用，这就是内存泄漏。\n- 内存重分配设计辅助的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作。\n\n\n\n\n#### 1. 空间预分配\n\n**描述**：空间预分配操作用于优化SDS字符串的增长操作。\n\n\n\n**实现**：\n\n- 当修改后的SDS长度小于1MB时，那么程序将分配和len相同大小的未使用空间。这时len的值和free的值相同。\n- SDS的长度大于等于1MB时，那么会分配1MB的未使用空间。\n\n\n**作用**：通过内存重分配和空间预分配的策略，Redis可以减少连续执行字符串增长操作所需的内存重分配次数，从而提高性能\n\n\n\n\n#### 2. 惰性空间释放\n\n**描述**：用于优化SDS字符串缩短操作。\n\n\n**实现**：\n\n- 缩短字符串时，程序并不立即使用内存重分配来回收缩短后多出的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。\n\n\n**作用**：SDS避免了缩短字符串时所需的内存重分配操作。并为将来可能出现的增长操作提供了优化；不过有可能造成内存空间的浪费。\n\n\n\n\n#### 3. 二进制安全\n\n**描述**：SDS的API都是二进制安全的。所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据。\n\n\n\n\n#### 4. 兼容部分C字符串函数\n\n**描述**：SDS末尾保存的空字串，使得其可以重用一部分<string.h>库定义的函数，从而避免了不必要的代码重复实现。\n\n\n\n\n\n\n### 与C字符串相比的区别\n\n- 长度获取简单。SDS用len属性记录了SDS字符串的长度，因此只需常熟复杂度就可以获取到字符串长度，而C字符串并不记录长度，它需要遍历整个字符串才能得出字符串长度。\n- len属性解决了扩充时C字符串的缓冲区溢出（buffer overflow）问题；\n- free属性减少修改字符串时带来的内存重分配次数。\n\n\n<br><br>\n\n------\n\n## 链表\n### 描述\n\n- 链表提供了高效的**节点重排**能力，以及顺序性的节点访问方式。\n- 链表在redis中的应用非常广泛，列表键的底层实现之一就是链表（当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时）。\n- 此外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis本身还是用链表保存多个客户端的状态信息。\n\n\n\n\n### 定义\n\nadlist.h/list表示一个链表，而每个链表节点使用一个adlist.h/listNode结构表示。\n\n\n\n``` c\ntypedef struct list {\n  listNode *head;\n  listNode *tail;\n  unsigned long len; // 节点数量\n} list;\n\n\n\ntypedef struct listNode {\n  struct listNode *prev;\n  struct listNode *next;\n  // 任意类型的值\n  void *value;\n} listNod\n```\n\n\n<br><br>\n\n------\n\n\n## 字典\n### 描述\n\n- 字典，又称符号表、关联数组、映射（map），用于保存键值对的抽象数据结构。\n- C语言并没有内置字典。因此字典又Redis本身实现。\n- 除了用来表示数据库外，字典还是哈希键的底层实现之一，当一个哈希键包含的键值对比较多，又或者键值对中的元素都是长字符串时，Redis就会使用字典作为哈希键的底层实现。\n\n\n\n\n### 定义\n\ndict.h/dict表示一个字典。\n\n``` c\ntypedef struct dict {\n  // 特定类型函数\n  dictType *type;\n  // 私有数据\n  void *privdata; \n  // 哈希表\n  dictht ht[2]; \n  // rehash索引，没有进行rehash时，值为-1\n  int trehashidx;\n} dict;\n```\n\n\n\ndict.h/dictht表示一个哈希表。\n\n``` c\ntypedef struct dictht {\n  // 哈希表，这里相当于Java中的 Object [] table;\n  dictEntry **table;\n  // 大小，指数组\n  unsigned long size; \n  // 哈希表大小掩码，总是用于计算索引值，总是等于size - 1\n  unsigned long sizemask; \n  \n  // 哈希表已有节点的数量\n  unsigned long used; \n} dictht;\n```\n\n\n\n而每个哈希节点使用dictEntry表示。\n\n``` c\ntypedef struct dictEntry{\n  void *key;\n\n\n  // 值 可以是一个对象指针，或uint64_t整数或int64_t整数\n  union {\n    void *val;\n    uint64_t u64;\n    int64_t s64;\n  } v; \n\n\n  // 指向下一个哈希节点，用于解决键冲突（链地址法）\n  struct dictEntry *next;\n} dictEntry\n```\n\n\n\n\n### 哈希算法\n\n字典用作数据库底层实现，或哈希键的实现时，Redis使用的**MurmurHash2**算法来计算哈希值\n\nkey：键\n\nht[x]：没有rehash时为ht[0]，rehash时ht[1]\n\n计算哈希值：hash = dict->type->hashFunction(key);\n\n计算在数组中的下标：index = hash & dict->ht[x].sizemask;\n\n\n\n\n### 哈希冲突\n\nRedis使用了链地址法解决，在产生冲突的下标地址的链表中，使用头插法插入哈希节点。\n\n\n\n\n### 渐进式的Rehash\n\nRedis也有一个负载因子用于控制，哈希表的数组大小。当负载因子超过承受限制或远低于预期时，就会进行rehash的操作，进行扩展或缩小哈希表。\n\n负载因子（load factor）计算方式：load_factor = ht[0].used / ht[0].size\n\n\n\n扩展时：\n\n**条件：**一般情况下，负载因子大于等于1，就进行扩展；在执行BGSAVE或BGREERITEAOF命令时，负载因子大于等于5才开始扩展。\n\n方法：\n\n1. 分配ht[1]的空间，size为：大于等于ht[0].used * 2的第一个2^n数\n2. \n\n\n\n收缩时：\n\n**条件：**负载因子小于0.1，就开始收缩\n\n\n<br><br>\n\n------\n\n\n## 跳跃表\n### 描述\n\nRedis使用其作为有序集合键的底层实现之一。当一个有序集合包含的元素数量比较多，又或者集合中的元素都是长字符串时，Redis就会使用跳跃表作为有序集合的底层实现。\n\n\n<br><br>\n\n------\n\n\n## 整数集合\n\n\n### 描述\n\n整数集合是Redis用于保存整数值的集合抽象数据结构，当一个集合只包含整数值元素，且元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。\n\n它可以保存int16_t、int32_t、int64_t的整数值，并且保证集合有序且不会出现重复。\n\n\n\n\n### 定义\n\n每个intset.h/intset结构表示一个整数集合\n\n``` c\ntypedef struct intset {\n  uint32_t encoding; // 编码 三种类型int16_t、int32_t、int64_t\n  uint32_t length; // 元素数量\n  int8_t contents []; // 保存元素的数组，其保存的正真类型取决于encoding\n}\n```\n\n\n\n\n### 升级\n\n新元素超过当前类型的范围时，就要向上转型，redis称为升级（upgrade）。例如16-32，32-64。当然，整数集合不支持降级操作，一旦升级，编码就会一直保持升级后的状态，这一点跟Java一样。\n\n**步骤：**\n\n1. 根据升级类型，扩展底层数组的空间大小，并未新元素分配空间\n2. 把数组中现有的元素转换成升级后的类型，并从最后一个元素开始将之移动到新的位置上（例如：16位的整数转为32位时，数组为每一个元素的空间都分配了32位。从最后一个元素开始移动，可以确保一次移动完毕，且不会造成数据损坏）\n3. 将新元素添加到数组（由于新元素是向上转型，那么新元素只能是大于或小于当前数组的所有数的情况。比如一个32位的正整数或负整数）\n\n\n\n\n<br><br>\n\n------\n\n\n## 压缩列表\n### 描述\n\n压缩列表是Redis为了节约内存而开发的，是由一系列**特殊编码**的**连续内存块**组成的顺序性数据结构。\n\n也是列表键和哈希键的底层实现之一，当一个列表键只包含少量列表项，并且列表项要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现；当一个哈希键只包含少量键值对，并且键值对的键和值要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现。\n\n\n\n\n###  定义\n\n由于是连续的内存块，且经过特殊编码的，因此它跟之前的几种数据结构不同。整个压缩列表的结构如下：\n\n``` c\nzlbyte | zltail | zllen | entry1~~~entryn | zlend\nzlbyet：列表占用的内存字节数\nzltail：记录列表尾节点离列表的起始地址有多少字节\nzllen：记录列表包含的节点数量\nentry：每一个列表节点，数量不定\nzlend：特殊值0xFF（十进制255），用于标记压缩列表的末端\n```\n\n\n\n每一个实体entry包含的内容如下：\n\n``` c\nprevious_entry_lenth  |  encoding  |  content\nprevious_entry_lenth：记录压缩列表前一个节点的长度\nencoding：记录节点content属性所保存数据的类型和长度\ncontent：保存节点值，可以是一个字节数组或者整数\n```\n\n\n\n<br><br>\n\n------\n\n##  对象\n###  描述：\n\nRedis没有直接使用上述的数据机构来实现键值对数据库，而是基于这些数据结构创建一个对象系统。\n\nRedis创建一个键值对时，最少会建两个对象，键的对象和值的对象；键总是一个字符串对象，而值可以是对象系统的任一种。\n\n\n\n\n###  对象系统：\n\n- **对象系统**包含：字符串对象、列表对象、哈希对象、集合对象和有序集合对象五种。\n- 对象系统实现了基于引用计数技术的内存回收机制：当程序不再使用某个对象的时候（什么情况下才表示不再使用呢，即引用计数为0时），这个对象所占用的内存就会被自动释放。此外该技术实现了对象共享机制，通过让多个数据库键公用同一对象来节约内存。\n- 对象带有访问时间记录信息，其用于计算数据库键的空转时长（未被调用），在服务器启用了maxmemory功能的情况下，空转时长较大的键可能会被服务器优先删除。\n\n\n\n\n###  定义：\n\n每个对象都由一个redisObject结构表示：\n\n``` c\ntypedef struct redisObject{\n  // 类型 REDIS_STRING REDIS_LIST REDIS_HASH REDIS_SET REDIS_ZSET\n  unsigned type:4;\n  unsigned encoding; // 编码 决定了该类型使用什么底层数据结构\n  void *ptr; // 指向底层实现数据结构的指针\n  int refcount; // 引用计数 用于内存回收机制、共享机制\n  unsigned lru:22; // 记录对象的最后一次被访问时间\n  // ...\n} robj;\n```\n\n\n\nptr指针所指向数据结构，它的类型由encoding属性决定。encoding记录了对象所使用的编码，即对象使用了什么数据结构作为底层实现。\n\n\n\n\n\n\n###  对象的常用命令：\n\n| object encoding | 值的编码                                    |\n| --------------- | ------------------------------------------- |\n| object refcount | 对象的引用计数                              |\n| object idletime | 对象的空转时长，该命令不会修改对象的lru属性 |\n| type            | 对象类型                                    |\n| del             | 删除键以及值                                |\n| rename          | 重命键                                      |\n| expire          |                                             |\n\n\n\n\n###  对象系统各编码使用的数据结构：\n\n| type类型     | encoding编码              | ptr指向的数据结构               |\n| ------------ | ------------------------- | ------------------------------- |\n| REDIS_STRING | REDIS_ENCODING_INT        | 整数值的实现的字符串对象        |\n| REDIS_STRING | REDIS_ENCODING_EMBSTR     | embstr编码的sds实现的字符串对象 |\n| REDIS_STRING | REDIS_ENCODING_RAW        | sds字符串实现的字符串对象       |\n| REDIS_LIST   | REDIS_ENCODING_ZIPLIST    | 压缩列表实现                    |\n| REDIS_LIST   | REDIS_ENCODING_LINKEDLIST | 链表实现                        |\n| REDIS_HASH   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_HASH   | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_SET    | REDIS_ENCODING_INTSET     | 整数集合实现                    |\n| REDIS_SET    | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_ZSET   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_ZSET   | REDIS_ENCODING_SKIPLIST   | 跳跃表和字典实现                |\n\n\n\n\n###  数据结构的转换：\n\n| 类型         | 转换规则                                                     |\n| ------------ | ------------------------------------------------------------ |\n| REDIS_STRING | 为整数值且可以用long型表示使用int；当保存字符串，且长度小于等于39字节，使用embstr编码；否则使用SDS |\n| REDIS_LIST   | 全是整数或短字符串且元素少使用压缩列表，否则使用链表         |\n| REDIS_HASH   | 全是整数或短字符串且元素少使用压缩列表，否则使用字典         |\n| REDIS_SET    | 全是整数且元素少使用整数列表，否则使用字典                   |\n| REDIS_ZSET   | 全是整数或短字符串且元素少使用压缩列表，否则使用跳跃表和字典 |\n\n\n\n\n###  字符串对象\n\nint embstr raw\n\n字符串对象是五种类型中，唯一一种会被其他四种对象嵌套的类型。\n\nembstr编码与raw编码异同：\n\n- 两者都使用了redisObject机构和sdsstr结构表示字符串\n- 但是raw编码会调用两次内存分配函数来分别创建两个结构，而embstr只需一次且分配了连续的内存空间。\n- 意味着释放内存时，前者也需要释放两次，而后者只需要释放一次。\n- embstr是读取连续内存空间的数据，因此读取速度更快\n- embstr是只读的，而raw可读写。embstr是专门用于保存短字符串的一种优化编码方式。embstr无法修改的只读对象。若要对其进行修改，会将embstr先转为raw对象，再执行修改命令\n\n\n\n常用命令：\n\n| set    |            |\n| ------ | ---------- |\n| get    |            |\n| append | 在值后添加 |\n| strlen | 字符串长度 |\n\n\n\n\n\n\n###  列表对象\n\nziplist linkedlist\n\n编码转换：\n- 字符串元素的长度小于64字节，元素数量小于512个时，使用ziplist\n- 通过配置文件修改：list-max-ziplist-value、list-max-ziplist-entries\n\n\n常用命令：\n\n| lpush          | 头部添加         |\n| -------------- | ---------------- |\n| lpop           | 头部删除         |\n| rpush          | 尾部添加         |\n| rpop           | 尾部删除         |\n| llen           | 长度             |\n| lindex         | 返回下标的元素   |\n| lset           | 更新节点的元素   |\n| lrange key s e | 展示范围内的元素 |\n\n\n\n\n\n\n###  哈希对象\n\nziplist hashtable\n\n当使用ziplist保存哈希键值时，将键和值都作为一个entry，然后以键在前值在后的顺序插入压缩表\n\n编码转换：\n\n- 所有键值对的键和值，都是用字符串，且长度小于64字节，键值对数量小于64个时，使用压缩表\n- 通过配置文件修改：hash-max-ziplist-value、hash-max-ziplist-entries\n\n常用命令：\n\n| hset    | 添加键值对         |\n| ------- | ------------------ |\n| hget    | 获取键的值         |\n| hdel    | 删除键对应的键值对 |\n| hlen    | 长度               |\n| hgetall | 获取所有键值对     |\n\n\n\n\n\n\n###  集合对象\n\nintset hashtable\n\n使用hashtable时，字典的每个键都是一个字符串对象，值则全是NULL。\n\n编码转换：\n\n- 集合对象保存的元素都是用整数值，且元素数量不超过512个时，使用intset\n- 通过配置文件修改：set-max-intset-entries\n\n常用命令：\n\n| sadd      | 添加元素                                               |\n| --------- | ------------------------------------------------------ |\n| scard     | 集合元素的数量                                         |\n| sismember | 指定元素是否存在                                       |\n| smembers  | 获取所有元素                                           |\n| spop      | 随机删除一个元素并返回，在返回给客户端值后才会正真删除 |\n\n\n\n\n\n\n###  有序集合对象\n\nziplist skiplist&hashtable\n\n压缩表的表现形式：\n\n- 使用压缩表时，元素按分值从小到大进行排序，分值小的靠近表头，分值大的靠近表尾。\n- 压缩表中，每个元素用两个连续的entry表示，第一个保存元素，第二个保存元素的分值。\n\n跳跃表和哈希表的表现形式：\n\nskiplist编码的有序集合对象使用zset结构作为底层实现，其同时包含一个字典和一个跳跃表：\n\n``` c\ntypedef struct zset{\n  zskiplist *zsl; // 跳跃表\n  dict *dict; // 字典\n}zset;\n```\n\n虽然zset同时使用字典和跳跃表保存有序集合，但这两种结构都通过指针来共享相同元素的成员和分值，因此不会造成浪费额外的内存。\n\n编码转换：\n\n- 有序集合对象保存的元素长度都小于64字节，且元素数量小于128个时，使用ziplist\n- 通过配置文件修改：zset-max-ziplist-value、zset-max-ziplist-entries\n\n常用命令：\n\n| zadd   | 添加元素                    |\n| ------ | --------------------------- |\n| zrem   | 删除元素中的指定成员        |\n| zcard  | 集合元素的数量              |\n| zcount | 分值在给定范围内的元素数量  |\n| zrange | 返回给定索引范围的所有元素  |\n| zrank  | 元素的排名（相当于index+1） |\n| zscore | 给定元素的分值              |\n\n\n\n\n\n\n\n\n###  内存回收\n\n描述：\n\nC语言并不具备自动内存回收的功能，Redis构建了一个引用计数（reference counting）计数实现的内存回收机制。\n\n对于一个对象而言，它的生命周期为创建对象、操作对象、释放对象三个阶段。\n\n引用计数：\n\n程序通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。\n\n引用计数在对象系统中的属性为：refcount\n\nrefcount的状态变化：\n\n- 创建新对象时，对象的refcount值初始化为1\n- 对象被新程序使用时，refcount++\n- 新程序使用结束时，refcount--\n- 当对象的引用计数为0时，对象占用的内存会被释放\n\n\n\n\n\n\n###  对象共享\n\n描述：\n\n对象的共享也是通过上述的refcount实现的。\n\n哪些对象会被共享：\n\n- Redis只对包含整数值的字符串对象进行共享。\n- Redis初始化服务器时，创建0-9999的字符串对象，用以实现这些整数值的共享\n- Redis不共享包含字符串的对象，那有会增加判断的复杂度，从而影响内存性能\n\n共享的实现：\n\n1. 将数据库键的值指针指向一个现有的值对象；\n2. 将被共享的值对象的引用计数加一\n\n\n\n\n\n\n###  对象的空转时长\n\n描述：\n\nlru属性，记录对象最后一次被访问的时间。\n\n作用：\n\n当服务器打开了maxmemory选项时，且回收内存的算法为volatile-lru或者allkeys-lru，那么当服务器占用的内存数超过了maxmemory设置的上限值时，空转时长较高的那部分键会优先被服务器释放，从而回收内存。\n\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)\n\n[Redis设计与实现-黄健宏]\n","slug":"2021-05-28-redis-data-structure","published":1,"date":"2021-12-22T07:32:13.057Z","updated":"2021-12-22T07:05:39.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxh8313c00005cv1c2f81tmp","content":"<p>导读：Redis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。</p>\n<hr>\n<h1 id=\"Redis基础知识\"><a href=\"#Redis基础知识\" class=\"headerlink\" title=\"Redis基础知识\"></a>Redis基础知识</h1><h2 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a><strong>概念：</strong></h2><p>Redis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。</p>\n<h2 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a><strong>用途：</strong></h2><p>常被用于分布式、键值对数据库、高速缓存、消息代理等应用。</p>\n<h2 id=\"redis的优点\"><a href=\"#redis的优点\" class=\"headerlink\" title=\"redis的优点\"></a>redis的优点</h2><ol>\n<li>内存操作，高性能</li>\n<li>单线程执行，天然支持并发</li>\n</ol>\n<p><br><br></p>\n<hr>\n<h1 id=\"Redis的底层数据结构\"><a href=\"#Redis的底层数据结构\" class=\"headerlink\" title=\"Redis的底层数据结构\"></a>Redis的底层数据结构</h1><h2 id=\"简单动态字符串：SDS\"><a href=\"#简单动态字符串：SDS\" class=\"headerlink\" title=\"简单动态字符串：SDS\"></a>简单动态字符串：SDS</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Redis由C语言编写。它将SDS（simple dynamic string）用作默认的字符串表示方式。而C字符串仅用作字符串字面量（string literal），即无须对字符串值进行修改的地方。Redis的字符串类型的键值都是由SDS实现的。此外，SDS还可以被用作缓冲区（buffer），例如AOF缓冲区、输入缓冲区等。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>SDS遵循C字符串以空字符结尾的惯例，保存空字符的1字节空间不计算在SDS的len属性里。该空字符的添加操作由SDS函数自动完成。这一操作的好处是，可以直接复用C语言的一些字符串操作。</p>\n<p>每个sds.h/sdshdr表示一个SDS值，SDS的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> len; <span class=\"comment\">// 记录buf数组中已使用的字节数量，等于SDS所保存字符串的长度</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>; <span class=\"comment\">// 记录buf数组中未使用的字节数量</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf[]; <span class=\"comment\">// 字节数组，用于保存字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>前置知识点：<br>内存的重新分配操作可能出现的问题</p>\n<ul>\n<li>缓冲区溢出：增长字符串时，程序需要通过内存分配来来确定是否需要对底层数组的空间进行扩充，以便存放增长后的字符串的值。如果忘了这一步，那么保存字符串的数组就会发生越界行为，占用未分配给它的内存区域，从而导致其他数据被意外篡改，这就是缓冲区溢出。</li>\n<li>内存泄漏：缩短字符串时，同样需要重新分配内存释放掉不需要的那部分空间。如果忘了这一步，那么剩下那一部分空间将会一直处于未使用状态且无法分配给其他程序来使用，这就是内存泄漏。</li>\n<li>内存重分配设计辅助的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作。</li>\n</ul>\n<h4 id=\"1-空间预分配\"><a href=\"#1-空间预分配\" class=\"headerlink\" title=\"1. 空间预分配\"></a>1. 空间预分配</h4><p><strong>描述</strong>：空间预分配操作用于优化SDS字符串的增长操作。</p>\n<p><strong>实现</strong>：</p>\n<ul>\n<li>当修改后的SDS长度小于1MB时，那么程序将分配和len相同大小的未使用空间。这时len的值和free的值相同。</li>\n<li>SDS的长度大于等于1MB时，那么会分配1MB的未使用空间。</li>\n</ul>\n<p><strong>作用</strong>：通过内存重分配和空间预分配的策略，Redis可以减少连续执行字符串增长操作所需的内存重分配次数，从而提高性能</p>\n<h4 id=\"2-惰性空间释放\"><a href=\"#2-惰性空间释放\" class=\"headerlink\" title=\"2. 惰性空间释放\"></a>2. 惰性空间释放</h4><p><strong>描述</strong>：用于优化SDS字符串缩短操作。</p>\n<p><strong>实现</strong>：</p>\n<ul>\n<li>缩短字符串时，程序并不立即使用内存重分配来回收缩短后多出的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。</li>\n</ul>\n<p><strong>作用</strong>：SDS避免了缩短字符串时所需的内存重分配操作。并为将来可能出现的增长操作提供了优化；不过有可能造成内存空间的浪费。</p>\n<h4 id=\"3-二进制安全\"><a href=\"#3-二进制安全\" class=\"headerlink\" title=\"3. 二进制安全\"></a>3. 二进制安全</h4><p><strong>描述</strong>：SDS的API都是二进制安全的。所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据。</p>\n<h4 id=\"4-兼容部分C字符串函数\"><a href=\"#4-兼容部分C字符串函数\" class=\"headerlink\" title=\"4. 兼容部分C字符串函数\"></a>4. 兼容部分C字符串函数</h4><p><strong>描述</strong>：SDS末尾保存的空字串，使得其可以重用一部分&lt;string.h&gt;库定义的函数，从而避免了不必要的代码重复实现。</p>\n<h3 id=\"与C字符串相比的区别\"><a href=\"#与C字符串相比的区别\" class=\"headerlink\" title=\"与C字符串相比的区别\"></a>与C字符串相比的区别</h3><ul>\n<li>长度获取简单。SDS用len属性记录了SDS字符串的长度，因此只需常熟复杂度就可以获取到字符串长度，而C字符串并不记录长度，它需要遍历整个字符串才能得出字符串长度。</li>\n<li>len属性解决了扩充时C字符串的缓冲区溢出（buffer overflow）问题；</li>\n<li>free属性减少修改字符串时带来的内存重分配次数。</li>\n</ul>\n<p><br><br></p>\n<hr>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><ul>\n<li>链表提供了高效的<strong>节点重排</strong>能力，以及顺序性的节点访问方式。</li>\n<li>链表在redis中的应用非常广泛，列表键的底层实现之一就是链表（当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时）。</li>\n<li>此外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis本身还是用链表保存多个客户端的状态信息。</li>\n</ul>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>adlist.h/list表示一个链表，而每个链表节点使用一个adlist.h/listNode结构表示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\">  listNode *head;</span><br><span class=\"line\">  listNode *tail;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len; <span class=\"comment\">// 节点数量</span></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">  <span class=\"comment\">// 任意类型的值</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\">&#125; listNod</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br></p>\n<hr>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h3><ul>\n<li>字典，又称符号表、关联数组、映射（map），用于保存键值对的抽象数据结构。</li>\n<li>C语言并没有内置字典。因此字典又Redis本身实现。</li>\n<li>除了用来表示数据库外，字典还是哈希键的底层实现之一，当一个哈希键包含的键值对比较多，又或者键值对中的元素都是长字符串时，Redis就会使用字典作为哈希键的底层实现。</li>\n</ul>\n<h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>dict.h/dict表示一个字典。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dict</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 特定类型函数</span></span><br><span class=\"line\">  dictType *type;</span><br><span class=\"line\">  <span class=\"comment\">// 私有数据</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *privdata; </span><br><span class=\"line\">  <span class=\"comment\">// 哈希表</span></span><br><span class=\"line\">  dictht ht[<span class=\"number\">2</span>]; </span><br><span class=\"line\">  <span class=\"comment\">// rehash索引，没有进行rehash时，值为-1</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> trehashidx;</span><br><span class=\"line\">&#125; dict;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>dict.h/dictht表示一个哈希表。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 哈希表，这里相当于Java中的 Object [] table;</span></span><br><span class=\"line\">  dictEntry **table;</span><br><span class=\"line\">  <span class=\"comment\">// 大小，指数组</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size; </span><br><span class=\"line\">  <span class=\"comment\">// 哈希表大小掩码，总是用于计算索引值，总是等于size - 1</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 哈希表已有节点的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used; </span><br><span class=\"line\">&#125; dictht;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>而每个哈希节点使用dictEntry表示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 值 可以是一个对象指针，或uint64_t整数或int64_t整数</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">    <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">  &#125; v; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 指向下一个哈希节点，用于解决键冲突（链地址法）</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; dictEntry</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"哈希算法\"><a href=\"#哈希算法\" class=\"headerlink\" title=\"哈希算法\"></a>哈希算法</h3><p>字典用作数据库底层实现，或哈希键的实现时，Redis使用的<strong>MurmurHash2</strong>算法来计算哈希值</p>\n<p>key：键</p>\n<p>ht[x]：没有rehash时为ht[0]，rehash时ht[1]</p>\n<p>计算哈希值：hash = dict-&gt;type-&gt;hashFunction(key);</p>\n<p>计算在数组中的下标：index = hash &amp; dict-&gt;ht[x].sizemask;</p>\n<h3 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h3><p>Redis使用了链地址法解决，在产生冲突的下标地址的链表中，使用头插法插入哈希节点。</p>\n<h3 id=\"渐进式的Rehash\"><a href=\"#渐进式的Rehash\" class=\"headerlink\" title=\"渐进式的Rehash\"></a>渐进式的Rehash</h3><p>Redis也有一个负载因子用于控制，哈希表的数组大小。当负载因子超过承受限制或远低于预期时，就会进行rehash的操作，进行扩展或缩小哈希表。</p>\n<p>负载因子（load factor）计算方式：load_factor = ht[0].used / ht[0].size</p>\n<p>扩展时：</p>\n<p><strong>条件：</strong>一般情况下，负载因子大于等于1，就进行扩展；在执行BGSAVE或BGREERITEAOF命令时，负载因子大于等于5才开始扩展。</p>\n<p>方法：</p>\n<ol>\n<li>分配ht[1]的空间，size为：大于等于ht[0].used * 2的第一个2^n数</li>\n<li></li>\n</ol>\n<p>收缩时：</p>\n<p><strong>条件：</strong>负载因子小于0.1，就开始收缩</p>\n<p><br><br></p>\n<hr>\n<h2 id=\"跳跃表\"><a href=\"#跳跃表\" class=\"headerlink\" title=\"跳跃表\"></a>跳跃表</h2><h3 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Redis使用其作为有序集合键的底层实现之一。当一个有序集合包含的元素数量比较多，又或者集合中的元素都是长字符串时，Redis就会使用跳跃表作为有序集合的底层实现。</p>\n<p><br><br></p>\n<hr>\n<h2 id=\"整数集合\"><a href=\"#整数集合\" class=\"headerlink\" title=\"整数集合\"></a>整数集合</h2><h3 id=\"描述-4\"><a href=\"#描述-4\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>整数集合是Redis用于保存整数值的集合抽象数据结构，当一个集合只包含整数值元素，且元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。</p>\n<p>它可以保存int16_t、int32_t、int64_t的整数值，并且保证集合有序且不会出现重复。</p>\n<h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>每个intset.h/intset结构表示一个整数集合</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">intset</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> encoding; <span class=\"comment\">// 编码 三种类型int16_t、int32_t、int64_t</span></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> length; <span class=\"comment\">// 元素数量</span></span><br><span class=\"line\">  <span class=\"keyword\">int8_t</span> contents []; <span class=\"comment\">// 保存元素的数组，其保存的正真类型取决于encoding</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h3><p>新元素超过当前类型的范围时，就要向上转型，redis称为升级（upgrade）。例如16-32，32-64。当然，整数集合不支持降级操作，一旦升级，编码就会一直保持升级后的状态，这一点跟Java一样。</p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>根据升级类型，扩展底层数组的空间大小，并未新元素分配空间</li>\n<li>把数组中现有的元素转换成升级后的类型，并从最后一个元素开始将之移动到新的位置上（例如：16位的整数转为32位时，数组为每一个元素的空间都分配了32位。从最后一个元素开始移动，可以确保一次移动完毕，且不会造成数据损坏）</li>\n<li>将新元素添加到数组（由于新元素是向上转型，那么新元素只能是大于或小于当前数组的所有数的情况。比如一个32位的正整数或负整数）</li>\n</ol>\n<p><br><br></p>\n<hr>\n<h2 id=\"压缩列表\"><a href=\"#压缩列表\" class=\"headerlink\" title=\"压缩列表\"></a>压缩列表</h2><h3 id=\"描述-5\"><a href=\"#描述-5\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>压缩列表是Redis为了节约内存而开发的，是由一系列<strong>特殊编码</strong>的<strong>连续内存块</strong>组成的顺序性数据结构。</p>\n<p>也是列表键和哈希键的底层实现之一，当一个列表键只包含少量列表项，并且列表项要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现；当一个哈希键只包含少量键值对，并且键值对的键和值要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现。</p>\n<h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>由于是连续的内存块，且经过特殊编码的，因此它跟之前的几种数据结构不同。整个压缩列表的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zlbyte | zltail | zllen | entry1~~~entryn | zlend</span><br><span class=\"line\">zlbyet：列表占用的内存字节数</span><br><span class=\"line\">zltail：记录列表尾节点离列表的起始地址有多少字节</span><br><span class=\"line\">zllen：记录列表包含的节点数量</span><br><span class=\"line\">entry：每一个列表节点，数量不定</span><br><span class=\"line\">zlend：特殊值<span class=\"number\">0xFF</span>（十进制<span class=\"number\">255</span>），用于标记压缩列表的末端</span><br></pre></td></tr></table></figure>\n\n\n\n<p>每一个实体entry包含的内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">previous_entry_lenth  |  encoding  |  content</span><br><span class=\"line\">previous_entry_lenth：记录压缩列表前一个节点的长度</span><br><span class=\"line\">encoding：记录节点content属性所保存数据的类型和长度</span><br><span class=\"line\">content：保存节点值，可以是一个字节数组或者整数</span><br></pre></td></tr></table></figure>\n\n\n\n<p><br><br></p>\n<hr>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"描述：\"><a href=\"#描述：\" class=\"headerlink\" title=\"描述：\"></a>描述：</h3><p>Redis没有直接使用上述的数据机构来实现键值对数据库，而是基于这些数据结构创建一个对象系统。</p>\n<p>Redis创建一个键值对时，最少会建两个对象，键的对象和值的对象；键总是一个字符串对象，而值可以是对象系统的任一种。</p>\n<h3 id=\"对象系统：\"><a href=\"#对象系统：\" class=\"headerlink\" title=\"对象系统：\"></a>对象系统：</h3><ul>\n<li><strong>对象系统</strong>包含：字符串对象、列表对象、哈希对象、集合对象和有序集合对象五种。</li>\n<li>对象系统实现了基于引用计数技术的内存回收机制：当程序不再使用某个对象的时候（什么情况下才表示不再使用呢，即引用计数为0时），这个对象所占用的内存就会被自动释放。此外该技术实现了对象共享机制，通过让多个数据库键公用同一对象来节约内存。</li>\n<li>对象带有访问时间记录信息，其用于计算数据库键的空转时长（未被调用），在服务器启用了maxmemory功能的情况下，空转时长较大的键可能会被服务器优先删除。</li>\n</ul>\n<h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><p>每个对象都由一个redisObject结构表示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisObject</span>&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 类型 REDIS_STRING REDIS_LIST REDIS_HASH REDIS_SET REDIS_ZSET</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> type:<span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> encoding; <span class=\"comment\">// 编码 决定了该类型使用什么底层数据结构</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *ptr; <span class=\"comment\">// 指向底层实现数据结构的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> refcount; <span class=\"comment\">// 引用计数 用于内存回收机制、共享机制</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> lru:<span class=\"number\">22</span>; <span class=\"comment\">// 记录对象的最后一次被访问时间</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; robj;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ptr指针所指向数据结构，它的类型由encoding属性决定。encoding记录了对象所使用的编码，即对象使用了什么数据结构作为底层实现。</p>\n<h3 id=\"对象的常用命令：\"><a href=\"#对象的常用命令：\" class=\"headerlink\" title=\"对象的常用命令：\"></a>对象的常用命令：</h3><table>\n<thead>\n<tr>\n<th>object encoding</th>\n<th>值的编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>object refcount</td>\n<td>对象的引用计数</td>\n</tr>\n<tr>\n<td>object idletime</td>\n<td>对象的空转时长，该命令不会修改对象的lru属性</td>\n</tr>\n<tr>\n<td>type</td>\n<td>对象类型</td>\n</tr>\n<tr>\n<td>del</td>\n<td>删除键以及值</td>\n</tr>\n<tr>\n<td>rename</td>\n<td>重命键</td>\n</tr>\n<tr>\n<td>expire</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"对象系统各编码使用的数据结构：\"><a href=\"#对象系统各编码使用的数据结构：\" class=\"headerlink\" title=\"对象系统各编码使用的数据结构：\"></a>对象系统各编码使用的数据结构：</h3><table>\n<thead>\n<tr>\n<th>type类型</th>\n<th>encoding编码</th>\n<th>ptr指向的数据结构</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_INT</td>\n<td>整数值的实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_EMBSTR</td>\n<td>embstr编码的sds实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_RAW</td>\n<td>sds字符串实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩列表实现</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_LINKEDLIST</td>\n<td>链表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_INTSET</td>\n<td>整数集合实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_SKIPLIST</td>\n<td>跳跃表和字典实现</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据结构的转换：\"><a href=\"#数据结构的转换：\" class=\"headerlink\" title=\"数据结构的转换：\"></a>数据结构的转换：</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>转换规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_STRING</td>\n<td>为整数值且可以用long型表示使用int；当保存字符串，且长度小于等于39字节，使用embstr编码；否则使用SDS</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>全是整数或短字符串且元素少使用压缩列表，否则使用链表</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>全是整数或短字符串且元素少使用压缩列表，否则使用字典</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>全是整数且元素少使用整数列表，否则使用字典</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>全是整数或短字符串且元素少使用压缩列表，否则使用跳跃表和字典</td>\n</tr>\n</tbody></table>\n<h3 id=\"字符串对象\"><a href=\"#字符串对象\" class=\"headerlink\" title=\"字符串对象\"></a>字符串对象</h3><p>int embstr raw</p>\n<p>字符串对象是五种类型中，唯一一种会被其他四种对象嵌套的类型。</p>\n<p>embstr编码与raw编码异同：</p>\n<ul>\n<li>两者都使用了redisObject机构和sdsstr结构表示字符串</li>\n<li>但是raw编码会调用两次内存分配函数来分别创建两个结构，而embstr只需一次且分配了连续的内存空间。</li>\n<li>意味着释放内存时，前者也需要释放两次，而后者只需要释放一次。</li>\n<li>embstr是读取连续内存空间的数据，因此读取速度更快</li>\n<li>embstr是只读的，而raw可读写。embstr是专门用于保存短字符串的一种优化编码方式。embstr无法修改的只读对象。若要对其进行修改，会将embstr先转为raw对象，再执行修改命令</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>set</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get</td>\n<td></td>\n</tr>\n<tr>\n<td>append</td>\n<td>在值后添加</td>\n</tr>\n<tr>\n<td>strlen</td>\n<td>字符串长度</td>\n</tr>\n</tbody></table>\n<h3 id=\"列表对象\"><a href=\"#列表对象\" class=\"headerlink\" title=\"列表对象\"></a>列表对象</h3><p>ziplist linkedlist</p>\n<p>编码转换：</p>\n<ul>\n<li>字符串元素的长度小于64字节，元素数量小于512个时，使用ziplist</li>\n<li>通过配置文件修改：list-max-ziplist-value、list-max-ziplist-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>lpush</th>\n<th>头部添加</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lpop</td>\n<td>头部删除</td>\n</tr>\n<tr>\n<td>rpush</td>\n<td>尾部添加</td>\n</tr>\n<tr>\n<td>rpop</td>\n<td>尾部删除</td>\n</tr>\n<tr>\n<td>llen</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>lindex</td>\n<td>返回下标的元素</td>\n</tr>\n<tr>\n<td>lset</td>\n<td>更新节点的元素</td>\n</tr>\n<tr>\n<td>lrange key s e</td>\n<td>展示范围内的元素</td>\n</tr>\n</tbody></table>\n<h3 id=\"哈希对象\"><a href=\"#哈希对象\" class=\"headerlink\" title=\"哈希对象\"></a>哈希对象</h3><p>ziplist hashtable</p>\n<p>当使用ziplist保存哈希键值时，将键和值都作为一个entry，然后以键在前值在后的顺序插入压缩表</p>\n<p>编码转换：</p>\n<ul>\n<li>所有键值对的键和值，都是用字符串，且长度小于64字节，键值对数量小于64个时，使用压缩表</li>\n<li>通过配置文件修改：hash-max-ziplist-value、hash-max-ziplist-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>hset</th>\n<th>添加键值对</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hget</td>\n<td>获取键的值</td>\n</tr>\n<tr>\n<td>hdel</td>\n<td>删除键对应的键值对</td>\n</tr>\n<tr>\n<td>hlen</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>hgetall</td>\n<td>获取所有键值对</td>\n</tr>\n</tbody></table>\n<h3 id=\"集合对象\"><a href=\"#集合对象\" class=\"headerlink\" title=\"集合对象\"></a>集合对象</h3><p>intset hashtable</p>\n<p>使用hashtable时，字典的每个键都是一个字符串对象，值则全是NULL。</p>\n<p>编码转换：</p>\n<ul>\n<li>集合对象保存的元素都是用整数值，且元素数量不超过512个时，使用intset</li>\n<li>通过配置文件修改：set-max-intset-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>sadd</th>\n<th>添加元素</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>scard</td>\n<td>集合元素的数量</td>\n</tr>\n<tr>\n<td>sismember</td>\n<td>指定元素是否存在</td>\n</tr>\n<tr>\n<td>smembers</td>\n<td>获取所有元素</td>\n</tr>\n<tr>\n<td>spop</td>\n<td>随机删除一个元素并返回，在返回给客户端值后才会正真删除</td>\n</tr>\n</tbody></table>\n<h3 id=\"有序集合对象\"><a href=\"#有序集合对象\" class=\"headerlink\" title=\"有序集合对象\"></a>有序集合对象</h3><p>ziplist skiplist&amp;hashtable</p>\n<p>压缩表的表现形式：</p>\n<ul>\n<li>使用压缩表时，元素按分值从小到大进行排序，分值小的靠近表头，分值大的靠近表尾。</li>\n<li>压缩表中，每个元素用两个连续的entry表示，第一个保存元素，第二个保存元素的分值。</li>\n</ul>\n<p>跳跃表和哈希表的表现形式：</p>\n<p>skiplist编码的有序集合对象使用zset结构作为底层实现，其同时包含一个字典和一个跳跃表：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zset</span>&#123;</span></span><br><span class=\"line\">  zskiplist *zsl; <span class=\"comment\">// 跳跃表</span></span><br><span class=\"line\">  dict *dict; <span class=\"comment\">// 字典</span></span><br><span class=\"line\">&#125;zset;</span><br></pre></td></tr></table></figure>\n\n<p>虽然zset同时使用字典和跳跃表保存有序集合，但这两种结构都通过指针来共享相同元素的成员和分值，因此不会造成浪费额外的内存。</p>\n<p>编码转换：</p>\n<ul>\n<li>有序集合对象保存的元素长度都小于64字节，且元素数量小于128个时，使用ziplist</li>\n<li>通过配置文件修改：zset-max-ziplist-value、zset-max-ziplist-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>zadd</th>\n<th>添加元素</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zrem</td>\n<td>删除元素中的指定成员</td>\n</tr>\n<tr>\n<td>zcard</td>\n<td>集合元素的数量</td>\n</tr>\n<tr>\n<td>zcount</td>\n<td>分值在给定范围内的元素数量</td>\n</tr>\n<tr>\n<td>zrange</td>\n<td>返回给定索引范围的所有元素</td>\n</tr>\n<tr>\n<td>zrank</td>\n<td>元素的排名（相当于index+1）</td>\n</tr>\n<tr>\n<td>zscore</td>\n<td>给定元素的分值</td>\n</tr>\n</tbody></table>\n<h3 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h3><p>描述：</p>\n<p>C语言并不具备自动内存回收的功能，Redis构建了一个引用计数（reference counting）计数实现的内存回收机制。</p>\n<p>对于一个对象而言，它的生命周期为创建对象、操作对象、释放对象三个阶段。</p>\n<p>引用计数：</p>\n<p>程序通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。</p>\n<p>引用计数在对象系统中的属性为：refcount</p>\n<p>refcount的状态变化：</p>\n<ul>\n<li>创建新对象时，对象的refcount值初始化为1</li>\n<li>对象被新程序使用时，refcount++</li>\n<li>新程序使用结束时，refcount–</li>\n<li>当对象的引用计数为0时，对象占用的内存会被释放</li>\n</ul>\n<h3 id=\"对象共享\"><a href=\"#对象共享\" class=\"headerlink\" title=\"对象共享\"></a>对象共享</h3><p>描述：</p>\n<p>对象的共享也是通过上述的refcount实现的。</p>\n<p>哪些对象会被共享：</p>\n<ul>\n<li>Redis只对包含整数值的字符串对象进行共享。</li>\n<li>Redis初始化服务器时，创建0-9999的字符串对象，用以实现这些整数值的共享</li>\n<li>Redis不共享包含字符串的对象，那有会增加判断的复杂度，从而影响内存性能</li>\n</ul>\n<p>共享的实现：</p>\n<ol>\n<li>将数据库键的值指针指向一个现有的值对象；</li>\n<li>将被共享的值对象的引用计数加一</li>\n</ol>\n<h3 id=\"对象的空转时长\"><a href=\"#对象的空转时长\" class=\"headerlink\" title=\"对象的空转时长\"></a>对象的空转时长</h3><p>描述：</p>\n<p>lru属性，记录对象最后一次被访问的时间。</p>\n<p>作用：</p>\n<p>当服务器打开了maxmemory选项时，且回收内存的算法为volatile-lru或者allkeys-lru，那么当服务器占用的内存数超过了maxmemory设置的上限值时，空转时长较高的那部分键会优先被服务器释放，从而回收内存。</p>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n<p>[Redis设计与实现-黄健宏]</p>\n","site":{"data":{}},"excerpt":"","more":"<p>导读：Redis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。</p>\n<hr>\n<h1 id=\"Redis基础知识\"><a href=\"#Redis基础知识\" class=\"headerlink\" title=\"Redis基础知识\"></a>Redis基础知识</h1><h2 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a><strong>概念：</strong></h2><p>Redis（Remote Dictionary Server）是一个在内存中运行的数据结构的存储服务器（an in-memory data structure store）。Redis支持各种抽象数据结构，例如字符串，列表，映射，集合，排序集合，HyperLogLogs，位图，流和空间索引。</p>\n<h2 id=\"用途：\"><a href=\"#用途：\" class=\"headerlink\" title=\"用途：\"></a><strong>用途：</strong></h2><p>常被用于分布式、键值对数据库、高速缓存、消息代理等应用。</p>\n<h2 id=\"redis的优点\"><a href=\"#redis的优点\" class=\"headerlink\" title=\"redis的优点\"></a>redis的优点</h2><ol>\n<li>内存操作，高性能</li>\n<li>单线程执行，天然支持并发</li>\n</ol>\n<p><br><br></p>\n<hr>\n<h1 id=\"Redis的底层数据结构\"><a href=\"#Redis的底层数据结构\" class=\"headerlink\" title=\"Redis的底层数据结构\"></a>Redis的底层数据结构</h1><h2 id=\"简单动态字符串：SDS\"><a href=\"#简单动态字符串：SDS\" class=\"headerlink\" title=\"简单动态字符串：SDS\"></a>简单动态字符串：SDS</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Redis由C语言编写。它将SDS（simple dynamic string）用作默认的字符串表示方式。而C字符串仅用作字符串字面量（string literal），即无须对字符串值进行修改的地方。Redis的字符串类型的键值都是由SDS实现的。此外，SDS还可以被用作缓冲区（buffer），例如AOF缓冲区、输入缓冲区等。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>SDS遵循C字符串以空字符结尾的惯例，保存空字符的1字节空间不计算在SDS的len属性里。该空字符的添加操作由SDS函数自动完成。这一操作的好处是，可以直接复用C语言的一些字符串操作。</p>\n<p>每个sds.h/sdshdr表示一个SDS值，SDS的定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sdshdr</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> len; <span class=\"comment\">// 记录buf数组中已使用的字节数量，等于SDS所保存字符串的长度</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> <span class=\"built_in\">free</span>; <span class=\"comment\">// 记录buf数组中未使用的字节数量</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf[]; <span class=\"comment\">// 字节数组，用于保存字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>前置知识点：<br>内存的重新分配操作可能出现的问题</p>\n<ul>\n<li>缓冲区溢出：增长字符串时，程序需要通过内存分配来来确定是否需要对底层数组的空间进行扩充，以便存放增长后的字符串的值。如果忘了这一步，那么保存字符串的数组就会发生越界行为，占用未分配给它的内存区域，从而导致其他数据被意外篡改，这就是缓冲区溢出。</li>\n<li>内存泄漏：缩短字符串时，同样需要重新分配内存释放掉不需要的那部分空间。如果忘了这一步，那么剩下那一部分空间将会一直处于未使用状态且无法分配给其他程序来使用，这就是内存泄漏。</li>\n<li>内存重分配设计辅助的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作。</li>\n</ul>\n<h4 id=\"1-空间预分配\"><a href=\"#1-空间预分配\" class=\"headerlink\" title=\"1. 空间预分配\"></a>1. 空间预分配</h4><p><strong>描述</strong>：空间预分配操作用于优化SDS字符串的增长操作。</p>\n<p><strong>实现</strong>：</p>\n<ul>\n<li>当修改后的SDS长度小于1MB时，那么程序将分配和len相同大小的未使用空间。这时len的值和free的值相同。</li>\n<li>SDS的长度大于等于1MB时，那么会分配1MB的未使用空间。</li>\n</ul>\n<p><strong>作用</strong>：通过内存重分配和空间预分配的策略，Redis可以减少连续执行字符串增长操作所需的内存重分配次数，从而提高性能</p>\n<h4 id=\"2-惰性空间释放\"><a href=\"#2-惰性空间释放\" class=\"headerlink\" title=\"2. 惰性空间释放\"></a>2. 惰性空间释放</h4><p><strong>描述</strong>：用于优化SDS字符串缩短操作。</p>\n<p><strong>实现</strong>：</p>\n<ul>\n<li>缩短字符串时，程序并不立即使用内存重分配来回收缩短后多出的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。</li>\n</ul>\n<p><strong>作用</strong>：SDS避免了缩短字符串时所需的内存重分配操作。并为将来可能出现的增长操作提供了优化；不过有可能造成内存空间的浪费。</p>\n<h4 id=\"3-二进制安全\"><a href=\"#3-二进制安全\" class=\"headerlink\" title=\"3. 二进制安全\"></a>3. 二进制安全</h4><p><strong>描述</strong>：SDS的API都是二进制安全的。所有SDS API都会以处理二进制的方式来处理SDS存放在buf数组里的数据。</p>\n<h4 id=\"4-兼容部分C字符串函数\"><a href=\"#4-兼容部分C字符串函数\" class=\"headerlink\" title=\"4. 兼容部分C字符串函数\"></a>4. 兼容部分C字符串函数</h4><p><strong>描述</strong>：SDS末尾保存的空字串，使得其可以重用一部分&lt;string.h&gt;库定义的函数，从而避免了不必要的代码重复实现。</p>\n<h3 id=\"与C字符串相比的区别\"><a href=\"#与C字符串相比的区别\" class=\"headerlink\" title=\"与C字符串相比的区别\"></a>与C字符串相比的区别</h3><ul>\n<li>长度获取简单。SDS用len属性记录了SDS字符串的长度，因此只需常熟复杂度就可以获取到字符串长度，而C字符串并不记录长度，它需要遍历整个字符串才能得出字符串长度。</li>\n<li>len属性解决了扩充时C字符串的缓冲区溢出（buffer overflow）问题；</li>\n<li>free属性减少修改字符串时带来的内存重分配次数。</li>\n</ul>\n<p><br><br></p>\n<hr>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><ul>\n<li>链表提供了高效的<strong>节点重排</strong>能力，以及顺序性的节点访问方式。</li>\n<li>链表在redis中的应用非常广泛，列表键的底层实现之一就是链表（当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时）。</li>\n<li>此外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis本身还是用链表保存多个客户端的状态信息。</li>\n</ul>\n<h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>adlist.h/list表示一个链表，而每个链表节点使用一个adlist.h/listNode结构表示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> &#123;</span></span><br><span class=\"line\">  listNode *head;</span><br><span class=\"line\">  listNode *tail;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> len; <span class=\"comment\">// 节点数量</span></span><br><span class=\"line\">&#125; <span class=\"built_in\">list</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">listNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">  <span class=\"comment\">// 任意类型的值</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *value;</span><br><span class=\"line\">&#125; listNod</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br></p>\n<hr>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><h3 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h3><ul>\n<li>字典，又称符号表、关联数组、映射（map），用于保存键值对的抽象数据结构。</li>\n<li>C语言并没有内置字典。因此字典又Redis本身实现。</li>\n<li>除了用来表示数据库外，字典还是哈希键的底层实现之一，当一个哈希键包含的键值对比较多，又或者键值对中的元素都是长字符串时，Redis就会使用字典作为哈希键的底层实现。</li>\n</ul>\n<h3 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>dict.h/dict表示一个字典。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dict</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 特定类型函数</span></span><br><span class=\"line\">  dictType *type;</span><br><span class=\"line\">  <span class=\"comment\">// 私有数据</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *privdata; </span><br><span class=\"line\">  <span class=\"comment\">// 哈希表</span></span><br><span class=\"line\">  dictht ht[<span class=\"number\">2</span>]; </span><br><span class=\"line\">  <span class=\"comment\">// rehash索引，没有进行rehash时，值为-1</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> trehashidx;</span><br><span class=\"line\">&#125; dict;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>dict.h/dictht表示一个哈希表。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 哈希表，这里相当于Java中的 Object [] table;</span></span><br><span class=\"line\">  dictEntry **table;</span><br><span class=\"line\">  <span class=\"comment\">// 大小，指数组</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size; </span><br><span class=\"line\">  <span class=\"comment\">// 哈希表大小掩码，总是用于计算索引值，总是等于size - 1</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 哈希表已有节点的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used; </span><br><span class=\"line\">&#125; dictht;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>而每个哈希节点使用dictEntry表示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 值 可以是一个对象指针，或uint64_t整数或int64_t整数</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">    <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">  &#125; v; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 指向下一个哈希节点，用于解决键冲突（链地址法）</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; dictEntry</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"哈希算法\"><a href=\"#哈希算法\" class=\"headerlink\" title=\"哈希算法\"></a>哈希算法</h3><p>字典用作数据库底层实现，或哈希键的实现时，Redis使用的<strong>MurmurHash2</strong>算法来计算哈希值</p>\n<p>key：键</p>\n<p>ht[x]：没有rehash时为ht[0]，rehash时ht[1]</p>\n<p>计算哈希值：hash = dict-&gt;type-&gt;hashFunction(key);</p>\n<p>计算在数组中的下标：index = hash &amp; dict-&gt;ht[x].sizemask;</p>\n<h3 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h3><p>Redis使用了链地址法解决，在产生冲突的下标地址的链表中，使用头插法插入哈希节点。</p>\n<h3 id=\"渐进式的Rehash\"><a href=\"#渐进式的Rehash\" class=\"headerlink\" title=\"渐进式的Rehash\"></a>渐进式的Rehash</h3><p>Redis也有一个负载因子用于控制，哈希表的数组大小。当负载因子超过承受限制或远低于预期时，就会进行rehash的操作，进行扩展或缩小哈希表。</p>\n<p>负载因子（load factor）计算方式：load_factor = ht[0].used / ht[0].size</p>\n<p>扩展时：</p>\n<p><strong>条件：</strong>一般情况下，负载因子大于等于1，就进行扩展；在执行BGSAVE或BGREERITEAOF命令时，负载因子大于等于5才开始扩展。</p>\n<p>方法：</p>\n<ol>\n<li>分配ht[1]的空间，size为：大于等于ht[0].used * 2的第一个2^n数</li>\n<li></li>\n</ol>\n<p>收缩时：</p>\n<p><strong>条件：</strong>负载因子小于0.1，就开始收缩</p>\n<p><br><br></p>\n<hr>\n<h2 id=\"跳跃表\"><a href=\"#跳跃表\" class=\"headerlink\" title=\"跳跃表\"></a>跳跃表</h2><h3 id=\"描述-3\"><a href=\"#描述-3\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Redis使用其作为有序集合键的底层实现之一。当一个有序集合包含的元素数量比较多，又或者集合中的元素都是长字符串时，Redis就会使用跳跃表作为有序集合的底层实现。</p>\n<p><br><br></p>\n<hr>\n<h2 id=\"整数集合\"><a href=\"#整数集合\" class=\"headerlink\" title=\"整数集合\"></a>整数集合</h2><h3 id=\"描述-4\"><a href=\"#描述-4\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>整数集合是Redis用于保存整数值的集合抽象数据结构，当一个集合只包含整数值元素，且元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。</p>\n<p>它可以保存int16_t、int32_t、int64_t的整数值，并且保证集合有序且不会出现重复。</p>\n<h3 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>每个intset.h/intset结构表示一个整数集合</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">intset</span> &#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> encoding; <span class=\"comment\">// 编码 三种类型int16_t、int32_t、int64_t</span></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> length; <span class=\"comment\">// 元素数量</span></span><br><span class=\"line\">  <span class=\"keyword\">int8_t</span> contents []; <span class=\"comment\">// 保存元素的数组，其保存的正真类型取决于encoding</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h3><p>新元素超过当前类型的范围时，就要向上转型，redis称为升级（upgrade）。例如16-32，32-64。当然，整数集合不支持降级操作，一旦升级，编码就会一直保持升级后的状态，这一点跟Java一样。</p>\n<p><strong>步骤：</strong></p>\n<ol>\n<li>根据升级类型，扩展底层数组的空间大小，并未新元素分配空间</li>\n<li>把数组中现有的元素转换成升级后的类型，并从最后一个元素开始将之移动到新的位置上（例如：16位的整数转为32位时，数组为每一个元素的空间都分配了32位。从最后一个元素开始移动，可以确保一次移动完毕，且不会造成数据损坏）</li>\n<li>将新元素添加到数组（由于新元素是向上转型，那么新元素只能是大于或小于当前数组的所有数的情况。比如一个32位的正整数或负整数）</li>\n</ol>\n<p><br><br></p>\n<hr>\n<h2 id=\"压缩列表\"><a href=\"#压缩列表\" class=\"headerlink\" title=\"压缩列表\"></a>压缩列表</h2><h3 id=\"描述-5\"><a href=\"#描述-5\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>压缩列表是Redis为了节约内存而开发的，是由一系列<strong>特殊编码</strong>的<strong>连续内存块</strong>组成的顺序性数据结构。</p>\n<p>也是列表键和哈希键的底层实现之一，当一个列表键只包含少量列表项，并且列表项要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现；当一个哈希键只包含少量键值对，并且键值对的键和值要么是小整数值、要么是比较短的字符串，那么Redis就会使用压缩列表做列表键的底层实现。</p>\n<h3 id=\"定义-4\"><a href=\"#定义-4\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>由于是连续的内存块，且经过特殊编码的，因此它跟之前的几种数据结构不同。整个压缩列表的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zlbyte | zltail | zllen | entry1~~~entryn | zlend</span><br><span class=\"line\">zlbyet：列表占用的内存字节数</span><br><span class=\"line\">zltail：记录列表尾节点离列表的起始地址有多少字节</span><br><span class=\"line\">zllen：记录列表包含的节点数量</span><br><span class=\"line\">entry：每一个列表节点，数量不定</span><br><span class=\"line\">zlend：特殊值<span class=\"number\">0xFF</span>（十进制<span class=\"number\">255</span>），用于标记压缩列表的末端</span><br></pre></td></tr></table></figure>\n\n\n\n<p>每一个实体entry包含的内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">previous_entry_lenth  |  encoding  |  content</span><br><span class=\"line\">previous_entry_lenth：记录压缩列表前一个节点的长度</span><br><span class=\"line\">encoding：记录节点content属性所保存数据的类型和长度</span><br><span class=\"line\">content：保存节点值，可以是一个字节数组或者整数</span><br></pre></td></tr></table></figure>\n\n\n\n<p><br><br></p>\n<hr>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"描述：\"><a href=\"#描述：\" class=\"headerlink\" title=\"描述：\"></a>描述：</h3><p>Redis没有直接使用上述的数据机构来实现键值对数据库，而是基于这些数据结构创建一个对象系统。</p>\n<p>Redis创建一个键值对时，最少会建两个对象，键的对象和值的对象；键总是一个字符串对象，而值可以是对象系统的任一种。</p>\n<h3 id=\"对象系统：\"><a href=\"#对象系统：\" class=\"headerlink\" title=\"对象系统：\"></a>对象系统：</h3><ul>\n<li><strong>对象系统</strong>包含：字符串对象、列表对象、哈希对象、集合对象和有序集合对象五种。</li>\n<li>对象系统实现了基于引用计数技术的内存回收机制：当程序不再使用某个对象的时候（什么情况下才表示不再使用呢，即引用计数为0时），这个对象所占用的内存就会被自动释放。此外该技术实现了对象共享机制，通过让多个数据库键公用同一对象来节约内存。</li>\n<li>对象带有访问时间记录信息，其用于计算数据库键的空转时长（未被调用），在服务器启用了maxmemory功能的情况下，空转时长较大的键可能会被服务器优先删除。</li>\n</ul>\n<h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><p>每个对象都由一个redisObject结构表示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">redisObject</span>&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// 类型 REDIS_STRING REDIS_LIST REDIS_HASH REDIS_SET REDIS_ZSET</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> type:<span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> encoding; <span class=\"comment\">// 编码 决定了该类型使用什么底层数据结构</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *ptr; <span class=\"comment\">// 指向底层实现数据结构的指针</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> refcount; <span class=\"comment\">// 引用计数 用于内存回收机制、共享机制</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> lru:<span class=\"number\">22</span>; <span class=\"comment\">// 记录对象的最后一次被访问时间</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; robj;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ptr指针所指向数据结构，它的类型由encoding属性决定。encoding记录了对象所使用的编码，即对象使用了什么数据结构作为底层实现。</p>\n<h3 id=\"对象的常用命令：\"><a href=\"#对象的常用命令：\" class=\"headerlink\" title=\"对象的常用命令：\"></a>对象的常用命令：</h3><table>\n<thead>\n<tr>\n<th>object encoding</th>\n<th>值的编码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>object refcount</td>\n<td>对象的引用计数</td>\n</tr>\n<tr>\n<td>object idletime</td>\n<td>对象的空转时长，该命令不会修改对象的lru属性</td>\n</tr>\n<tr>\n<td>type</td>\n<td>对象类型</td>\n</tr>\n<tr>\n<td>del</td>\n<td>删除键以及值</td>\n</tr>\n<tr>\n<td>rename</td>\n<td>重命键</td>\n</tr>\n<tr>\n<td>expire</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"对象系统各编码使用的数据结构：\"><a href=\"#对象系统各编码使用的数据结构：\" class=\"headerlink\" title=\"对象系统各编码使用的数据结构：\"></a>对象系统各编码使用的数据结构：</h3><table>\n<thead>\n<tr>\n<th>type类型</th>\n<th>encoding编码</th>\n<th>ptr指向的数据结构</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_INT</td>\n<td>整数值的实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_EMBSTR</td>\n<td>embstr编码的sds实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_RAW</td>\n<td>sds字符串实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩列表实现</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_LINKEDLIST</td>\n<td>链表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_INTSET</td>\n<td>整数集合实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_SKIPLIST</td>\n<td>跳跃表和字典实现</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据结构的转换：\"><a href=\"#数据结构的转换：\" class=\"headerlink\" title=\"数据结构的转换：\"></a>数据结构的转换：</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>转换规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_STRING</td>\n<td>为整数值且可以用long型表示使用int；当保存字符串，且长度小于等于39字节，使用embstr编码；否则使用SDS</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>全是整数或短字符串且元素少使用压缩列表，否则使用链表</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>全是整数或短字符串且元素少使用压缩列表，否则使用字典</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>全是整数且元素少使用整数列表，否则使用字典</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>全是整数或短字符串且元素少使用压缩列表，否则使用跳跃表和字典</td>\n</tr>\n</tbody></table>\n<h3 id=\"字符串对象\"><a href=\"#字符串对象\" class=\"headerlink\" title=\"字符串对象\"></a>字符串对象</h3><p>int embstr raw</p>\n<p>字符串对象是五种类型中，唯一一种会被其他四种对象嵌套的类型。</p>\n<p>embstr编码与raw编码异同：</p>\n<ul>\n<li>两者都使用了redisObject机构和sdsstr结构表示字符串</li>\n<li>但是raw编码会调用两次内存分配函数来分别创建两个结构，而embstr只需一次且分配了连续的内存空间。</li>\n<li>意味着释放内存时，前者也需要释放两次，而后者只需要释放一次。</li>\n<li>embstr是读取连续内存空间的数据，因此读取速度更快</li>\n<li>embstr是只读的，而raw可读写。embstr是专门用于保存短字符串的一种优化编码方式。embstr无法修改的只读对象。若要对其进行修改，会将embstr先转为raw对象，再执行修改命令</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>set</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get</td>\n<td></td>\n</tr>\n<tr>\n<td>append</td>\n<td>在值后添加</td>\n</tr>\n<tr>\n<td>strlen</td>\n<td>字符串长度</td>\n</tr>\n</tbody></table>\n<h3 id=\"列表对象\"><a href=\"#列表对象\" class=\"headerlink\" title=\"列表对象\"></a>列表对象</h3><p>ziplist linkedlist</p>\n<p>编码转换：</p>\n<ul>\n<li>字符串元素的长度小于64字节，元素数量小于512个时，使用ziplist</li>\n<li>通过配置文件修改：list-max-ziplist-value、list-max-ziplist-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>lpush</th>\n<th>头部添加</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lpop</td>\n<td>头部删除</td>\n</tr>\n<tr>\n<td>rpush</td>\n<td>尾部添加</td>\n</tr>\n<tr>\n<td>rpop</td>\n<td>尾部删除</td>\n</tr>\n<tr>\n<td>llen</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>lindex</td>\n<td>返回下标的元素</td>\n</tr>\n<tr>\n<td>lset</td>\n<td>更新节点的元素</td>\n</tr>\n<tr>\n<td>lrange key s e</td>\n<td>展示范围内的元素</td>\n</tr>\n</tbody></table>\n<h3 id=\"哈希对象\"><a href=\"#哈希对象\" class=\"headerlink\" title=\"哈希对象\"></a>哈希对象</h3><p>ziplist hashtable</p>\n<p>当使用ziplist保存哈希键值时，将键和值都作为一个entry，然后以键在前值在后的顺序插入压缩表</p>\n<p>编码转换：</p>\n<ul>\n<li>所有键值对的键和值，都是用字符串，且长度小于64字节，键值对数量小于64个时，使用压缩表</li>\n<li>通过配置文件修改：hash-max-ziplist-value、hash-max-ziplist-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>hset</th>\n<th>添加键值对</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hget</td>\n<td>获取键的值</td>\n</tr>\n<tr>\n<td>hdel</td>\n<td>删除键对应的键值对</td>\n</tr>\n<tr>\n<td>hlen</td>\n<td>长度</td>\n</tr>\n<tr>\n<td>hgetall</td>\n<td>获取所有键值对</td>\n</tr>\n</tbody></table>\n<h3 id=\"集合对象\"><a href=\"#集合对象\" class=\"headerlink\" title=\"集合对象\"></a>集合对象</h3><p>intset hashtable</p>\n<p>使用hashtable时，字典的每个键都是一个字符串对象，值则全是NULL。</p>\n<p>编码转换：</p>\n<ul>\n<li>集合对象保存的元素都是用整数值，且元素数量不超过512个时，使用intset</li>\n<li>通过配置文件修改：set-max-intset-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>sadd</th>\n<th>添加元素</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>scard</td>\n<td>集合元素的数量</td>\n</tr>\n<tr>\n<td>sismember</td>\n<td>指定元素是否存在</td>\n</tr>\n<tr>\n<td>smembers</td>\n<td>获取所有元素</td>\n</tr>\n<tr>\n<td>spop</td>\n<td>随机删除一个元素并返回，在返回给客户端值后才会正真删除</td>\n</tr>\n</tbody></table>\n<h3 id=\"有序集合对象\"><a href=\"#有序集合对象\" class=\"headerlink\" title=\"有序集合对象\"></a>有序集合对象</h3><p>ziplist skiplist&amp;hashtable</p>\n<p>压缩表的表现形式：</p>\n<ul>\n<li>使用压缩表时，元素按分值从小到大进行排序，分值小的靠近表头，分值大的靠近表尾。</li>\n<li>压缩表中，每个元素用两个连续的entry表示，第一个保存元素，第二个保存元素的分值。</li>\n</ul>\n<p>跳跃表和哈希表的表现形式：</p>\n<p>skiplist编码的有序集合对象使用zset结构作为底层实现，其同时包含一个字典和一个跳跃表：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">zset</span>&#123;</span></span><br><span class=\"line\">  zskiplist *zsl; <span class=\"comment\">// 跳跃表</span></span><br><span class=\"line\">  dict *dict; <span class=\"comment\">// 字典</span></span><br><span class=\"line\">&#125;zset;</span><br></pre></td></tr></table></figure>\n\n<p>虽然zset同时使用字典和跳跃表保存有序集合，但这两种结构都通过指针来共享相同元素的成员和分值，因此不会造成浪费额外的内存。</p>\n<p>编码转换：</p>\n<ul>\n<li>有序集合对象保存的元素长度都小于64字节，且元素数量小于128个时，使用ziplist</li>\n<li>通过配置文件修改：zset-max-ziplist-value、zset-max-ziplist-entries</li>\n</ul>\n<p>常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>zadd</th>\n<th>添加元素</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>zrem</td>\n<td>删除元素中的指定成员</td>\n</tr>\n<tr>\n<td>zcard</td>\n<td>集合元素的数量</td>\n</tr>\n<tr>\n<td>zcount</td>\n<td>分值在给定范围内的元素数量</td>\n</tr>\n<tr>\n<td>zrange</td>\n<td>返回给定索引范围的所有元素</td>\n</tr>\n<tr>\n<td>zrank</td>\n<td>元素的排名（相当于index+1）</td>\n</tr>\n<tr>\n<td>zscore</td>\n<td>给定元素的分值</td>\n</tr>\n</tbody></table>\n<h3 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h3><p>描述：</p>\n<p>C语言并不具备自动内存回收的功能，Redis构建了一个引用计数（reference counting）计数实现的内存回收机制。</p>\n<p>对于一个对象而言，它的生命周期为创建对象、操作对象、释放对象三个阶段。</p>\n<p>引用计数：</p>\n<p>程序通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。</p>\n<p>引用计数在对象系统中的属性为：refcount</p>\n<p>refcount的状态变化：</p>\n<ul>\n<li>创建新对象时，对象的refcount值初始化为1</li>\n<li>对象被新程序使用时，refcount++</li>\n<li>新程序使用结束时，refcount–</li>\n<li>当对象的引用计数为0时，对象占用的内存会被释放</li>\n</ul>\n<h3 id=\"对象共享\"><a href=\"#对象共享\" class=\"headerlink\" title=\"对象共享\"></a>对象共享</h3><p>描述：</p>\n<p>对象的共享也是通过上述的refcount实现的。</p>\n<p>哪些对象会被共享：</p>\n<ul>\n<li>Redis只对包含整数值的字符串对象进行共享。</li>\n<li>Redis初始化服务器时，创建0-9999的字符串对象，用以实现这些整数值的共享</li>\n<li>Redis不共享包含字符串的对象，那有会增加判断的复杂度，从而影响内存性能</li>\n</ul>\n<p>共享的实现：</p>\n<ol>\n<li>将数据库键的值指针指向一个现有的值对象；</li>\n<li>将被共享的值对象的引用计数加一</li>\n</ol>\n<h3 id=\"对象的空转时长\"><a href=\"#对象的空转时长\" class=\"headerlink\" title=\"对象的空转时长\"></a>对象的空转时长</h3><p>描述：</p>\n<p>lru属性，记录对象最后一次被访问的时间。</p>\n<p>作用：</p>\n<p>当服务器打开了maxmemory选项时，且回收内存的算法为volatile-lru或者allkeys-lru，那么当服务器占用的内存数超过了maxmemory设置的上限值时，空转时长较高的那部分键会优先被服务器释放，从而回收内存。</p>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n<p>[Redis设计与实现-黄健宏]</p>\n"},{"title":"redis常用键值对解析","author":"WangJwi","_content":"\n导读：Redis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，其值不仅限于简单的字符串，还可以容纳更复杂的数据结构。\n\n\n<br><br>\n\n------\n\n# Redis的常用键值对\n\n## Redis的键值对\n\nRedis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，该值不仅限于简单的字符串，还可以容纳更复杂的数据结构。\n\n\n\n### Redis-Key\n\nRedis的键（Key）是二进制安全的字符串，这意味着可以使用任何二进制序列作为key，从“ foo”之类的字符串到JPEG文件的内容，同时空字符串也是有效的key键。\n\n在Redis的底层中由SDS实现。\n\n设置键的注意点：\n\n- **key使用的字节不宜过长**：太长的key字节，在内存方面不仅是个负担，并且在数据集中查找key时可能需要进行一些代价高昂的密钥比较。\n- **key也不宜设置太短**：与“ user：1000：followers”对比，“ u1000flw”写为key毫无意义，前者往往更具可读性。且与键对象本身和值对象使用的空间相比，单单添加key消耗的空间更少。\n- **key使用同一种设置类型**：例如，“ object-type：id”是一个好主意，例如“ user：1000”。点或破折号通常用于多字字段，例如“ comment：1234：reply.to”或“ comment：1234：reply-to”中。\n- 允许的最大key大小为**512 MB**。\n\n<br><br>\n\n------\n\n###  Redis-Value\n\nRedis的值（Value）支持以下几种类型：\n\n- **Binary-safe strings**：二进制安全字符串。\n- **Lists**：根据插入顺序排序的字符串元素的集合。它们基本上是*链表*。\n- **Sets**：唯一，未排序的字符串元素的集合。\n- **Sorted sets**：类似于集合，但是每个字符串元素在存入时都将于一个浮点数值的分数相关联，元素总是按照它们的分数排序，因此与Sets不同，可以检索一系列元素\n- **Hashes**：键值组成的哈希映射，键值都是字符串。\n- **Bit arrays** (or simply bitmaps)：可以使用特殊命令像位数组一样处理字符串值：可以设置和清除单个位，计数所有设置为1的位，找到第一个设置或未设置的位，等等。\n- **HyperLogLogs**：这是一个概率数据结构，用于估计集合的基数。\n- **Streams**：提供抽象日志数据类型的类地图项的仅追加集合。\n\n\n\nredis值的内部实现结构如下：\n\n| type类型     | encoding编码              | ptr指向的数据结构               |\n| ------------ | ------------------------- | ------------------------------- |\n| REDIS_STRING | REDIS_ENCODING_INT        | 整数值的实现的字符串对象        |\n| REDIS_STRING | REDIS_ENCODING_EMBSTR     | embstr编码的sds实现的字符串对象 |\n| REDIS_STRING | REDIS_ENCODING_RAW        | sds字符串实现的字符串对象       |\n| REDIS_LIST   | REDIS_ENCODING_ZIPLIST    | 压缩列表实现                    |\n| REDIS_LIST   | REDIS_ENCODING_LINKEDLIST | 链表实现                        |\n| REDIS_HASH   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_HASH   | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_SET    | REDIS_ENCODING_INTSET     | 整数集合实现                    |\n| REDIS_SET    | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_ZSET   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_ZSET   | REDIS_ENCODING_SKIPLIST   | 跳跃表和字典实现                |\n\n\n<br><br>\n\n------\n\n### Redis值的常用数据类型\n\n**字符串：String**\n\nRedis字符串类型是与Redis键关联的最简单的值类型。它也是Memcached中唯一的数据类型。\n\n值是二进制安全的字符串，意味着redis的string可以包含任何数据。比如jpg图片或者序列化的对象。值最大能存储**512 MB**的数据。\n\n\n\n**列表：List**\n\nredis是由双向链表（Linked List）的方式实现，而非数组形式。它能从链表的头尾进行操作。它是根据插入的顺序进行排序的有序列表。\n\n列表的常用案例：记住用户发布到社交网络上的最新更新。频繁查看的日志。\n\n\n\n\n\n**集合：Set**\n\nset 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。\n\n可以理解为一堆值不重复的列表，类似数学领域中的集合概念，且Redis也提供了针对集合的求交集、并集、差集等操作。\n\n\n\n**有序集合：Sorted Set**\n\nRedis有序集合类似Redis集合，不同的是增加了一个功能，即集合是有序的。一个有序集合的每个成员带有分数，用于进行排序。\n\nRedis有序集合添加、删除和测试的时间复杂度均为O(1)(固定时间，无论里面包含的元素集合的数量)。列表的最大长度为2^32- 1元素(4294967295，超过40亿每个元素的集合)。\n\nRedis sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score,使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。\n\n\n\n**哈希表：Hash**\n\n对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。\n\n每个 hash 可以存储 2^32 -1 键值对（40多亿）。\n\n------\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)","source":"_posts/2021-05-28-redis-key-value.md","raw":"---\ntitle:  \"redis常用键值对解析\"\nauthor: WangJwi\ncategories:\n- redis\ntags:\n- redis\n- key-value\n---\n\n导读：Redis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，其值不仅限于简单的字符串，还可以容纳更复杂的数据结构。\n\n\n<br><br>\n\n------\n\n# Redis的常用键值对\n\n## Redis的键值对\n\nRedis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，该值不仅限于简单的字符串，还可以容纳更复杂的数据结构。\n\n\n\n### Redis-Key\n\nRedis的键（Key）是二进制安全的字符串，这意味着可以使用任何二进制序列作为key，从“ foo”之类的字符串到JPEG文件的内容，同时空字符串也是有效的key键。\n\n在Redis的底层中由SDS实现。\n\n设置键的注意点：\n\n- **key使用的字节不宜过长**：太长的key字节，在内存方面不仅是个负担，并且在数据集中查找key时可能需要进行一些代价高昂的密钥比较。\n- **key也不宜设置太短**：与“ user：1000：followers”对比，“ u1000flw”写为key毫无意义，前者往往更具可读性。且与键对象本身和值对象使用的空间相比，单单添加key消耗的空间更少。\n- **key使用同一种设置类型**：例如，“ object-type：id”是一个好主意，例如“ user：1000”。点或破折号通常用于多字字段，例如“ comment：1234：reply.to”或“ comment：1234：reply-to”中。\n- 允许的最大key大小为**512 MB**。\n\n<br><br>\n\n------\n\n###  Redis-Value\n\nRedis的值（Value）支持以下几种类型：\n\n- **Binary-safe strings**：二进制安全字符串。\n- **Lists**：根据插入顺序排序的字符串元素的集合。它们基本上是*链表*。\n- **Sets**：唯一，未排序的字符串元素的集合。\n- **Sorted sets**：类似于集合，但是每个字符串元素在存入时都将于一个浮点数值的分数相关联，元素总是按照它们的分数排序，因此与Sets不同，可以检索一系列元素\n- **Hashes**：键值组成的哈希映射，键值都是字符串。\n- **Bit arrays** (or simply bitmaps)：可以使用特殊命令像位数组一样处理字符串值：可以设置和清除单个位，计数所有设置为1的位，找到第一个设置或未设置的位，等等。\n- **HyperLogLogs**：这是一个概率数据结构，用于估计集合的基数。\n- **Streams**：提供抽象日志数据类型的类地图项的仅追加集合。\n\n\n\nredis值的内部实现结构如下：\n\n| type类型     | encoding编码              | ptr指向的数据结构               |\n| ------------ | ------------------------- | ------------------------------- |\n| REDIS_STRING | REDIS_ENCODING_INT        | 整数值的实现的字符串对象        |\n| REDIS_STRING | REDIS_ENCODING_EMBSTR     | embstr编码的sds实现的字符串对象 |\n| REDIS_STRING | REDIS_ENCODING_RAW        | sds字符串实现的字符串对象       |\n| REDIS_LIST   | REDIS_ENCODING_ZIPLIST    | 压缩列表实现                    |\n| REDIS_LIST   | REDIS_ENCODING_LINKEDLIST | 链表实现                        |\n| REDIS_HASH   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_HASH   | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_SET    | REDIS_ENCODING_INTSET     | 整数集合实现                    |\n| REDIS_SET    | REDIS_ENCODING_HT         | 字典实现                        |\n| REDIS_ZSET   | REDIS_ENCODING_ZIPLIST    | 压缩表实现                      |\n| REDIS_ZSET   | REDIS_ENCODING_SKIPLIST   | 跳跃表和字典实现                |\n\n\n<br><br>\n\n------\n\n### Redis值的常用数据类型\n\n**字符串：String**\n\nRedis字符串类型是与Redis键关联的最简单的值类型。它也是Memcached中唯一的数据类型。\n\n值是二进制安全的字符串，意味着redis的string可以包含任何数据。比如jpg图片或者序列化的对象。值最大能存储**512 MB**的数据。\n\n\n\n**列表：List**\n\nredis是由双向链表（Linked List）的方式实现，而非数组形式。它能从链表的头尾进行操作。它是根据插入的顺序进行排序的有序列表。\n\n列表的常用案例：记住用户发布到社交网络上的最新更新。频繁查看的日志。\n\n\n\n\n\n**集合：Set**\n\nset 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。\n\n可以理解为一堆值不重复的列表，类似数学领域中的集合概念，且Redis也提供了针对集合的求交集、并集、差集等操作。\n\n\n\n**有序集合：Sorted Set**\n\nRedis有序集合类似Redis集合，不同的是增加了一个功能，即集合是有序的。一个有序集合的每个成员带有分数，用于进行排序。\n\nRedis有序集合添加、删除和测试的时间复杂度均为O(1)(固定时间，无论里面包含的元素集合的数量)。列表的最大长度为2^32- 1元素(4294967295，超过40亿每个元素的集合)。\n\nRedis sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score,使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。\n\n\n\n**哈希表：Hash**\n\n对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。\n\n每个 hash 可以存储 2^32 -1 键值对（40多亿）。\n\n------\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)","slug":"2021-05-28-redis-key-value","published":1,"date":"2021-12-22T07:32:13.060Z","updated":"2021-12-22T07:05:39.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxh8313i00015cv13kac4vk8","content":"<p>导读：Redis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，其值不仅限于简单的字符串，还可以容纳更复杂的数据结构。</p>\n<p><br><br></p>\n<hr>\n<h1 id=\"Redis的常用键值对\"><a href=\"#Redis的常用键值对\" class=\"headerlink\" title=\"Redis的常用键值对\"></a>Redis的常用键值对</h1><h2 id=\"Redis的键值对\"><a href=\"#Redis的键值对\" class=\"headerlink\" title=\"Redis的键值对\"></a>Redis的键值对</h2><p>Redis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，该值不仅限于简单的字符串，还可以容纳更复杂的数据结构。</p>\n<h3 id=\"Redis-Key\"><a href=\"#Redis-Key\" class=\"headerlink\" title=\"Redis-Key\"></a>Redis-Key</h3><p>Redis的键（Key）是二进制安全的字符串，这意味着可以使用任何二进制序列作为key，从“ foo”之类的字符串到JPEG文件的内容，同时空字符串也是有效的key键。</p>\n<p>在Redis的底层中由SDS实现。</p>\n<p>设置键的注意点：</p>\n<ul>\n<li><strong>key使用的字节不宜过长</strong>：太长的key字节，在内存方面不仅是个负担，并且在数据集中查找key时可能需要进行一些代价高昂的密钥比较。</li>\n<li><strong>key也不宜设置太短</strong>：与“ user：1000：followers”对比，“ u1000flw”写为key毫无意义，前者往往更具可读性。且与键对象本身和值对象使用的空间相比，单单添加key消耗的空间更少。</li>\n<li><strong>key使用同一种设置类型</strong>：例如，“ object-type：id”是一个好主意，例如“ user：1000”。点或破折号通常用于多字字段，例如“ comment：1234：reply.to”或“ comment：1234：reply-to”中。</li>\n<li>允许的最大key大小为<strong>512 MB</strong>。</li>\n</ul>\n<p><br><br></p>\n<hr>\n<h3 id=\"Redis-Value\"><a href=\"#Redis-Value\" class=\"headerlink\" title=\"Redis-Value\"></a>Redis-Value</h3><p>Redis的值（Value）支持以下几种类型：</p>\n<ul>\n<li><strong>Binary-safe strings</strong>：二进制安全字符串。</li>\n<li><strong>Lists</strong>：根据插入顺序排序的字符串元素的集合。它们基本上是<em>链表</em>。</li>\n<li><strong>Sets</strong>：唯一，未排序的字符串元素的集合。</li>\n<li><strong>Sorted sets</strong>：类似于集合，但是每个字符串元素在存入时都将于一个浮点数值的分数相关联，元素总是按照它们的分数排序，因此与Sets不同，可以检索一系列元素</li>\n<li><strong>Hashes</strong>：键值组成的哈希映射，键值都是字符串。</li>\n<li><strong>Bit arrays</strong> (or simply bitmaps)：可以使用特殊命令像位数组一样处理字符串值：可以设置和清除单个位，计数所有设置为1的位，找到第一个设置或未设置的位，等等。</li>\n<li><strong>HyperLogLogs</strong>：这是一个概率数据结构，用于估计集合的基数。</li>\n<li><strong>Streams</strong>：提供抽象日志数据类型的类地图项的仅追加集合。</li>\n</ul>\n<p>redis值的内部实现结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>type类型</th>\n<th>encoding编码</th>\n<th>ptr指向的数据结构</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_INT</td>\n<td>整数值的实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_EMBSTR</td>\n<td>embstr编码的sds实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_RAW</td>\n<td>sds字符串实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩列表实现</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_LINKEDLIST</td>\n<td>链表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_INTSET</td>\n<td>整数集合实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_SKIPLIST</td>\n<td>跳跃表和字典实现</td>\n</tr>\n</tbody></table>\n<p><br><br></p>\n<hr>\n<h3 id=\"Redis值的常用数据类型\"><a href=\"#Redis值的常用数据类型\" class=\"headerlink\" title=\"Redis值的常用数据类型\"></a>Redis值的常用数据类型</h3><p><strong>字符串：String</strong></p>\n<p>Redis字符串类型是与Redis键关联的最简单的值类型。它也是Memcached中唯一的数据类型。</p>\n<p>值是二进制安全的字符串，意味着redis的string可以包含任何数据。比如jpg图片或者序列化的对象。值最大能存储<strong>512 MB</strong>的数据。</p>\n<p><strong>列表：List</strong></p>\n<p>redis是由双向链表（Linked List）的方式实现，而非数组形式。它能从链表的头尾进行操作。它是根据插入的顺序进行排序的有序列表。</p>\n<p>列表的常用案例：记住用户发布到社交网络上的最新更新。频繁查看的日志。</p>\n<p><strong>集合：Set</strong></p>\n<p>set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。</p>\n<p>可以理解为一堆值不重复的列表，类似数学领域中的集合概念，且Redis也提供了针对集合的求交集、并集、差集等操作。</p>\n<p><strong>有序集合：Sorted Set</strong></p>\n<p>Redis有序集合类似Redis集合，不同的是增加了一个功能，即集合是有序的。一个有序集合的每个成员带有分数，用于进行排序。</p>\n<p>Redis有序集合添加、删除和测试的时间复杂度均为O(1)(固定时间，无论里面包含的元素集合的数量)。列表的最大长度为2^32- 1元素(4294967295，超过40亿每个元素的集合)。</p>\n<p>Redis sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score,使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。</p>\n<p><strong>哈希表：Hash</strong></p>\n<p>对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。</p>\n<p>每个 hash 可以存储 2^32 -1 键值对（40多亿）。</p>\n<hr>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>导读：Redis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，其值不仅限于简单的字符串，还可以容纳更复杂的数据结构。</p>\n<p><br><br></p>\n<hr>\n<h1 id=\"Redis的常用键值对\"><a href=\"#Redis的常用键值对\" class=\"headerlink\" title=\"Redis的常用键值对\"></a>Redis的常用键值对</h1><h2 id=\"Redis的键值对\"><a href=\"#Redis的键值对\" class=\"headerlink\" title=\"Redis的键值对\"></a>Redis的键值对</h2><p>Redis不是简单的键值（Key-Value）存储，它实际上是一个支持不同类型值的数据结构服务器。在传统键值存储中，一般将字符串键与字符串值相关联，而在Redis中，该值不仅限于简单的字符串，还可以容纳更复杂的数据结构。</p>\n<h3 id=\"Redis-Key\"><a href=\"#Redis-Key\" class=\"headerlink\" title=\"Redis-Key\"></a>Redis-Key</h3><p>Redis的键（Key）是二进制安全的字符串，这意味着可以使用任何二进制序列作为key，从“ foo”之类的字符串到JPEG文件的内容，同时空字符串也是有效的key键。</p>\n<p>在Redis的底层中由SDS实现。</p>\n<p>设置键的注意点：</p>\n<ul>\n<li><strong>key使用的字节不宜过长</strong>：太长的key字节，在内存方面不仅是个负担，并且在数据集中查找key时可能需要进行一些代价高昂的密钥比较。</li>\n<li><strong>key也不宜设置太短</strong>：与“ user：1000：followers”对比，“ u1000flw”写为key毫无意义，前者往往更具可读性。且与键对象本身和值对象使用的空间相比，单单添加key消耗的空间更少。</li>\n<li><strong>key使用同一种设置类型</strong>：例如，“ object-type：id”是一个好主意，例如“ user：1000”。点或破折号通常用于多字字段，例如“ comment：1234：reply.to”或“ comment：1234：reply-to”中。</li>\n<li>允许的最大key大小为<strong>512 MB</strong>。</li>\n</ul>\n<p><br><br></p>\n<hr>\n<h3 id=\"Redis-Value\"><a href=\"#Redis-Value\" class=\"headerlink\" title=\"Redis-Value\"></a>Redis-Value</h3><p>Redis的值（Value）支持以下几种类型：</p>\n<ul>\n<li><strong>Binary-safe strings</strong>：二进制安全字符串。</li>\n<li><strong>Lists</strong>：根据插入顺序排序的字符串元素的集合。它们基本上是<em>链表</em>。</li>\n<li><strong>Sets</strong>：唯一，未排序的字符串元素的集合。</li>\n<li><strong>Sorted sets</strong>：类似于集合，但是每个字符串元素在存入时都将于一个浮点数值的分数相关联，元素总是按照它们的分数排序，因此与Sets不同，可以检索一系列元素</li>\n<li><strong>Hashes</strong>：键值组成的哈希映射，键值都是字符串。</li>\n<li><strong>Bit arrays</strong> (or simply bitmaps)：可以使用特殊命令像位数组一样处理字符串值：可以设置和清除单个位，计数所有设置为1的位，找到第一个设置或未设置的位，等等。</li>\n<li><strong>HyperLogLogs</strong>：这是一个概率数据结构，用于估计集合的基数。</li>\n<li><strong>Streams</strong>：提供抽象日志数据类型的类地图项的仅追加集合。</li>\n</ul>\n<p>redis值的内部实现结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>type类型</th>\n<th>encoding编码</th>\n<th>ptr指向的数据结构</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_INT</td>\n<td>整数值的实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_EMBSTR</td>\n<td>embstr编码的sds实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_STRING</td>\n<td>REDIS_ENCODING_RAW</td>\n<td>sds字符串实现的字符串对象</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩列表实现</td>\n</tr>\n<tr>\n<td>REDIS_LIST</td>\n<td>REDIS_ENCODING_LINKEDLIST</td>\n<td>链表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_HASH</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_INTSET</td>\n<td>整数集合实现</td>\n</tr>\n<tr>\n<td>REDIS_SET</td>\n<td>REDIS_ENCODING_HT</td>\n<td>字典实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_ZIPLIST</td>\n<td>压缩表实现</td>\n</tr>\n<tr>\n<td>REDIS_ZSET</td>\n<td>REDIS_ENCODING_SKIPLIST</td>\n<td>跳跃表和字典实现</td>\n</tr>\n</tbody></table>\n<p><br><br></p>\n<hr>\n<h3 id=\"Redis值的常用数据类型\"><a href=\"#Redis值的常用数据类型\" class=\"headerlink\" title=\"Redis值的常用数据类型\"></a>Redis值的常用数据类型</h3><p><strong>字符串：String</strong></p>\n<p>Redis字符串类型是与Redis键关联的最简单的值类型。它也是Memcached中唯一的数据类型。</p>\n<p>值是二进制安全的字符串，意味着redis的string可以包含任何数据。比如jpg图片或者序列化的对象。值最大能存储<strong>512 MB</strong>的数据。</p>\n<p><strong>列表：List</strong></p>\n<p>redis是由双向链表（Linked List）的方式实现，而非数组形式。它能从链表的头尾进行操作。它是根据插入的顺序进行排序的有序列表。</p>\n<p>列表的常用案例：记住用户发布到社交网络上的最新更新。频繁查看的日志。</p>\n<p><strong>集合：Set</strong></p>\n<p>set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。</p>\n<p>可以理解为一堆值不重复的列表，类似数学领域中的集合概念，且Redis也提供了针对集合的求交集、并集、差集等操作。</p>\n<p><strong>有序集合：Sorted Set</strong></p>\n<p>Redis有序集合类似Redis集合，不同的是增加了一个功能，即集合是有序的。一个有序集合的每个成员带有分数，用于进行排序。</p>\n<p>Redis有序集合添加、删除和测试的时间复杂度均为O(1)(固定时间，无论里面包含的元素集合的数量)。列表的最大长度为2^32- 1元素(4294967295，超过40亿每个元素的集合)。</p>\n<p>Redis sorted set的内部使用HashMap和跳跃表(SkipList)来保证数据的存储和有序，HashMap里放的是成员到score的映射，而跳跃表里存放的是所有的成员，排序依据是HashMap里存的score,使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。</p>\n<p><strong>哈希表：Hash</strong></p>\n<p>对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。</p>\n<p>每个 hash 可以存储 2^32 -1 键值对（40多亿）。</p>\n<hr>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n"},{"title":"java反射机制","author":"WangJwi","_content":"\n\n导读：反射通常由需要检查或修改java虚拟机中运行的应用程序的运行时行为的程序使用。反射是一种强大的技术，可以使应用程序执行原本不可能的操作。\n\n\n------\n\n# java反射机制\n## 反射原理：\njava在编译之后，会将Java代码生成为class源文件，JVM启动时，将会载入所有的源文件，并将**类型信息**存放到**方法区**中，将所有**对象实例**存放在**Java堆**中。\n\n- 对于获取或创建新的类型实例：反射是在运行时，通过读取方法区中的字节码，来动态的找到其反射的类或类的方法和属性等（实际上就是在运行时，根据全类型名在方法区找对应的类），以实现类型的检查或创建该类的实例对象。\n- 对于修改或获取存在的实例对象：一般来说，我们不通过反射构建的实例对象，通过编译器后都能预先的知道该实例对象有哪些属性和方法，从而可以直接获取或调用方法或属性。\n    而反射则不同，由于是运行时进行操作，它没法知道反射的这个实例对象有哪些属性和方法，因此需要先获取该对象的类型信息，从而通过该类型信息的属性或方法来修改实例对象。\n\n\n## 反射的用途：\n反射功能通常用于检查或修改java虚拟机运行中（runtime）的应用程序的行为。反射是一种强大的技术，可以运行原本不可能的操作。\n\n- 在运行中分析类的能力，可以通过完全限定类名创建类的对象实例。\n- 在运行中查看和操作对象，可以遍历类的成员变量。\n- 反射允许代码执行非反射代码中非法的操作，可以检索和访问类的私有成员变量，包括私有属性、方法等。\n\n注意：要有选择的使用反射功能，如果可以直接执行操作，那么最好不要使用反射。\n\n\n## 反射的缺点：\n\n- 额外的性能开销（**Performance Overhead**）：由于反射涉及动态类型的解析，它无法执行某些java虚拟机优化，因此反射操作的性能通常要比非反射操作慢。\n- 安全限制（**Security Restrictions**）：反射需要运行时操作权限，此操作可能在一些安全管理器下不被允许。\n- 内部泄露（**Exposure of Internals**）：由于反射允许代码执行非反射代码中非法的操作（例如访问私有字段和方法），因此使用反射可能会导致意外的副作用，这可能会使代码无法正常工作并可能破坏可移植性。反射性代码破坏了抽象，因此可能会随着平台的升级而改变行为。\n\n\n## 获取对象类的方式:\n\n1. **Object.getClass()**。从一个实例对象中获取它的类。这仅适用于继承自Object的引用类型（当然java的类默认继承于Object）。\n\n``` java\nMap<String, String> hashMap = new HashMap<>();\nClass<? extends Map> aClass = hashMap.getClass();\nString text = \"text\";\nClass<? extends String> aClass1 = text.getClass();\n```\n\n\n\n``` java\n// Object类\npublic final native Class<?> getClass();\n```\n\n\n\n2. **XXX.class**。直接从未实例化的类获取类。\n\n``` java\nClass<Integer> integerClass = int.class;\nClass<HashMap> hashMapClass = HashMap.class;\n```\n\n\n\n3. **Class.forName()**。通过完全限定类名获取类。即包名加类名（java.util.HashMap）。否则会报找不到类错误。\n\n``` java\nClass<HashMap> hashMapClass = Class.forName(\"java.util.HashMap\");\n```\n\n\n\n``` java\n// class类\npublic static Class<?> forName(String className)\n            throws ClassNotFoundException {\n    Class<?> caller = Reflection.getCallerClass();\n    return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n}\n```\n\n\n\n4. **Integer.TYPE**。基本类型的包装类通过TYPE获取类。都是java早期版本的产物，已过时。\n\n``` java\n// Integer\n@SuppressWarnings(\"unchecked\")\npublic static final Class<Integer>  TYPE = (Class<Integer>) Class.getPrimitiveClass(\"int\");\n\n\n// Double\n@SuppressWarnings(\"unchecked\")\npublic static final Class<Double>   TYPE = (Class<Double>) Class.getPrimitiveClass(\"double\");\n```\n\n\n\n5. 通过反射类ClassAPI获取类。注意，只有在已经直接或间接获得一个类的情况下，才可以访问这些API。\n\n``` java\ntry {\n  Class<?> className = Class.forName(\"java.lang.String\");\n  // 获取父类\n  Class<?> superclass = className.getSuperclass();\n  // 返回调用类的成员变量，包括所有公共的类、接口和枚举\n  Class<?>[] classes = className.getClasses();\n  // 返回调用类的依赖，包括所有类、接口和显式声明的枚举\n  Class<?>[] declaredClasses = className.getDeclaredClasses();\n} catch (ClassNotFoundException e) {\n  e.printStackTrace();\n}\n```\n\n\n\n## 获取类的成员变量：\n\n获取字段：\n\n| [Class](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) API | 是否是列表 | 是否获取父类属性 | 能否能获取私有字段 |\n| ------------------------------------------------------------ | ---------- | ---------------- | ------------------ |\n| [getDeclaredField()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-) | no         | no               | yes                |\n| [getField()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-) | no         | yes              | no                 |\n| [getDeclaredFields()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--) | yes        | no               | yes                |\n| [getFields()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--) | yes        | yes              | no                 |\n\n\n\n获取方法：\n\n| [Class](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) API | List of members? | Inherited members? | Private members? |\n| ------------------------------------------------------------ | ---------------- | ------------------ | ---------------- |\n| [getDeclaredMethod()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-) | no               | no                 | yes              |\n| [getMethod()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-) | no               | yes                | no               |\n| [getDeclaredMethods()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--) | yes              | no                 | yes              |\n| [getMethods()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--) | yes              | yes                | no               |\n\n\n\n获取构造器：\n\n| [Class](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) API | List of members? | Inherited members? | Private members? |\n| ------------------------------------------------------------ | ---------------- | ------------------ | ---------------- |\n| [getDeclaredConstructor()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-) | no               | N/A1               | yes              |\n| [getConstructor()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-) | no               | N/A1               | no               |\n| [getDeclaredConstructors()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--) | yes              | N/A1               | yes              |\n| [getConstructors()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--) | yes              | N/A1               | no               |\n\n\n\n## java.lang.reflect.Field\n\nField字段具有类型和值。Field提供访问属性对象类型信息的方法；以及获取和设置字段值的方法。\n\n\n\n**获取字段类型：**\n\n字段可以是原始类型或引用类型。\n\n有八种基本类型：boolean，byte，short，int，long，char，float，和double。\n\n引用类型是java.lang.Object类的直接或间接子类，包含接口，数组和枚举类型等 。\n\n\n\n**获取字段修饰符：**\n\n- 访问修饰符：public，protected，和private\n- 仅用于字段的控制运行时行为的修饰符：transient和volatile\n- 限制单实例的修饰符： static\n- 禁止值修改的修饰符： final\n- 注解\n\n\n\n``` java\nClass<?> className = Class.forName(\"java.util.HashMap\");\nField table = className.getDeclaredField(\"table\");\n// 获取属性的名字\nString name = table.getName();\n// 获取属性的类型\nClass<?> type = table.getType();\n// 获取修饰符\nint modifiers = table.getModifiers();\nSystem.out.println(Modifier.toString(modifiers));\n// 获取注解\nOverride annotation = table.getDeclaredAnnotation(Override.class);\nAnnotation[] declaredAnnotations = table.getDeclaredAnnotations();\n```\n\n\n\n**获取和设置字段值：**\n\n给定一个类的实例，可以使用反射来设置该类中字段的值。通常仅在特殊情况下无法以常规方式设置值时才执行此操作。因为这样的访问通常会违反该类的设计意图，所以应绝对谨慎地使用它。\n\n\n\n**注意**：通过反射设置字段的值会有一定的性能开销，因为必须进行各种操作，例如验证访问权限。从运行时的角度来看，效果是相同的，并且操作是原子的，就好像直接在类代码中更改了值一样。除此之外，反射会破坏java原本的设定，列如可以重新设置final属性的值等。\n\n\n\n**反射修改final修饰的属性值到JVM对String的优化：**\n\n反射功能强大，能修改private以及final修饰的变量。如下代码中，展示了JVM的优化以及反射的一些劣势。\n\n``` java\n@Data\npublic class FieldReflectDemo {\n  // 引用直接指向常量池中的常量值\n  private final String constantStr = \"FinalConstantStringField\";\n  // JVM优化了getter方法，直接将对constantStr引用全部替换成了常量\n//  public String getConstantStr() {return \"FinalConstantStringField\";}\n\n\n  // 在堆中新建了一个对象\n  private final String newStr = new String(\"FinalNewStringField\");\n  \n  public FieldReflectDemo(){}\n    \n    public static void main(String[] args) {\n    FieldReflectDemo fieldReflectDemo = new FieldReflectDemo();\n    try {\n      Class<?> className = fieldReflectDemo.getClass();\n      Field constantStr = className.getDeclaredField(\"constantStr\");\n      Field newStr = className.getDeclaredField(\"newStr\");\n      // 获取实例对象的字段值\n      System.out.println(\"constantStr原：\" + constantStr.get(fieldReflectDemo));\n      System.out.println(\"newStr原：\" + newStr.get(fieldReflectDemo));\n      constantStr.setAccessible(true);\n      newStr.setAccessible(true);\n      constantStr.set(fieldReflectDemo, \"New Filed Name\");\n      newStr.set(fieldReflectDemo, \"New Filed Name\");\n      System.out.println(\"constantStr反射修改：\" + constantStr.get(fieldReflectDemo));\n      System.out.println(\"newStr反射修改：\" + newStr.get(fieldReflectDemo));\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"constantStr实例对象值：\" + fieldReflectDemo.getConstantStr());\n    System.out.println(\"newStr实例对象值：\" + fieldReflectDemo.getNewStr());\n  }\n  \n  /**\n   * 输出\n   * constantStr原：FinalConstantStringField\n   * newStr原：FinalNewStringField\n   * constantStr反射修改：New Filed Name\n   * newStr反射修改：New Filed Name\n   * constantStr实例对象值：FinalConstantStringField\n   * newStr实例对象值：New Filed Name\n   */\n}\n```\n\n因为JVM在编译时期, 就把final类型的**直接赋值的String**进行了优化, 在编译时期就会把String处理成常量。反射成功将其值修改成功了，但是在它的get方法中，返回的不是当前变量，而是返回JVM优化好的一个常量值。\n\n\n\n## java.lang.reflect.Method\n\nMethod方法具有参数和返回值，并且方法可能抛出异常。Method提供获取参数信息、返回值的方法；它也可以调用（invoke）给定对象的方法。\n\n\n\n**获取方法类型的信息：**\n\n方法声明包含了方法名、修饰符、参数、返回类型以及抛出的多个异常。\n\n``` java\npublic class MethodReflectDemo {\n\n\npublic MethodReflectDemo() {\n  \nprivate void getNothing(String name) {\n  \npublic int getNumByName(String name) throws NullPointerException {\n  if (StringUtils.isEmpty(name))\n    throw new NullPointerException(\"名字为空\");\n  return name.length();\n}\n\n\n  public static void main(String[] args) {\n    MethodReflectDemo methodReflectDemo = new MethodReflectDemo();\n    try {\n      Class<? extends MethodReflectDemo> demoClass = methodReflectDemo.getClass();\n      Method method = demoClass.getDeclaredMethod(\"getNumByName\", String.class);\n      String name = method.getName();\n      System.out.println(\"方法名：\" + name);\n      // 修饰符\n      int modifiers = method.getModifiers();\n      System.out.println(\"所有修饰符：\" + Modifier.toString(modifiers));\n      // 参数\n      Parameter[] parameters = method.getParameters();\n      // 返回类型\n      Class<?> returnType = method.getReturnType();\n      System.out.println(\"返回类型：\" + returnType.getTypeName());\n      // 异常\n      Class<?>[] exceptionTypes = method.getExceptionTypes();\n      System.out.println(\"\");\n      // 实例对象调用方法\n      Object invoke = method.invoke(methodReflectDemo, \"名称\");\n      System.out.println(invoke);\n    } catch (NoSuchMethodException e) {\n      e.printStackTrace();\n    }\n  }\n```\n\n\n\n## java.lang.reflect.Constructor\n\nConstructor与Method相似，但有几点不同：\n- 构造函数没有返回值\n- 构造函数无法被实例对象执行，它的调用只能为给定的类创建对象的新实例。\n\n\n``` java\n\npublic class ConstructorReflectDemo {\n\n  public ConstructorReflectDemo() {}\n\n  private void getNothing(String name) { }\n\n  public int getNumByName(String name) throws NullPointerException {\n    if (StringUtils.isEmpty(name))\n      throw new NullPointerException(\"名字为空\");\n    return name.length();\n  }\n\n  public static void main(String[] args) {\n    ConstructorReflectDemo methodReflectDemo = new ConstructorReflectDemo();\n    try {\n      Class<? extends ConstructorReflectDemo> demoClass = methodReflectDemo.getClass();\n      Constructor<? extends ConstructorReflectDemo> constructor = demoClass.getConstructor();\n      String name = constructor.getName();\n      System.out.println(\"构造方法名：\" + name);\n      // 修饰符\n      int modifiers = constructor.getModifiers();\n      System.out.println(\"所有修饰符：\" + Modifier.toString(modifiers));\n      // 参数\n      Parameter[] parameters = constructor.getParameters();\n      // 异常\n      Class<?>[] exceptionTypes = constructor.getExceptionTypes();\n      System.out.println(\"\");\n      // 构造方法无法被调用，只可以创建新实例\n      ConstructorReflectDemo constructorReflectDemo = constructor.newInstance();\n    } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {\n      e.printStackTrace();\n    }\n  }\n\n}\n```\n\n\n\n参考：\n\n[The Reflection API](https://docs.oracle.com/javase/tutorial/reflect/index.html)\n","source":"_posts/2021-05-21-JAVA-reflection.md","raw":"---\ntitle:  \"java反射机制\"\nauthor: WangJwi\ncategories:\n- Java\ntags:\n- Java\n- 反射\n- Reflection\n---\n\n\n导读：反射通常由需要检查或修改java虚拟机中运行的应用程序的运行时行为的程序使用。反射是一种强大的技术，可以使应用程序执行原本不可能的操作。\n\n\n------\n\n# java反射机制\n## 反射原理：\njava在编译之后，会将Java代码生成为class源文件，JVM启动时，将会载入所有的源文件，并将**类型信息**存放到**方法区**中，将所有**对象实例**存放在**Java堆**中。\n\n- 对于获取或创建新的类型实例：反射是在运行时，通过读取方法区中的字节码，来动态的找到其反射的类或类的方法和属性等（实际上就是在运行时，根据全类型名在方法区找对应的类），以实现类型的检查或创建该类的实例对象。\n- 对于修改或获取存在的实例对象：一般来说，我们不通过反射构建的实例对象，通过编译器后都能预先的知道该实例对象有哪些属性和方法，从而可以直接获取或调用方法或属性。\n    而反射则不同，由于是运行时进行操作，它没法知道反射的这个实例对象有哪些属性和方法，因此需要先获取该对象的类型信息，从而通过该类型信息的属性或方法来修改实例对象。\n\n\n## 反射的用途：\n反射功能通常用于检查或修改java虚拟机运行中（runtime）的应用程序的行为。反射是一种强大的技术，可以运行原本不可能的操作。\n\n- 在运行中分析类的能力，可以通过完全限定类名创建类的对象实例。\n- 在运行中查看和操作对象，可以遍历类的成员变量。\n- 反射允许代码执行非反射代码中非法的操作，可以检索和访问类的私有成员变量，包括私有属性、方法等。\n\n注意：要有选择的使用反射功能，如果可以直接执行操作，那么最好不要使用反射。\n\n\n## 反射的缺点：\n\n- 额外的性能开销（**Performance Overhead**）：由于反射涉及动态类型的解析，它无法执行某些java虚拟机优化，因此反射操作的性能通常要比非反射操作慢。\n- 安全限制（**Security Restrictions**）：反射需要运行时操作权限，此操作可能在一些安全管理器下不被允许。\n- 内部泄露（**Exposure of Internals**）：由于反射允许代码执行非反射代码中非法的操作（例如访问私有字段和方法），因此使用反射可能会导致意外的副作用，这可能会使代码无法正常工作并可能破坏可移植性。反射性代码破坏了抽象，因此可能会随着平台的升级而改变行为。\n\n\n## 获取对象类的方式:\n\n1. **Object.getClass()**。从一个实例对象中获取它的类。这仅适用于继承自Object的引用类型（当然java的类默认继承于Object）。\n\n``` java\nMap<String, String> hashMap = new HashMap<>();\nClass<? extends Map> aClass = hashMap.getClass();\nString text = \"text\";\nClass<? extends String> aClass1 = text.getClass();\n```\n\n\n\n``` java\n// Object类\npublic final native Class<?> getClass();\n```\n\n\n\n2. **XXX.class**。直接从未实例化的类获取类。\n\n``` java\nClass<Integer> integerClass = int.class;\nClass<HashMap> hashMapClass = HashMap.class;\n```\n\n\n\n3. **Class.forName()**。通过完全限定类名获取类。即包名加类名（java.util.HashMap）。否则会报找不到类错误。\n\n``` java\nClass<HashMap> hashMapClass = Class.forName(\"java.util.HashMap\");\n```\n\n\n\n``` java\n// class类\npublic static Class<?> forName(String className)\n            throws ClassNotFoundException {\n    Class<?> caller = Reflection.getCallerClass();\n    return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n}\n```\n\n\n\n4. **Integer.TYPE**。基本类型的包装类通过TYPE获取类。都是java早期版本的产物，已过时。\n\n``` java\n// Integer\n@SuppressWarnings(\"unchecked\")\npublic static final Class<Integer>  TYPE = (Class<Integer>) Class.getPrimitiveClass(\"int\");\n\n\n// Double\n@SuppressWarnings(\"unchecked\")\npublic static final Class<Double>   TYPE = (Class<Double>) Class.getPrimitiveClass(\"double\");\n```\n\n\n\n5. 通过反射类ClassAPI获取类。注意，只有在已经直接或间接获得一个类的情况下，才可以访问这些API。\n\n``` java\ntry {\n  Class<?> className = Class.forName(\"java.lang.String\");\n  // 获取父类\n  Class<?> superclass = className.getSuperclass();\n  // 返回调用类的成员变量，包括所有公共的类、接口和枚举\n  Class<?>[] classes = className.getClasses();\n  // 返回调用类的依赖，包括所有类、接口和显式声明的枚举\n  Class<?>[] declaredClasses = className.getDeclaredClasses();\n} catch (ClassNotFoundException e) {\n  e.printStackTrace();\n}\n```\n\n\n\n## 获取类的成员变量：\n\n获取字段：\n\n| [Class](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) API | 是否是列表 | 是否获取父类属性 | 能否能获取私有字段 |\n| ------------------------------------------------------------ | ---------- | ---------------- | ------------------ |\n| [getDeclaredField()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-) | no         | no               | yes                |\n| [getField()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-) | no         | yes              | no                 |\n| [getDeclaredFields()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--) | yes        | no               | yes                |\n| [getFields()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--) | yes        | yes              | no                 |\n\n\n\n获取方法：\n\n| [Class](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) API | List of members? | Inherited members? | Private members? |\n| ------------------------------------------------------------ | ---------------- | ------------------ | ---------------- |\n| [getDeclaredMethod()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-) | no               | no                 | yes              |\n| [getMethod()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-) | no               | yes                | no               |\n| [getDeclaredMethods()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--) | yes              | no                 | yes              |\n| [getMethods()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--) | yes              | yes                | no               |\n\n\n\n获取构造器：\n\n| [Class](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html) API | List of members? | Inherited members? | Private members? |\n| ------------------------------------------------------------ | ---------------- | ------------------ | ---------------- |\n| [getDeclaredConstructor()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-) | no               | N/A1               | yes              |\n| [getConstructor()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-) | no               | N/A1               | no               |\n| [getDeclaredConstructors()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--) | yes              | N/A1               | yes              |\n| [getConstructors()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--) | yes              | N/A1               | no               |\n\n\n\n## java.lang.reflect.Field\n\nField字段具有类型和值。Field提供访问属性对象类型信息的方法；以及获取和设置字段值的方法。\n\n\n\n**获取字段类型：**\n\n字段可以是原始类型或引用类型。\n\n有八种基本类型：boolean，byte，short，int，long，char，float，和double。\n\n引用类型是java.lang.Object类的直接或间接子类，包含接口，数组和枚举类型等 。\n\n\n\n**获取字段修饰符：**\n\n- 访问修饰符：public，protected，和private\n- 仅用于字段的控制运行时行为的修饰符：transient和volatile\n- 限制单实例的修饰符： static\n- 禁止值修改的修饰符： final\n- 注解\n\n\n\n``` java\nClass<?> className = Class.forName(\"java.util.HashMap\");\nField table = className.getDeclaredField(\"table\");\n// 获取属性的名字\nString name = table.getName();\n// 获取属性的类型\nClass<?> type = table.getType();\n// 获取修饰符\nint modifiers = table.getModifiers();\nSystem.out.println(Modifier.toString(modifiers));\n// 获取注解\nOverride annotation = table.getDeclaredAnnotation(Override.class);\nAnnotation[] declaredAnnotations = table.getDeclaredAnnotations();\n```\n\n\n\n**获取和设置字段值：**\n\n给定一个类的实例，可以使用反射来设置该类中字段的值。通常仅在特殊情况下无法以常规方式设置值时才执行此操作。因为这样的访问通常会违反该类的设计意图，所以应绝对谨慎地使用它。\n\n\n\n**注意**：通过反射设置字段的值会有一定的性能开销，因为必须进行各种操作，例如验证访问权限。从运行时的角度来看，效果是相同的，并且操作是原子的，就好像直接在类代码中更改了值一样。除此之外，反射会破坏java原本的设定，列如可以重新设置final属性的值等。\n\n\n\n**反射修改final修饰的属性值到JVM对String的优化：**\n\n反射功能强大，能修改private以及final修饰的变量。如下代码中，展示了JVM的优化以及反射的一些劣势。\n\n``` java\n@Data\npublic class FieldReflectDemo {\n  // 引用直接指向常量池中的常量值\n  private final String constantStr = \"FinalConstantStringField\";\n  // JVM优化了getter方法，直接将对constantStr引用全部替换成了常量\n//  public String getConstantStr() {return \"FinalConstantStringField\";}\n\n\n  // 在堆中新建了一个对象\n  private final String newStr = new String(\"FinalNewStringField\");\n  \n  public FieldReflectDemo(){}\n    \n    public static void main(String[] args) {\n    FieldReflectDemo fieldReflectDemo = new FieldReflectDemo();\n    try {\n      Class<?> className = fieldReflectDemo.getClass();\n      Field constantStr = className.getDeclaredField(\"constantStr\");\n      Field newStr = className.getDeclaredField(\"newStr\");\n      // 获取实例对象的字段值\n      System.out.println(\"constantStr原：\" + constantStr.get(fieldReflectDemo));\n      System.out.println(\"newStr原：\" + newStr.get(fieldReflectDemo));\n      constantStr.setAccessible(true);\n      newStr.setAccessible(true);\n      constantStr.set(fieldReflectDemo, \"New Filed Name\");\n      newStr.set(fieldReflectDemo, \"New Filed Name\");\n      System.out.println(\"constantStr反射修改：\" + constantStr.get(fieldReflectDemo));\n      System.out.println(\"newStr反射修改：\" + newStr.get(fieldReflectDemo));\n    } catch (NoSuchFieldException | IllegalAccessException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"constantStr实例对象值：\" + fieldReflectDemo.getConstantStr());\n    System.out.println(\"newStr实例对象值：\" + fieldReflectDemo.getNewStr());\n  }\n  \n  /**\n   * 输出\n   * constantStr原：FinalConstantStringField\n   * newStr原：FinalNewStringField\n   * constantStr反射修改：New Filed Name\n   * newStr反射修改：New Filed Name\n   * constantStr实例对象值：FinalConstantStringField\n   * newStr实例对象值：New Filed Name\n   */\n}\n```\n\n因为JVM在编译时期, 就把final类型的**直接赋值的String**进行了优化, 在编译时期就会把String处理成常量。反射成功将其值修改成功了，但是在它的get方法中，返回的不是当前变量，而是返回JVM优化好的一个常量值。\n\n\n\n## java.lang.reflect.Method\n\nMethod方法具有参数和返回值，并且方法可能抛出异常。Method提供获取参数信息、返回值的方法；它也可以调用（invoke）给定对象的方法。\n\n\n\n**获取方法类型的信息：**\n\n方法声明包含了方法名、修饰符、参数、返回类型以及抛出的多个异常。\n\n``` java\npublic class MethodReflectDemo {\n\n\npublic MethodReflectDemo() {\n  \nprivate void getNothing(String name) {\n  \npublic int getNumByName(String name) throws NullPointerException {\n  if (StringUtils.isEmpty(name))\n    throw new NullPointerException(\"名字为空\");\n  return name.length();\n}\n\n\n  public static void main(String[] args) {\n    MethodReflectDemo methodReflectDemo = new MethodReflectDemo();\n    try {\n      Class<? extends MethodReflectDemo> demoClass = methodReflectDemo.getClass();\n      Method method = demoClass.getDeclaredMethod(\"getNumByName\", String.class);\n      String name = method.getName();\n      System.out.println(\"方法名：\" + name);\n      // 修饰符\n      int modifiers = method.getModifiers();\n      System.out.println(\"所有修饰符：\" + Modifier.toString(modifiers));\n      // 参数\n      Parameter[] parameters = method.getParameters();\n      // 返回类型\n      Class<?> returnType = method.getReturnType();\n      System.out.println(\"返回类型：\" + returnType.getTypeName());\n      // 异常\n      Class<?>[] exceptionTypes = method.getExceptionTypes();\n      System.out.println(\"\");\n      // 实例对象调用方法\n      Object invoke = method.invoke(methodReflectDemo, \"名称\");\n      System.out.println(invoke);\n    } catch (NoSuchMethodException e) {\n      e.printStackTrace();\n    }\n  }\n```\n\n\n\n## java.lang.reflect.Constructor\n\nConstructor与Method相似，但有几点不同：\n- 构造函数没有返回值\n- 构造函数无法被实例对象执行，它的调用只能为给定的类创建对象的新实例。\n\n\n``` java\n\npublic class ConstructorReflectDemo {\n\n  public ConstructorReflectDemo() {}\n\n  private void getNothing(String name) { }\n\n  public int getNumByName(String name) throws NullPointerException {\n    if (StringUtils.isEmpty(name))\n      throw new NullPointerException(\"名字为空\");\n    return name.length();\n  }\n\n  public static void main(String[] args) {\n    ConstructorReflectDemo methodReflectDemo = new ConstructorReflectDemo();\n    try {\n      Class<? extends ConstructorReflectDemo> demoClass = methodReflectDemo.getClass();\n      Constructor<? extends ConstructorReflectDemo> constructor = demoClass.getConstructor();\n      String name = constructor.getName();\n      System.out.println(\"构造方法名：\" + name);\n      // 修饰符\n      int modifiers = constructor.getModifiers();\n      System.out.println(\"所有修饰符：\" + Modifier.toString(modifiers));\n      // 参数\n      Parameter[] parameters = constructor.getParameters();\n      // 异常\n      Class<?>[] exceptionTypes = constructor.getExceptionTypes();\n      System.out.println(\"\");\n      // 构造方法无法被调用，只可以创建新实例\n      ConstructorReflectDemo constructorReflectDemo = constructor.newInstance();\n    } catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {\n      e.printStackTrace();\n    }\n  }\n\n}\n```\n\n\n\n参考：\n\n[The Reflection API](https://docs.oracle.com/javase/tutorial/reflect/index.html)\n","slug":"2021-05-21-JAVA-reflection","published":1,"date":"2021-12-22T07:32:13.033Z","updated":"2021-12-22T07:05:39.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxh8313l00045cv1cwwn5ii0","content":"<p>导读：反射通常由需要检查或修改java虚拟机中运行的应用程序的运行时行为的程序使用。反射是一种强大的技术，可以使应用程序执行原本不可能的操作。</p>\n<hr>\n<h1 id=\"java反射机制\"><a href=\"#java反射机制\" class=\"headerlink\" title=\"java反射机制\"></a>java反射机制</h1><h2 id=\"反射原理：\"><a href=\"#反射原理：\" class=\"headerlink\" title=\"反射原理：\"></a>反射原理：</h2><p>java在编译之后，会将Java代码生成为class源文件，JVM启动时，将会载入所有的源文件，并将<strong>类型信息</strong>存放到<strong>方法区</strong>中，将所有<strong>对象实例</strong>存放在<strong>Java堆</strong>中。</p>\n<ul>\n<li>对于获取或创建新的类型实例：反射是在运行时，通过读取方法区中的字节码，来动态的找到其反射的类或类的方法和属性等（实际上就是在运行时，根据全类型名在方法区找对应的类），以实现类型的检查或创建该类的实例对象。</li>\n<li>对于修改或获取存在的实例对象：一般来说，我们不通过反射构建的实例对象，通过编译器后都能预先的知道该实例对象有哪些属性和方法，从而可以直接获取或调用方法或属性。<br>  而反射则不同，由于是运行时进行操作，它没法知道反射的这个实例对象有哪些属性和方法，因此需要先获取该对象的类型信息，从而通过该类型信息的属性或方法来修改实例对象。</li>\n</ul>\n<h2 id=\"反射的用途：\"><a href=\"#反射的用途：\" class=\"headerlink\" title=\"反射的用途：\"></a>反射的用途：</h2><p>反射功能通常用于检查或修改java虚拟机运行中（runtime）的应用程序的行为。反射是一种强大的技术，可以运行原本不可能的操作。</p>\n<ul>\n<li>在运行中分析类的能力，可以通过完全限定类名创建类的对象实例。</li>\n<li>在运行中查看和操作对象，可以遍历类的成员变量。</li>\n<li>反射允许代码执行非反射代码中非法的操作，可以检索和访问类的私有成员变量，包括私有属性、方法等。</li>\n</ul>\n<p>注意：要有选择的使用反射功能，如果可以直接执行操作，那么最好不要使用反射。</p>\n<h2 id=\"反射的缺点：\"><a href=\"#反射的缺点：\" class=\"headerlink\" title=\"反射的缺点：\"></a>反射的缺点：</h2><ul>\n<li>额外的性能开销（<strong>Performance Overhead</strong>）：由于反射涉及动态类型的解析，它无法执行某些java虚拟机优化，因此反射操作的性能通常要比非反射操作慢。</li>\n<li>安全限制（<strong>Security Restrictions</strong>）：反射需要运行时操作权限，此操作可能在一些安全管理器下不被允许。</li>\n<li>内部泄露（<strong>Exposure of Internals</strong>）：由于反射允许代码执行非反射代码中非法的操作（例如访问私有字段和方法），因此使用反射可能会导致意外的副作用，这可能会使代码无法正常工作并可能破坏可移植性。反射性代码破坏了抽象，因此可能会随着平台的升级而改变行为。</li>\n</ul>\n<h2 id=\"获取对象类的方式\"><a href=\"#获取对象类的方式\" class=\"headerlink\" title=\"获取对象类的方式:\"></a>获取对象类的方式:</h2><ol>\n<li>**Object.getClass()**。从一个实例对象中获取它的类。这仅适用于继承自Object的引用类型（当然java的类默认继承于Object）。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Class&lt;? extends Map&gt; aClass = hashMap.getClass();</span><br><span class=\"line\">String text = <span class=\"string\">&quot;text&quot;</span>;</span><br><span class=\"line\">Class&lt;? extends String&gt; aClass1 = text.getClass();</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li><strong>XXX.class</strong>。直接从未实例化的类获取类。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Integer&gt; integerClass = <span class=\"keyword\">int</span>.class;</span><br><span class=\"line\">Class&lt;HashMap&gt; hashMapClass = HashMap.class;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>**Class.forName()**。通过完全限定类名获取类。即包名加类名（java.util.HashMap）。否则会报找不到类错误。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;HashMap&gt; hashMapClass = Class.forName(<span class=\"string\">&quot;java.util.HashMap&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; forName(String className)</span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forName0(className, <span class=\"keyword\">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li><strong>Integer.TYPE</strong>。基本类型的包装类通过TYPE获取类。都是java早期版本的产物，已过时。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Integer</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class=\"string\">&quot;int&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Double</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Class&lt;Double&gt;   TYPE = (Class&lt;Double&gt;) Class.getPrimitiveClass(<span class=\"string\">&quot;double&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"5\">\n<li>通过反射类ClassAPI获取类。注意，只有在已经直接或间接获得一个类的情况下，才可以访问这些API。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  Class&lt;?&gt; className = Class.forName(<span class=\"string\">&quot;java.lang.String&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取父类</span></span><br><span class=\"line\">  Class&lt;?&gt; superclass = className.getSuperclass();</span><br><span class=\"line\">  <span class=\"comment\">// 返回调用类的成员变量，包括所有公共的类、接口和枚举</span></span><br><span class=\"line\">  Class&lt;?&gt;[] classes = className.getClasses();</span><br><span class=\"line\">  <span class=\"comment\">// 返回调用类的依赖，包括所有类、接口和显式声明的枚举</span></span><br><span class=\"line\">  Class&lt;?&gt;[] declaredClasses = className.getDeclaredClasses();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">  e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"获取类的成员变量：\"><a href=\"#获取类的成员变量：\" class=\"headerlink\" title=\"获取类的成员变量：\"></a>获取类的成员变量：</h2><p>获取字段：</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a> API</th>\n<th>是否是列表</th>\n<th>是否获取父类属性</th>\n<th>能否能获取私有字段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-\">getDeclaredField()</a></td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-\">getField()</a></td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--\">getDeclaredFields()</a></td>\n<td>yes</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--\">getFields()</a></td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<p>获取方法：</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a> API</th>\n<th>List of members?</th>\n<th>Inherited members?</th>\n<th>Private members?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-\">getDeclaredMethod()</a></td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-\">getMethod()</a></td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--\">getDeclaredMethods()</a></td>\n<td>yes</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--\">getMethods()</a></td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<p>获取构造器：</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a> API</th>\n<th>List of members?</th>\n<th>Inherited members?</th>\n<th>Private members?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-\">getDeclaredConstructor()</a></td>\n<td>no</td>\n<td>N/A1</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-\">getConstructor()</a></td>\n<td>no</td>\n<td>N/A1</td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--\">getDeclaredConstructors()</a></td>\n<td>yes</td>\n<td>N/A1</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--\">getConstructors()</a></td>\n<td>yes</td>\n<td>N/A1</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<h2 id=\"java-lang-reflect-Field\"><a href=\"#java-lang-reflect-Field\" class=\"headerlink\" title=\"java.lang.reflect.Field\"></a>java.lang.reflect.Field</h2><p>Field字段具有类型和值。Field提供访问属性对象类型信息的方法；以及获取和设置字段值的方法。</p>\n<p><strong>获取字段类型：</strong></p>\n<p>字段可以是原始类型或引用类型。</p>\n<p>有八种基本类型：boolean，byte，short，int，long，char，float，和double。</p>\n<p>引用类型是java.lang.Object类的直接或间接子类，包含接口，数组和枚举类型等 。</p>\n<p><strong>获取字段修饰符：</strong></p>\n<ul>\n<li>访问修饰符：public，protected，和private</li>\n<li>仅用于字段的控制运行时行为的修饰符：transient和volatile</li>\n<li>限制单实例的修饰符： static</li>\n<li>禁止值修改的修饰符： final</li>\n<li>注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; className = Class.forName(<span class=\"string\">&quot;java.util.HashMap&quot;</span>);</span><br><span class=\"line\">Field table = className.getDeclaredField(<span class=\"string\">&quot;table&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取属性的名字</span></span><br><span class=\"line\">String name = table.getName();</span><br><span class=\"line\"><span class=\"comment\">// 获取属性的类型</span></span><br><span class=\"line\">Class&lt;?&gt; type = table.getType();</span><br><span class=\"line\"><span class=\"comment\">// 获取修饰符</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> modifiers = table.getModifiers();</span><br><span class=\"line\">System.out.println(Modifier.toString(modifiers));</span><br><span class=\"line\"><span class=\"comment\">// 获取注解</span></span><br><span class=\"line\">Override annotation = table.getDeclaredAnnotation(Override.class);</span><br><span class=\"line\">Annotation[] declaredAnnotations = table.getDeclaredAnnotations();</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>获取和设置字段值：</strong></p>\n<p>给定一个类的实例，可以使用反射来设置该类中字段的值。通常仅在特殊情况下无法以常规方式设置值时才执行此操作。因为这样的访问通常会违反该类的设计意图，所以应绝对谨慎地使用它。</p>\n<p><strong>注意</strong>：通过反射设置字段的值会有一定的性能开销，因为必须进行各种操作，例如验证访问权限。从运行时的角度来看，效果是相同的，并且操作是原子的，就好像直接在类代码中更改了值一样。除此之外，反射会破坏java原本的设定，列如可以重新设置final属性的值等。</p>\n<p><strong>反射修改final修饰的属性值到JVM对String的优化：</strong></p>\n<p>反射功能强大，能修改private以及final修饰的变量。如下代码中，展示了JVM的优化以及反射的一些劣势。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldReflectDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 引用直接指向常量池中的常量值</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String constantStr = <span class=\"string\">&quot;FinalConstantStringField&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// JVM优化了getter方法，直接将对constantStr引用全部替换成了常量</span></span><br><span class=\"line\"><span class=\"comment\">//  public String getConstantStr() &#123;return &quot;FinalConstantStringField&quot;;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在堆中新建了一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String newStr = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;FinalNewStringField&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FieldReflectDemo</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    FieldReflectDemo fieldReflectDemo = <span class=\"keyword\">new</span> FieldReflectDemo();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class&lt;?&gt; className = fieldReflectDemo.getClass();</span><br><span class=\"line\">      Field constantStr = className.getDeclaredField(<span class=\"string\">&quot;constantStr&quot;</span>);</span><br><span class=\"line\">      Field newStr = className.getDeclaredField(<span class=\"string\">&quot;newStr&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 获取实例对象的字段值</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;constantStr原：&quot;</span> + constantStr.get(fieldReflectDemo));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;newStr原：&quot;</span> + newStr.get(fieldReflectDemo));</span><br><span class=\"line\">      constantStr.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      newStr.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      constantStr.set(fieldReflectDemo, <span class=\"string\">&quot;New Filed Name&quot;</span>);</span><br><span class=\"line\">      newStr.set(fieldReflectDemo, <span class=\"string\">&quot;New Filed Name&quot;</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;constantStr反射修改：&quot;</span> + constantStr.get(fieldReflectDemo));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;newStr反射修改：&quot;</span> + newStr.get(fieldReflectDemo));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;constantStr实例对象值：&quot;</span> + fieldReflectDemo.getConstantStr());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;newStr实例对象值：&quot;</span> + fieldReflectDemo.getNewStr());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 输出</span></span><br><span class=\"line\"><span class=\"comment\">   * constantStr原：FinalConstantStringField</span></span><br><span class=\"line\"><span class=\"comment\">   * newStr原：FinalNewStringField</span></span><br><span class=\"line\"><span class=\"comment\">   * constantStr反射修改：New Filed Name</span></span><br><span class=\"line\"><span class=\"comment\">   * newStr反射修改：New Filed Name</span></span><br><span class=\"line\"><span class=\"comment\">   * constantStr实例对象值：FinalConstantStringField</span></span><br><span class=\"line\"><span class=\"comment\">   * newStr实例对象值：New Filed Name</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为JVM在编译时期, 就把final类型的<strong>直接赋值的String</strong>进行了优化, 在编译时期就会把String处理成常量。反射成功将其值修改成功了，但是在它的get方法中，返回的不是当前变量，而是返回JVM优化好的一个常量值。</p>\n<h2 id=\"java-lang-reflect-Method\"><a href=\"#java-lang-reflect-Method\" class=\"headerlink\" title=\"java.lang.reflect.Method\"></a>java.lang.reflect.Method</h2><p>Method方法具有参数和返回值，并且方法可能抛出异常。Method提供获取参数信息、返回值的方法；它也可以调用（invoke）给定对象的方法。</p>\n<p><strong>获取方法类型的信息：</strong></p>\n<p>方法声明包含了方法名、修饰符、参数、返回类型以及抛出的多个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodReflectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MethodReflectDemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getNothing</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumByName</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NullPointerException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (StringUtils.isEmpty(name))</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;名字为空&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name.length();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    MethodReflectDemo methodReflectDemo = <span class=\"keyword\">new</span> MethodReflectDemo();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class&lt;? extends MethodReflectDemo&gt; demoClass = methodReflectDemo.getClass();</span><br><span class=\"line\">      Method method = demoClass.getDeclaredMethod(<span class=\"string\">&quot;getNumByName&quot;</span>, String.class);</span><br><span class=\"line\">      String name = method.getName();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;方法名：&quot;</span> + name);</span><br><span class=\"line\">      <span class=\"comment\">// 修饰符</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> modifiers = method.getModifiers();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;所有修饰符：&quot;</span> + Modifier.toString(modifiers));</span><br><span class=\"line\">      <span class=\"comment\">// 参数</span></span><br><span class=\"line\">      Parameter[] parameters = method.getParameters();</span><br><span class=\"line\">      <span class=\"comment\">// 返回类型</span></span><br><span class=\"line\">      Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;返回类型：&quot;</span> + returnType.getTypeName());</span><br><span class=\"line\">      <span class=\"comment\">// 异常</span></span><br><span class=\"line\">      Class&lt;?&gt;[] exceptionTypes = method.getExceptionTypes();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 实例对象调用方法</span></span><br><span class=\"line\">      Object invoke = method.invoke(methodReflectDemo, <span class=\"string\">&quot;名称&quot;</span>);</span><br><span class=\"line\">      System.out.println(invoke);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"java-lang-reflect-Constructor\"><a href=\"#java-lang-reflect-Constructor\" class=\"headerlink\" title=\"java.lang.reflect.Constructor\"></a>java.lang.reflect.Constructor</h2><p>Constructor与Method相似，但有几点不同：</p>\n<ul>\n<li>构造函数没有返回值</li>\n<li>构造函数无法被实例对象执行，它的调用只能为给定的类创建对象的新实例。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstructorReflectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConstructorReflectDemo</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getNothing</span><span class=\"params\">(String name)</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumByName</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NullPointerException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isEmpty(name))</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;名字为空&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name.length();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ConstructorReflectDemo methodReflectDemo = <span class=\"keyword\">new</span> ConstructorReflectDemo();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class&lt;? extends ConstructorReflectDemo&gt; demoClass = methodReflectDemo.getClass();</span><br><span class=\"line\">      Constructor&lt;? extends ConstructorReflectDemo&gt; constructor = demoClass.getConstructor();</span><br><span class=\"line\">      String name = constructor.getName();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;构造方法名：&quot;</span> + name);</span><br><span class=\"line\">      <span class=\"comment\">// 修饰符</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> modifiers = constructor.getModifiers();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;所有修饰符：&quot;</span> + Modifier.toString(modifiers));</span><br><span class=\"line\">      <span class=\"comment\">// 参数</span></span><br><span class=\"line\">      Parameter[] parameters = constructor.getParameters();</span><br><span class=\"line\">      <span class=\"comment\">// 异常</span></span><br><span class=\"line\">      Class&lt;?&gt;[] exceptionTypes = constructor.getExceptionTypes();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 构造方法无法被调用，只可以创建新实例</span></span><br><span class=\"line\">      ConstructorReflectDemo constructorReflectDemo = constructor.newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考：</p>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/reflect/index.html\">The Reflection API</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>导读：反射通常由需要检查或修改java虚拟机中运行的应用程序的运行时行为的程序使用。反射是一种强大的技术，可以使应用程序执行原本不可能的操作。</p>\n<hr>\n<h1 id=\"java反射机制\"><a href=\"#java反射机制\" class=\"headerlink\" title=\"java反射机制\"></a>java反射机制</h1><h2 id=\"反射原理：\"><a href=\"#反射原理：\" class=\"headerlink\" title=\"反射原理：\"></a>反射原理：</h2><p>java在编译之后，会将Java代码生成为class源文件，JVM启动时，将会载入所有的源文件，并将<strong>类型信息</strong>存放到<strong>方法区</strong>中，将所有<strong>对象实例</strong>存放在<strong>Java堆</strong>中。</p>\n<ul>\n<li>对于获取或创建新的类型实例：反射是在运行时，通过读取方法区中的字节码，来动态的找到其反射的类或类的方法和属性等（实际上就是在运行时，根据全类型名在方法区找对应的类），以实现类型的检查或创建该类的实例对象。</li>\n<li>对于修改或获取存在的实例对象：一般来说，我们不通过反射构建的实例对象，通过编译器后都能预先的知道该实例对象有哪些属性和方法，从而可以直接获取或调用方法或属性。<br>  而反射则不同，由于是运行时进行操作，它没法知道反射的这个实例对象有哪些属性和方法，因此需要先获取该对象的类型信息，从而通过该类型信息的属性或方法来修改实例对象。</li>\n</ul>\n<h2 id=\"反射的用途：\"><a href=\"#反射的用途：\" class=\"headerlink\" title=\"反射的用途：\"></a>反射的用途：</h2><p>反射功能通常用于检查或修改java虚拟机运行中（runtime）的应用程序的行为。反射是一种强大的技术，可以运行原本不可能的操作。</p>\n<ul>\n<li>在运行中分析类的能力，可以通过完全限定类名创建类的对象实例。</li>\n<li>在运行中查看和操作对象，可以遍历类的成员变量。</li>\n<li>反射允许代码执行非反射代码中非法的操作，可以检索和访问类的私有成员变量，包括私有属性、方法等。</li>\n</ul>\n<p>注意：要有选择的使用反射功能，如果可以直接执行操作，那么最好不要使用反射。</p>\n<h2 id=\"反射的缺点：\"><a href=\"#反射的缺点：\" class=\"headerlink\" title=\"反射的缺点：\"></a>反射的缺点：</h2><ul>\n<li>额外的性能开销（<strong>Performance Overhead</strong>）：由于反射涉及动态类型的解析，它无法执行某些java虚拟机优化，因此反射操作的性能通常要比非反射操作慢。</li>\n<li>安全限制（<strong>Security Restrictions</strong>）：反射需要运行时操作权限，此操作可能在一些安全管理器下不被允许。</li>\n<li>内部泄露（<strong>Exposure of Internals</strong>）：由于反射允许代码执行非反射代码中非法的操作（例如访问私有字段和方法），因此使用反射可能会导致意外的副作用，这可能会使代码无法正常工作并可能破坏可移植性。反射性代码破坏了抽象，因此可能会随着平台的升级而改变行为。</li>\n</ul>\n<h2 id=\"获取对象类的方式\"><a href=\"#获取对象类的方式\" class=\"headerlink\" title=\"获取对象类的方式:\"></a>获取对象类的方式:</h2><ol>\n<li>**Object.getClass()**。从一个实例对象中获取它的类。这仅适用于继承自Object的引用类型（当然java的类默认继承于Object）。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">Class&lt;? extends Map&gt; aClass = hashMap.getClass();</span><br><span class=\"line\">String text = <span class=\"string\">&quot;text&quot;</span>;</span><br><span class=\"line\">Class&lt;? extends String&gt; aClass1 = text.getClass();</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li><strong>XXX.class</strong>。直接从未实例化的类获取类。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Integer&gt; integerClass = <span class=\"keyword\">int</span>.class;</span><br><span class=\"line\">Class&lt;HashMap&gt; hashMapClass = HashMap.class;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>**Class.forName()**。通过完全限定类名获取类。即包名加类名（java.util.HashMap）。否则会报找不到类错误。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;HashMap&gt; hashMapClass = Class.forName(<span class=\"string\">&quot;java.util.HashMap&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; forName(String className)</span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forName0(className, <span class=\"keyword\">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"4\">\n<li><strong>Integer.TYPE</strong>。基本类型的包装类通过TYPE获取类。都是java早期版本的产物，已过时。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Integer</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Class&lt;Integer&gt;  TYPE = (Class&lt;Integer&gt;) Class.getPrimitiveClass(<span class=\"string\">&quot;int&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Double</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Class&lt;Double&gt;   TYPE = (Class&lt;Double&gt;) Class.getPrimitiveClass(<span class=\"string\">&quot;double&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"5\">\n<li>通过反射类ClassAPI获取类。注意，只有在已经直接或间接获得一个类的情况下，才可以访问这些API。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  Class&lt;?&gt; className = Class.forName(<span class=\"string\">&quot;java.lang.String&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 获取父类</span></span><br><span class=\"line\">  Class&lt;?&gt; superclass = className.getSuperclass();</span><br><span class=\"line\">  <span class=\"comment\">// 返回调用类的成员变量，包括所有公共的类、接口和枚举</span></span><br><span class=\"line\">  Class&lt;?&gt;[] classes = className.getClasses();</span><br><span class=\"line\">  <span class=\"comment\">// 返回调用类的依赖，包括所有类、接口和显式声明的枚举</span></span><br><span class=\"line\">  Class&lt;?&gt;[] declaredClasses = className.getDeclaredClasses();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">  e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"获取类的成员变量：\"><a href=\"#获取类的成员变量：\" class=\"headerlink\" title=\"获取类的成员变量：\"></a>获取类的成员变量：</h2><p>获取字段：</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a> API</th>\n<th>是否是列表</th>\n<th>是否获取父类属性</th>\n<th>能否能获取私有字段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-\">getDeclaredField()</a></td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-\">getField()</a></td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--\">getDeclaredFields()</a></td>\n<td>yes</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--\">getFields()</a></td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<p>获取方法：</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a> API</th>\n<th>List of members?</th>\n<th>Inherited members?</th>\n<th>Private members?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-\">getDeclaredMethod()</a></td>\n<td>no</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-\">getMethod()</a></td>\n<td>no</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--\">getDeclaredMethods()</a></td>\n<td>yes</td>\n<td>no</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--\">getMethods()</a></td>\n<td>yes</td>\n<td>yes</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<p>获取构造器：</p>\n<table>\n<thead>\n<tr>\n<th><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a> API</th>\n<th>List of members?</th>\n<th>Inherited members?</th>\n<th>Private members?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-\">getDeclaredConstructor()</a></td>\n<td>no</td>\n<td>N/A1</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-\">getConstructor()</a></td>\n<td>no</td>\n<td>N/A1</td>\n<td>no</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--\">getDeclaredConstructors()</a></td>\n<td>yes</td>\n<td>N/A1</td>\n<td>yes</td>\n</tr>\n<tr>\n<td><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--\">getConstructors()</a></td>\n<td>yes</td>\n<td>N/A1</td>\n<td>no</td>\n</tr>\n</tbody></table>\n<h2 id=\"java-lang-reflect-Field\"><a href=\"#java-lang-reflect-Field\" class=\"headerlink\" title=\"java.lang.reflect.Field\"></a>java.lang.reflect.Field</h2><p>Field字段具有类型和值。Field提供访问属性对象类型信息的方法；以及获取和设置字段值的方法。</p>\n<p><strong>获取字段类型：</strong></p>\n<p>字段可以是原始类型或引用类型。</p>\n<p>有八种基本类型：boolean，byte，short，int，long，char，float，和double。</p>\n<p>引用类型是java.lang.Object类的直接或间接子类，包含接口，数组和枚举类型等 。</p>\n<p><strong>获取字段修饰符：</strong></p>\n<ul>\n<li>访问修饰符：public，protected，和private</li>\n<li>仅用于字段的控制运行时行为的修饰符：transient和volatile</li>\n<li>限制单实例的修饰符： static</li>\n<li>禁止值修改的修饰符： final</li>\n<li>注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; className = Class.forName(<span class=\"string\">&quot;java.util.HashMap&quot;</span>);</span><br><span class=\"line\">Field table = className.getDeclaredField(<span class=\"string\">&quot;table&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取属性的名字</span></span><br><span class=\"line\">String name = table.getName();</span><br><span class=\"line\"><span class=\"comment\">// 获取属性的类型</span></span><br><span class=\"line\">Class&lt;?&gt; type = table.getType();</span><br><span class=\"line\"><span class=\"comment\">// 获取修饰符</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> modifiers = table.getModifiers();</span><br><span class=\"line\">System.out.println(Modifier.toString(modifiers));</span><br><span class=\"line\"><span class=\"comment\">// 获取注解</span></span><br><span class=\"line\">Override annotation = table.getDeclaredAnnotation(Override.class);</span><br><span class=\"line\">Annotation[] declaredAnnotations = table.getDeclaredAnnotations();</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>获取和设置字段值：</strong></p>\n<p>给定一个类的实例，可以使用反射来设置该类中字段的值。通常仅在特殊情况下无法以常规方式设置值时才执行此操作。因为这样的访问通常会违反该类的设计意图，所以应绝对谨慎地使用它。</p>\n<p><strong>注意</strong>：通过反射设置字段的值会有一定的性能开销，因为必须进行各种操作，例如验证访问权限。从运行时的角度来看，效果是相同的，并且操作是原子的，就好像直接在类代码中更改了值一样。除此之外，反射会破坏java原本的设定，列如可以重新设置final属性的值等。</p>\n<p><strong>反射修改final修饰的属性值到JVM对String的优化：</strong></p>\n<p>反射功能强大，能修改private以及final修饰的变量。如下代码中，展示了JVM的优化以及反射的一些劣势。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FieldReflectDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 引用直接指向常量池中的常量值</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String constantStr = <span class=\"string\">&quot;FinalConstantStringField&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// JVM优化了getter方法，直接将对constantStr引用全部替换成了常量</span></span><br><span class=\"line\"><span class=\"comment\">//  public String getConstantStr() &#123;return &quot;FinalConstantStringField&quot;;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在堆中新建了一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String newStr = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;FinalNewStringField&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FieldReflectDemo</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    FieldReflectDemo fieldReflectDemo = <span class=\"keyword\">new</span> FieldReflectDemo();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class&lt;?&gt; className = fieldReflectDemo.getClass();</span><br><span class=\"line\">      Field constantStr = className.getDeclaredField(<span class=\"string\">&quot;constantStr&quot;</span>);</span><br><span class=\"line\">      Field newStr = className.getDeclaredField(<span class=\"string\">&quot;newStr&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 获取实例对象的字段值</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;constantStr原：&quot;</span> + constantStr.get(fieldReflectDemo));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;newStr原：&quot;</span> + newStr.get(fieldReflectDemo));</span><br><span class=\"line\">      constantStr.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      newStr.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      constantStr.set(fieldReflectDemo, <span class=\"string\">&quot;New Filed Name&quot;</span>);</span><br><span class=\"line\">      newStr.set(fieldReflectDemo, <span class=\"string\">&quot;New Filed Name&quot;</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;constantStr反射修改：&quot;</span> + constantStr.get(fieldReflectDemo));</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;newStr反射修改：&quot;</span> + newStr.get(fieldReflectDemo));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;constantStr实例对象值：&quot;</span> + fieldReflectDemo.getConstantStr());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;newStr实例对象值：&quot;</span> + fieldReflectDemo.getNewStr());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 输出</span></span><br><span class=\"line\"><span class=\"comment\">   * constantStr原：FinalConstantStringField</span></span><br><span class=\"line\"><span class=\"comment\">   * newStr原：FinalNewStringField</span></span><br><span class=\"line\"><span class=\"comment\">   * constantStr反射修改：New Filed Name</span></span><br><span class=\"line\"><span class=\"comment\">   * newStr反射修改：New Filed Name</span></span><br><span class=\"line\"><span class=\"comment\">   * constantStr实例对象值：FinalConstantStringField</span></span><br><span class=\"line\"><span class=\"comment\">   * newStr实例对象值：New Filed Name</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为JVM在编译时期, 就把final类型的<strong>直接赋值的String</strong>进行了优化, 在编译时期就会把String处理成常量。反射成功将其值修改成功了，但是在它的get方法中，返回的不是当前变量，而是返回JVM优化好的一个常量值。</p>\n<h2 id=\"java-lang-reflect-Method\"><a href=\"#java-lang-reflect-Method\" class=\"headerlink\" title=\"java.lang.reflect.Method\"></a>java.lang.reflect.Method</h2><p>Method方法具有参数和返回值，并且方法可能抛出异常。Method提供获取参数信息、返回值的方法；它也可以调用（invoke）给定对象的方法。</p>\n<p><strong>获取方法类型的信息：</strong></p>\n<p>方法声明包含了方法名、修饰符、参数、返回类型以及抛出的多个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodReflectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MethodReflectDemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getNothing</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumByName</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NullPointerException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (StringUtils.isEmpty(name))</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;名字为空&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name.length();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    MethodReflectDemo methodReflectDemo = <span class=\"keyword\">new</span> MethodReflectDemo();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class&lt;? extends MethodReflectDemo&gt; demoClass = methodReflectDemo.getClass();</span><br><span class=\"line\">      Method method = demoClass.getDeclaredMethod(<span class=\"string\">&quot;getNumByName&quot;</span>, String.class);</span><br><span class=\"line\">      String name = method.getName();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;方法名：&quot;</span> + name);</span><br><span class=\"line\">      <span class=\"comment\">// 修饰符</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> modifiers = method.getModifiers();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;所有修饰符：&quot;</span> + Modifier.toString(modifiers));</span><br><span class=\"line\">      <span class=\"comment\">// 参数</span></span><br><span class=\"line\">      Parameter[] parameters = method.getParameters();</span><br><span class=\"line\">      <span class=\"comment\">// 返回类型</span></span><br><span class=\"line\">      Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;返回类型：&quot;</span> + returnType.getTypeName());</span><br><span class=\"line\">      <span class=\"comment\">// 异常</span></span><br><span class=\"line\">      Class&lt;?&gt;[] exceptionTypes = method.getExceptionTypes();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 实例对象调用方法</span></span><br><span class=\"line\">      Object invoke = method.invoke(methodReflectDemo, <span class=\"string\">&quot;名称&quot;</span>);</span><br><span class=\"line\">      System.out.println(invoke);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"java-lang-reflect-Constructor\"><a href=\"#java-lang-reflect-Constructor\" class=\"headerlink\" title=\"java.lang.reflect.Constructor\"></a>java.lang.reflect.Constructor</h2><p>Constructor与Method相似，但有几点不同：</p>\n<ul>\n<li>构造函数没有返回值</li>\n<li>构造函数无法被实例对象执行，它的调用只能为给定的类创建对象的新实例。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstructorReflectDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConstructorReflectDemo</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">getNothing</span><span class=\"params\">(String name)</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumByName</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> NullPointerException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isEmpty(name))</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">&quot;名字为空&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name.length();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    ConstructorReflectDemo methodReflectDemo = <span class=\"keyword\">new</span> ConstructorReflectDemo();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      Class&lt;? extends ConstructorReflectDemo&gt; demoClass = methodReflectDemo.getClass();</span><br><span class=\"line\">      Constructor&lt;? extends ConstructorReflectDemo&gt; constructor = demoClass.getConstructor();</span><br><span class=\"line\">      String name = constructor.getName();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;构造方法名：&quot;</span> + name);</span><br><span class=\"line\">      <span class=\"comment\">// 修饰符</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> modifiers = constructor.getModifiers();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;所有修饰符：&quot;</span> + Modifier.toString(modifiers));</span><br><span class=\"line\">      <span class=\"comment\">// 参数</span></span><br><span class=\"line\">      Parameter[] parameters = constructor.getParameters();</span><br><span class=\"line\">      <span class=\"comment\">// 异常</span></span><br><span class=\"line\">      Class&lt;?&gt;[] exceptionTypes = constructor.getExceptionTypes();</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 构造方法无法被调用，只可以创建新实例</span></span><br><span class=\"line\">      ConstructorReflectDemo constructorReflectDemo = constructor.newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考：</p>\n<p><a href=\"https://docs.oracle.com/javase/tutorial/reflect/index.html\">The Reflection API</a></p>\n"},{"title":"函数式编程","author":"WangJwi","_content":"\n导读：函数式编程，或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。\n\n------\n\n## 函数式编程：Functional programming\n### 函数式编程的一些基本概念\n函数式编程，又称函数程序设计、泛函编程，是一种编程范式。\n\n<br><br>\n\n#### 函数式编程的定义：\n\n简单来说：函数式编程就是将计算机的程序运算比作数学中的函数运算，函数运算的最终结果只能取决于输入值。当使用相同参数调用函数时，它将始终返回相同的结果。\n\n规范来说：函数式编程有时被视为纯函数式编程的同义词，是将所有函数视为确定性数学函数或纯函数的函数式编程的一个子集。当使用一些给定参数调用纯函数时，它将始终返回相同的结果，并且不受任何可变状态或其他副作用(**side effect**)的影响。\n\n<br><br>\n\n#### 程序的副作用：\n\n定义：如果一次操作、一个方法或一个表达式在其本地环境之外修改了一些变量的状态，那么就可以认为程序产生了副作用。\n\n副作用包括修改非局部变量、修改静态局部变量、修改通过引用传递的可变参数、执行I/O或调用其他副作用函数。\n\n\n**副作用的表现**：\n\n- 在方法变更一个状态后将其从新变更为新的状态\n- 在方法执行期间变更本地（非当前方法的局部变量）或全局的变量\n- 方法执行未返回前的一次数据库保存操作\n- 在方法中打印的日志\n- 在方法中执行I/O操作\n\n<br>\n\n#### 函数编程与数学函数：\n\n数学中的函数：将函数输入和输出相关联的表达式，函数的输出值始终依赖于函数的输入值。此外，多个函数可以组合成一个新的函数形式。\n\n类似如下例子。表达式：y=x^2 - 1，输入：x=5，输出：y=24，且当x=5时，输出始终为24；\n\n那么函数式编程也是类似的，有表达式：函数体（代码块），输入：方法参数，输出：返回值。\n\n<br>\n\n#### 设计函数式编程应该遵循的原则：\n\n- First-Class and Higher-Order Functions\n- 纯函数\n- 不变性\n- 引用透明\n\n\n当然以上原则并不需要完全遵循，只是作为更为完美的函数设计的参考。下面将对上述的原则一一解释\n\n\n⭐**First-Class and Higher-Order Functions**\n\n***First-Class Function***：一等函数，即在一门编程语言中，函数与变量并没有实质区别，函数也可以同普通变量一样，作为参数传递给其他函数，或将它们作为其他函数的值返回，并将它们分配给变量或将它们存储在数据结构中。这就意味着，函数名称与普通变量一样，其将被定义为函数类型 + 函数名称，如同 int a一样，只是这里的函数名称实际是由代码块组成的函数运算块。\n\n\n***Higher-Order Function***：高阶函数有两以下两个特征：\n1. 将一个或多个函数作为参数\n2. 将函数作为结果返回\n\n\n***一等函数和高阶函数的区别***：\n1. 一等函数针对编程语言：当某种语言具有一等函数特性时，那么该语言将会把函数视为普通变量。更常见的说法是“一种语言是否支持一等函数”。\n2. 高阶函数针对函数：高阶函数是对其他函数起作用的函数，当一个函数有N个函数作为参数或将函数作为返回值，那么该函数就是一个高阶函数。\n3. 这两件事密切相关，因为很难想象一种具有一流函数的语言不支持高阶函数，相反，很难想象具有高阶函数但没有一流函数支持的语言。\n\n\n⭐**纯函数**（Pure Functions）：即是没有副作用的函数。\n\n\n⭐**不变性**（Immutability）：即一个对象被实例化后，其属性不能够被改变。这是语言级别的设计支持的。在 Java 中，我们必须自己创建不可变的数据结构（正如String、基本类型、math类一样）。[Immutables](https://www.baeldung.com/immutables)和[Project Lombok](https://www.baeldung.com/intro-to-project-lombok)提供了现成的框架，用于在 Java 中定义不可变数据结构。\n\n\n⭐**引用透明**（Referential Transparency）：如果将表达式替换为其相应的值，且没有对程序的行为造成影响时，那么该表达式就是引用透明的。换句话说，引用透明的表达式没有副作用且具有不变性。\n\n下面是baeldung的一个例子：\n\n```java\npublic class SimpleData {\n  private Logger logger = Logger.getGlobal();\n  private String data;\n  public String getData() {\n    logger.log(Level.INFO, \"Get data called for SimpleData\");\n    return data;\n  }\n  public SimpleData setData(String data) {\n    logger.log(Level.INFO, \"Set data called for SimpleData\");\n    this.data = data;\n    return this;\n  }\n}\n\n\n// 对logger的三个调用在语义上是等效的，但在引用上并不透明\nString data = new SimpleData().setData(\"Baeldung\").getData();\n// 不是引用透明的，因为它会产生副作用，其将会打印一条日志。如果我们像第三次调用一样用它的值替换这个调用，我们将不会打印该日志。\nlogger.log(Level.INFO, new SimpleData().setData(\"Baeldung\").getData());\n// 不是引用透明的，因为SimpleData是可变的。\nlogger.log(Level.INFO, data);\nlogger.log(Level.INFO, \"Baeldung\");\n```\n\n<br><br>\n\n#### 函数式编程的作用：\n\n采用函数式编程的最大优势是纯函数和不可变状态。大多数编程的挑战的根源在于副作用和可变状态。去掉它们会使我们的程序更易于阅读、推理、测试和维护。\n\n\n<br><br><br>\n\n------\n\n### 函数式接口\n#### 说明：\n\n函数式接口实际上只是函数式编程的定义，它将作为方法参数，被传给其他方法，而实现这些接口的方法一般被表现为lambda表达式（当然你也可以用一般接口的形式来实现函数式接口，也可以通过匿名内部类来实现，但lambda表达式实际上就是为了简化上述情况而产生的）。\n\n<br><br>\n\n#### 函数式接口的定义：\n\n要定义一个函数式接口，需要满足以下两种情况\n\n1. 使用@FunctionalInterface注解，标注接口为函数式接口\n2. 接口内部必须只有一个或以下的普通接口方法。但可以有任意数量的接口默认方法和接口静态方法，这些都不影响函数式接口的定义。\n\n<br><br>\n\n#### JDK中的函数式接口：\n\n**Function**：接受一个参数，并返回一个结果\n\n```java\n@FunctionalInterface\npublic interface Function<T, R> {\n\n\n    // 接受一个参数，并返回一个结果\n    R apply(T t);\n\n\n    // apply方法的组合实现 表示before.apply(v)的函数输出值r将作为this.apply(r)的输入值\n    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n        Objects.requireNonNull(before);\n        return (V v) -> apply(before.apply(v));\n    }\n\n\n    // apply方法的组合实现 表示this.apply(t)的函数输出值r将作为after.apply(r)的输入值\n    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n        Objects.requireNonNull(after);\n        return (T t) -> after.apply(apply(t));\n    }\n    \n    // 函数将永远将输入参数作为输出参数\n    static <T> Function<T, T> identity() {\n        return t -> t;\n    }\n```\n\n<br>\n\n**Predicate**：接受一个参数，返回Boolean\n\n```java\n@FunctionalInterface\npublic interface Predicate<T> {\n\n\n    // 接受一个参数，返回Boolean\n    boolean test(T t);\n\n\n    // 表示两个Predicate的与判断 this.test(t) and a.test(t)\n    default Predicate<T> and(Predicate<? super T> other) {\n        Objects.requireNonNull(other);\n        return (t) -> test(t) && other.test(t);\n    }\n    \n    // 表示非Predicate的判断 !this.test(t)\n    default Predicate<T> negate() {\n        return (t) -> !test(t);\n    }\n\n\n    // 表示两个Predicate的或判断 this.test(t) or a.test(t)\n    default Predicate<T> or(Predicate<? super T> other) {\n        Objects.requireNonNull(other);\n        return (t) -> test(t) || other.test(t);\n    }\n\n\n    static <T> Predicate<T> isEqual(Object targetRef) {\n        return (null == targetRef)\n                ? Objects::isNull\n                : object -> targetRef.equals(object);\n    \n```\n\n\n<br>\n\n\n**Supplier**：无参返回一个结果。该函数可以接受无参构造方法、无参方法来返回一个结果\n\n```java\n@FunctionalInterface\npublic interface Supplier<T> {\n\n\n    // 无参返回一个结果\n    T get();\n}\n```\n\n<br>\n\n**Consumer**：接受一个参数，并处理，无返回结果\n\n```java\n@FunctionalInterface\npublic interface Consumer<T> {\n\n\n    // 接受一个参数，并处理，无返回结果\n    void accept(T t);\n\n\n    // 组合操作 表示消费的先后顺序，当前实例消费完成后，after才开始消费\n    default Consumer<T> andThen(Consumer<? super T> after) {\n        Objects.requireNonNull(after);\n        return (T t) -> { accept(t); after.accept(t); };\n    }\n```\n\n<br><br>\n\n#### 实例：\n\n使用上面的函数接口实现简单的判断和输出功能：\n\n```java\npublic class FITest<T, R> {\n    public static void main(String[] args) {\n        // 判断输入的密码是否正确 正确时计算并返回结果\n        FITest<String, String> fiTest = new FITest<>();\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"请输入密码： \");\n        String key = sc.next();\n        String result = fiTest.getIfTrue(key, // 输入数据\n                k1 -> k1 + \" Is Right KEY! \", // Predicate判断为真时的回调方法\n                k2 -> k2.equals(\"KEY\") // 判断条件\n        );\n        System.out.println(result);\n    }\n\n\n    // 判断正确时打印输出\n    public R getIfTrue(T t, Function<T, R> function, Predicate<T> predicate) {\n        if (!predicate.test(t)) {\n            System.err.println(\"密码错误！\");\n            return null;\n        }\n        return function.apply(t);\n    }\n}\n\n// 输入输出结果\n请输入密码： NKEY\nnull\n密码错误！\n----------------------\n请输入密码： KEY\nKEY Is Right KEY! \n\n\n```\n\n\n<br><br><br>\n\n------\n\n### Lambda表达式：Lambda Expressions\n\n#### 概念：\n\n即是一个**匿名函数**，即没有函数名的函数。Lambda表达式可以让我们不用实现函数式接口，而是通过函数体完成其接口方法。Lambda是实现回调函数（callback function）的一种方式。\n\n<br><br>\n\n#### 结构：\n\n（输入 +） 函数体 （+ 输出）\n\n```java\n// 输入(String a)   \n// \"->\" 符号后的部分都可以当作函数体 \n// 输出一个String类型的变量upper\n(String a) -> {\n    String upper = a.toUpperCase();\n    System.out.println(upper);\n    return upper;\n}\n```\n\n<br><br>\n\n\n#### 语法规则：\n\n1. 声明类型、不声明类型\n\n```java\n(int a, int b) -> a + b\n\n(a, b) -> a - b\n\n// 前面两个表达式含义相同，相当于下面的方法\nint sum(int a, int b) {\n  return a +b;\n```\n\n\n\n注意：单个参数需要声明类型时，必须使用“()”圆括号。\n<br>\n```java\n// 一个入参\n(List<String> l) -> {\n  l.forEach(element -> System.out.println(element));\n}\n```\n\n<br>\n\n\n\n2. 有输入参数、没有输入参数\n\n```java\n(String a) -> new String(a)\n// 需要一个没有内容的括号表示无参\n() -> new String()\n\n// 以上相当于一个是有参方法，一个是无参方法\nString newStr(String a) {\n  return new String(a);\n}\n\nString newStr() {\n  return new String();\n```\n\n<br>\n\n3. 单条执行语句、多条执行语句\n\n```java\n() -> \"lambda\".toUpperCase()\n\n() -> {\n    // other statement\n    return \"lambda\".toUpperCase();\n}\n```\n\n注意：单条语句可以省去“{}”\n\n<br>\n\n4. 带有输出的Lambda表达式、不带有输出\n\n```java\n// 有返回值\n(List<String> list) -> {\n    return list;\n}\n\n(List<String> list) -> list\n\n\n// 无返回值\n(List<String> list) -> {\n    list.clear();\n}\n\n(List<String> list) -> list.clear()\n```\n\n注意：\n\n1. 当函数体只有一条且为输出语句时，需要确保简写表达式语句有返回值\n2. 当无返回值的表达式只有一条时，需要确保简写表达式不会有返回值\n\n\n<br><br><br>\n\n------\n\n### 方法引用：Method Reference\n\n#### 定义：\n\n当使用一个Lambda表达式创建一个匿名函数时，如果该函数什么都不做，仅仅只是调用一个现有的方法时，就可以使用方法的名字来代表该方法的调用。\n\n<br>\n\n方法引用即是用现有方法的名字，来紧凑的表达一个易于阅读的Lambda表达式。\n\n<br>\n\n方法引用使用两个冒号 **::** 表示\n\n\n<br><br>\n\n\n#### 方法引用种类：\n\n| 种类                             | 句法                                 | 例子                                                        |\n| -------------------------------- | ------------------------------------ | ----------------------------------------------------------- |\n| 引用静态方法                     | ContainingClass::staticMethodName    | Person::compareByAgeMethodReferencesExamples::appendStrings |\n| 引用类的实例对象的方法           | containingObject::instanceMethodName | myComparisonProvider::compareByNamemyApp::appendStrings2    |\n| 引用特殊类型的任意对象的实例方法 | ContainingType::methodName           | String::compareToIgnoreCaseString::concat                   |\n| 引用构造函数                     | ClassName::new                       | HashSet::new                                                |\n\n<br>\n下面的代码是Oracle文档的一段代码实例：\n\n```java\nimport java.util.function.BiFunction;\n\n\npublic class MethodReferencesExamples {\n    \n    public static <T> T mergeThings(T a, T b, BiFunction<T, T, T> merger) {\n        return merger.apply(a, b);\n    }\n    \n    public static String appendStrings(String a, String b) {\n        return a + b;\n    }\n    \n    public String appendStrings2(String a, String b) {\n        return a + b;\n    }\n\n\n    public static void main(String[] args) {\n        \n        MethodReferencesExamples myApp = new MethodReferencesExamples();\n\n\n        // Calling the method mergeThings with a lambda expression\n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", (a, b) -> a + b));\n        \n        // Reference to a static method\n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", MethodReferencesExamples::appendStrings));\n\n\n        // Reference to an instance method of a particular object        \n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", myApp::appendStrings2));\n        \n        // Reference to an instance method of an arbitrary object of a\n        // particular type\n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", String::concat));\n   \n```\n\n<br><br>\n\n**结语**：花费了大概一周的空闲时间，终于对函数式编程有了初步的了解，接下来，将会继续学习函数式编程在Java中的实际应用：Stream流式操作。也希望能在实际的编码中能写出优美、可读性强且可维护性高的函数式编程语句，加油！\n\n当然，如果文中有错误，也希望能即时提醒。\n\n\n<br><br>\n\n------\n\n### 参考\n\n[Lambda Expressions](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)\n\n[Functional Programming in Java](https://www.baeldung.com/java-functional-programming)\n\n[Functional programming](https://en.wikipedia.org/wiki/Functional_programming)\n[Method References](https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)\n\n[Any difference between First Class Function and High Order Function](https://stackoverflow.com/questions/10141124/any-difference-between-first-class-function-and-high-order-function)\n\n[first-class functions：函数是一等公民](https://blog.csdn.net/weixin_30849591/article/details/95599961)\n\n[Higher-order_function](https://en.wikipedia.org/wiki/Higher-order_function)\n\n[First-class_function](https://en.wikipedia.org/wiki/First-class_function)\n\n[Side effect](https://en.wikipedia.org/wiki/Side_effect_(computer_science))\n\n","source":"_posts/2021-05-22-Functional-Programming.md","raw":"---\ntitle:  \"函数式编程\"\nauthor: WangJwi\ncategories:\n- Java\ntags:\n- Java\n- Lambda\n- Stream\n- functional programming\n---\n\n导读：函数式编程，或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。\n\n------\n\n## 函数式编程：Functional programming\n### 函数式编程的一些基本概念\n函数式编程，又称函数程序设计、泛函编程，是一种编程范式。\n\n<br><br>\n\n#### 函数式编程的定义：\n\n简单来说：函数式编程就是将计算机的程序运算比作数学中的函数运算，函数运算的最终结果只能取决于输入值。当使用相同参数调用函数时，它将始终返回相同的结果。\n\n规范来说：函数式编程有时被视为纯函数式编程的同义词，是将所有函数视为确定性数学函数或纯函数的函数式编程的一个子集。当使用一些给定参数调用纯函数时，它将始终返回相同的结果，并且不受任何可变状态或其他副作用(**side effect**)的影响。\n\n<br><br>\n\n#### 程序的副作用：\n\n定义：如果一次操作、一个方法或一个表达式在其本地环境之外修改了一些变量的状态，那么就可以认为程序产生了副作用。\n\n副作用包括修改非局部变量、修改静态局部变量、修改通过引用传递的可变参数、执行I/O或调用其他副作用函数。\n\n\n**副作用的表现**：\n\n- 在方法变更一个状态后将其从新变更为新的状态\n- 在方法执行期间变更本地（非当前方法的局部变量）或全局的变量\n- 方法执行未返回前的一次数据库保存操作\n- 在方法中打印的日志\n- 在方法中执行I/O操作\n\n<br>\n\n#### 函数编程与数学函数：\n\n数学中的函数：将函数输入和输出相关联的表达式，函数的输出值始终依赖于函数的输入值。此外，多个函数可以组合成一个新的函数形式。\n\n类似如下例子。表达式：y=x^2 - 1，输入：x=5，输出：y=24，且当x=5时，输出始终为24；\n\n那么函数式编程也是类似的，有表达式：函数体（代码块），输入：方法参数，输出：返回值。\n\n<br>\n\n#### 设计函数式编程应该遵循的原则：\n\n- First-Class and Higher-Order Functions\n- 纯函数\n- 不变性\n- 引用透明\n\n\n当然以上原则并不需要完全遵循，只是作为更为完美的函数设计的参考。下面将对上述的原则一一解释\n\n\n⭐**First-Class and Higher-Order Functions**\n\n***First-Class Function***：一等函数，即在一门编程语言中，函数与变量并没有实质区别，函数也可以同普通变量一样，作为参数传递给其他函数，或将它们作为其他函数的值返回，并将它们分配给变量或将它们存储在数据结构中。这就意味着，函数名称与普通变量一样，其将被定义为函数类型 + 函数名称，如同 int a一样，只是这里的函数名称实际是由代码块组成的函数运算块。\n\n\n***Higher-Order Function***：高阶函数有两以下两个特征：\n1. 将一个或多个函数作为参数\n2. 将函数作为结果返回\n\n\n***一等函数和高阶函数的区别***：\n1. 一等函数针对编程语言：当某种语言具有一等函数特性时，那么该语言将会把函数视为普通变量。更常见的说法是“一种语言是否支持一等函数”。\n2. 高阶函数针对函数：高阶函数是对其他函数起作用的函数，当一个函数有N个函数作为参数或将函数作为返回值，那么该函数就是一个高阶函数。\n3. 这两件事密切相关，因为很难想象一种具有一流函数的语言不支持高阶函数，相反，很难想象具有高阶函数但没有一流函数支持的语言。\n\n\n⭐**纯函数**（Pure Functions）：即是没有副作用的函数。\n\n\n⭐**不变性**（Immutability）：即一个对象被实例化后，其属性不能够被改变。这是语言级别的设计支持的。在 Java 中，我们必须自己创建不可变的数据结构（正如String、基本类型、math类一样）。[Immutables](https://www.baeldung.com/immutables)和[Project Lombok](https://www.baeldung.com/intro-to-project-lombok)提供了现成的框架，用于在 Java 中定义不可变数据结构。\n\n\n⭐**引用透明**（Referential Transparency）：如果将表达式替换为其相应的值，且没有对程序的行为造成影响时，那么该表达式就是引用透明的。换句话说，引用透明的表达式没有副作用且具有不变性。\n\n下面是baeldung的一个例子：\n\n```java\npublic class SimpleData {\n  private Logger logger = Logger.getGlobal();\n  private String data;\n  public String getData() {\n    logger.log(Level.INFO, \"Get data called for SimpleData\");\n    return data;\n  }\n  public SimpleData setData(String data) {\n    logger.log(Level.INFO, \"Set data called for SimpleData\");\n    this.data = data;\n    return this;\n  }\n}\n\n\n// 对logger的三个调用在语义上是等效的，但在引用上并不透明\nString data = new SimpleData().setData(\"Baeldung\").getData();\n// 不是引用透明的，因为它会产生副作用，其将会打印一条日志。如果我们像第三次调用一样用它的值替换这个调用，我们将不会打印该日志。\nlogger.log(Level.INFO, new SimpleData().setData(\"Baeldung\").getData());\n// 不是引用透明的，因为SimpleData是可变的。\nlogger.log(Level.INFO, data);\nlogger.log(Level.INFO, \"Baeldung\");\n```\n\n<br><br>\n\n#### 函数式编程的作用：\n\n采用函数式编程的最大优势是纯函数和不可变状态。大多数编程的挑战的根源在于副作用和可变状态。去掉它们会使我们的程序更易于阅读、推理、测试和维护。\n\n\n<br><br><br>\n\n------\n\n### 函数式接口\n#### 说明：\n\n函数式接口实际上只是函数式编程的定义，它将作为方法参数，被传给其他方法，而实现这些接口的方法一般被表现为lambda表达式（当然你也可以用一般接口的形式来实现函数式接口，也可以通过匿名内部类来实现，但lambda表达式实际上就是为了简化上述情况而产生的）。\n\n<br><br>\n\n#### 函数式接口的定义：\n\n要定义一个函数式接口，需要满足以下两种情况\n\n1. 使用@FunctionalInterface注解，标注接口为函数式接口\n2. 接口内部必须只有一个或以下的普通接口方法。但可以有任意数量的接口默认方法和接口静态方法，这些都不影响函数式接口的定义。\n\n<br><br>\n\n#### JDK中的函数式接口：\n\n**Function**：接受一个参数，并返回一个结果\n\n```java\n@FunctionalInterface\npublic interface Function<T, R> {\n\n\n    // 接受一个参数，并返回一个结果\n    R apply(T t);\n\n\n    // apply方法的组合实现 表示before.apply(v)的函数输出值r将作为this.apply(r)的输入值\n    default <V> Function<V, R> compose(Function<? super V, ? extends T> before) {\n        Objects.requireNonNull(before);\n        return (V v) -> apply(before.apply(v));\n    }\n\n\n    // apply方法的组合实现 表示this.apply(t)的函数输出值r将作为after.apply(r)的输入值\n    default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) {\n        Objects.requireNonNull(after);\n        return (T t) -> after.apply(apply(t));\n    }\n    \n    // 函数将永远将输入参数作为输出参数\n    static <T> Function<T, T> identity() {\n        return t -> t;\n    }\n```\n\n<br>\n\n**Predicate**：接受一个参数，返回Boolean\n\n```java\n@FunctionalInterface\npublic interface Predicate<T> {\n\n\n    // 接受一个参数，返回Boolean\n    boolean test(T t);\n\n\n    // 表示两个Predicate的与判断 this.test(t) and a.test(t)\n    default Predicate<T> and(Predicate<? super T> other) {\n        Objects.requireNonNull(other);\n        return (t) -> test(t) && other.test(t);\n    }\n    \n    // 表示非Predicate的判断 !this.test(t)\n    default Predicate<T> negate() {\n        return (t) -> !test(t);\n    }\n\n\n    // 表示两个Predicate的或判断 this.test(t) or a.test(t)\n    default Predicate<T> or(Predicate<? super T> other) {\n        Objects.requireNonNull(other);\n        return (t) -> test(t) || other.test(t);\n    }\n\n\n    static <T> Predicate<T> isEqual(Object targetRef) {\n        return (null == targetRef)\n                ? Objects::isNull\n                : object -> targetRef.equals(object);\n    \n```\n\n\n<br>\n\n\n**Supplier**：无参返回一个结果。该函数可以接受无参构造方法、无参方法来返回一个结果\n\n```java\n@FunctionalInterface\npublic interface Supplier<T> {\n\n\n    // 无参返回一个结果\n    T get();\n}\n```\n\n<br>\n\n**Consumer**：接受一个参数，并处理，无返回结果\n\n```java\n@FunctionalInterface\npublic interface Consumer<T> {\n\n\n    // 接受一个参数，并处理，无返回结果\n    void accept(T t);\n\n\n    // 组合操作 表示消费的先后顺序，当前实例消费完成后，after才开始消费\n    default Consumer<T> andThen(Consumer<? super T> after) {\n        Objects.requireNonNull(after);\n        return (T t) -> { accept(t); after.accept(t); };\n    }\n```\n\n<br><br>\n\n#### 实例：\n\n使用上面的函数接口实现简单的判断和输出功能：\n\n```java\npublic class FITest<T, R> {\n    public static void main(String[] args) {\n        // 判断输入的密码是否正确 正确时计算并返回结果\n        FITest<String, String> fiTest = new FITest<>();\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"请输入密码： \");\n        String key = sc.next();\n        String result = fiTest.getIfTrue(key, // 输入数据\n                k1 -> k1 + \" Is Right KEY! \", // Predicate判断为真时的回调方法\n                k2 -> k2.equals(\"KEY\") // 判断条件\n        );\n        System.out.println(result);\n    }\n\n\n    // 判断正确时打印输出\n    public R getIfTrue(T t, Function<T, R> function, Predicate<T> predicate) {\n        if (!predicate.test(t)) {\n            System.err.println(\"密码错误！\");\n            return null;\n        }\n        return function.apply(t);\n    }\n}\n\n// 输入输出结果\n请输入密码： NKEY\nnull\n密码错误！\n----------------------\n请输入密码： KEY\nKEY Is Right KEY! \n\n\n```\n\n\n<br><br><br>\n\n------\n\n### Lambda表达式：Lambda Expressions\n\n#### 概念：\n\n即是一个**匿名函数**，即没有函数名的函数。Lambda表达式可以让我们不用实现函数式接口，而是通过函数体完成其接口方法。Lambda是实现回调函数（callback function）的一种方式。\n\n<br><br>\n\n#### 结构：\n\n（输入 +） 函数体 （+ 输出）\n\n```java\n// 输入(String a)   \n// \"->\" 符号后的部分都可以当作函数体 \n// 输出一个String类型的变量upper\n(String a) -> {\n    String upper = a.toUpperCase();\n    System.out.println(upper);\n    return upper;\n}\n```\n\n<br><br>\n\n\n#### 语法规则：\n\n1. 声明类型、不声明类型\n\n```java\n(int a, int b) -> a + b\n\n(a, b) -> a - b\n\n// 前面两个表达式含义相同，相当于下面的方法\nint sum(int a, int b) {\n  return a +b;\n```\n\n\n\n注意：单个参数需要声明类型时，必须使用“()”圆括号。\n<br>\n```java\n// 一个入参\n(List<String> l) -> {\n  l.forEach(element -> System.out.println(element));\n}\n```\n\n<br>\n\n\n\n2. 有输入参数、没有输入参数\n\n```java\n(String a) -> new String(a)\n// 需要一个没有内容的括号表示无参\n() -> new String()\n\n// 以上相当于一个是有参方法，一个是无参方法\nString newStr(String a) {\n  return new String(a);\n}\n\nString newStr() {\n  return new String();\n```\n\n<br>\n\n3. 单条执行语句、多条执行语句\n\n```java\n() -> \"lambda\".toUpperCase()\n\n() -> {\n    // other statement\n    return \"lambda\".toUpperCase();\n}\n```\n\n注意：单条语句可以省去“{}”\n\n<br>\n\n4. 带有输出的Lambda表达式、不带有输出\n\n```java\n// 有返回值\n(List<String> list) -> {\n    return list;\n}\n\n(List<String> list) -> list\n\n\n// 无返回值\n(List<String> list) -> {\n    list.clear();\n}\n\n(List<String> list) -> list.clear()\n```\n\n注意：\n\n1. 当函数体只有一条且为输出语句时，需要确保简写表达式语句有返回值\n2. 当无返回值的表达式只有一条时，需要确保简写表达式不会有返回值\n\n\n<br><br><br>\n\n------\n\n### 方法引用：Method Reference\n\n#### 定义：\n\n当使用一个Lambda表达式创建一个匿名函数时，如果该函数什么都不做，仅仅只是调用一个现有的方法时，就可以使用方法的名字来代表该方法的调用。\n\n<br>\n\n方法引用即是用现有方法的名字，来紧凑的表达一个易于阅读的Lambda表达式。\n\n<br>\n\n方法引用使用两个冒号 **::** 表示\n\n\n<br><br>\n\n\n#### 方法引用种类：\n\n| 种类                             | 句法                                 | 例子                                                        |\n| -------------------------------- | ------------------------------------ | ----------------------------------------------------------- |\n| 引用静态方法                     | ContainingClass::staticMethodName    | Person::compareByAgeMethodReferencesExamples::appendStrings |\n| 引用类的实例对象的方法           | containingObject::instanceMethodName | myComparisonProvider::compareByNamemyApp::appendStrings2    |\n| 引用特殊类型的任意对象的实例方法 | ContainingType::methodName           | String::compareToIgnoreCaseString::concat                   |\n| 引用构造函数                     | ClassName::new                       | HashSet::new                                                |\n\n<br>\n下面的代码是Oracle文档的一段代码实例：\n\n```java\nimport java.util.function.BiFunction;\n\n\npublic class MethodReferencesExamples {\n    \n    public static <T> T mergeThings(T a, T b, BiFunction<T, T, T> merger) {\n        return merger.apply(a, b);\n    }\n    \n    public static String appendStrings(String a, String b) {\n        return a + b;\n    }\n    \n    public String appendStrings2(String a, String b) {\n        return a + b;\n    }\n\n\n    public static void main(String[] args) {\n        \n        MethodReferencesExamples myApp = new MethodReferencesExamples();\n\n\n        // Calling the method mergeThings with a lambda expression\n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", (a, b) -> a + b));\n        \n        // Reference to a static method\n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", MethodReferencesExamples::appendStrings));\n\n\n        // Reference to an instance method of a particular object        \n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", myApp::appendStrings2));\n        \n        // Reference to an instance method of an arbitrary object of a\n        // particular type\n        System.out.println(MethodReferencesExamples.\n            mergeThings(\"Hello \", \"World!\", String::concat));\n   \n```\n\n<br><br>\n\n**结语**：花费了大概一周的空闲时间，终于对函数式编程有了初步的了解，接下来，将会继续学习函数式编程在Java中的实际应用：Stream流式操作。也希望能在实际的编码中能写出优美、可读性强且可维护性高的函数式编程语句，加油！\n\n当然，如果文中有错误，也希望能即时提醒。\n\n\n<br><br>\n\n------\n\n### 参考\n\n[Lambda Expressions](https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html)\n\n[Functional Programming in Java](https://www.baeldung.com/java-functional-programming)\n\n[Functional programming](https://en.wikipedia.org/wiki/Functional_programming)\n[Method References](https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)\n\n[Any difference between First Class Function and High Order Function](https://stackoverflow.com/questions/10141124/any-difference-between-first-class-function-and-high-order-function)\n\n[first-class functions：函数是一等公民](https://blog.csdn.net/weixin_30849591/article/details/95599961)\n\n[Higher-order_function](https://en.wikipedia.org/wiki/Higher-order_function)\n\n[First-class_function](https://en.wikipedia.org/wiki/First-class_function)\n\n[Side effect](https://en.wikipedia.org/wiki/Side_effect_(computer_science))\n\n","slug":"2021-05-22-Functional-Programming","published":1,"date":"2021-12-22T07:32:13.047Z","updated":"2021-12-22T07:05:39.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxh8313m00055cv1ezjhe91b","content":"<p>导读：函数式编程，或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。</p>\n<hr>\n<h2 id=\"函数式编程：Functional-programming\"><a href=\"#函数式编程：Functional-programming\" class=\"headerlink\" title=\"函数式编程：Functional programming\"></a>函数式编程：Functional programming</h2><h3 id=\"函数式编程的一些基本概念\"><a href=\"#函数式编程的一些基本概念\" class=\"headerlink\" title=\"函数式编程的一些基本概念\"></a>函数式编程的一些基本概念</h3><p>函数式编程，又称函数程序设计、泛函编程，是一种编程范式。</p>\n<p><br><br></p>\n<h4 id=\"函数式编程的定义：\"><a href=\"#函数式编程的定义：\" class=\"headerlink\" title=\"函数式编程的定义：\"></a>函数式编程的定义：</h4><p>简单来说：函数式编程就是将计算机的程序运算比作数学中的函数运算，函数运算的最终结果只能取决于输入值。当使用相同参数调用函数时，它将始终返回相同的结果。</p>\n<p>规范来说：函数式编程有时被视为纯函数式编程的同义词，是将所有函数视为确定性数学函数或纯函数的函数式编程的一个子集。当使用一些给定参数调用纯函数时，它将始终返回相同的结果，并且不受任何可变状态或其他副作用(<strong>side effect</strong>)的影响。</p>\n<p><br><br></p>\n<h4 id=\"程序的副作用：\"><a href=\"#程序的副作用：\" class=\"headerlink\" title=\"程序的副作用：\"></a>程序的副作用：</h4><p>定义：如果一次操作、一个方法或一个表达式在其本地环境之外修改了一些变量的状态，那么就可以认为程序产生了副作用。</p>\n<p>副作用包括修改非局部变量、修改静态局部变量、修改通过引用传递的可变参数、执行I/O或调用其他副作用函数。</p>\n<p><strong>副作用的表现</strong>：</p>\n<ul>\n<li>在方法变更一个状态后将其从新变更为新的状态</li>\n<li>在方法执行期间变更本地（非当前方法的局部变量）或全局的变量</li>\n<li>方法执行未返回前的一次数据库保存操作</li>\n<li>在方法中打印的日志</li>\n<li>在方法中执行I/O操作</li>\n</ul>\n<br>\n\n<h4 id=\"函数编程与数学函数：\"><a href=\"#函数编程与数学函数：\" class=\"headerlink\" title=\"函数编程与数学函数：\"></a>函数编程与数学函数：</h4><p>数学中的函数：将函数输入和输出相关联的表达式，函数的输出值始终依赖于函数的输入值。此外，多个函数可以组合成一个新的函数形式。</p>\n<p>类似如下例子。表达式：y=x^2 - 1，输入：x=5，输出：y=24，且当x=5时，输出始终为24；</p>\n<p>那么函数式编程也是类似的，有表达式：函数体（代码块），输入：方法参数，输出：返回值。</p>\n<br>\n\n<h4 id=\"设计函数式编程应该遵循的原则：\"><a href=\"#设计函数式编程应该遵循的原则：\" class=\"headerlink\" title=\"设计函数式编程应该遵循的原则：\"></a>设计函数式编程应该遵循的原则：</h4><ul>\n<li>First-Class and Higher-Order Functions</li>\n<li>纯函数</li>\n<li>不变性</li>\n<li>引用透明</li>\n</ul>\n<p>当然以上原则并不需要完全遵循，只是作为更为完美的函数设计的参考。下面将对上述的原则一一解释</p>\n<p>⭐<strong>First-Class and Higher-Order Functions</strong></p>\n<p><em><strong>First-Class Function</strong></em>：一等函数，即在一门编程语言中，函数与变量并没有实质区别，函数也可以同普通变量一样，作为参数传递给其他函数，或将它们作为其他函数的值返回，并将它们分配给变量或将它们存储在数据结构中。这就意味着，函数名称与普通变量一样，其将被定义为函数类型 + 函数名称，如同 int a一样，只是这里的函数名称实际是由代码块组成的函数运算块。</p>\n<p><em><strong>Higher-Order Function</strong></em>：高阶函数有两以下两个特征：</p>\n<ol>\n<li>将一个或多个函数作为参数</li>\n<li>将函数作为结果返回</li>\n</ol>\n<p><em><strong>一等函数和高阶函数的区别</strong></em>：</p>\n<ol>\n<li>一等函数针对编程语言：当某种语言具有一等函数特性时，那么该语言将会把函数视为普通变量。更常见的说法是“一种语言是否支持一等函数”。</li>\n<li>高阶函数针对函数：高阶函数是对其他函数起作用的函数，当一个函数有N个函数作为参数或将函数作为返回值，那么该函数就是一个高阶函数。</li>\n<li>这两件事密切相关，因为很难想象一种具有一流函数的语言不支持高阶函数，相反，很难想象具有高阶函数但没有一流函数支持的语言。</li>\n</ol>\n<p>⭐<strong>纯函数</strong>（Pure Functions）：即是没有副作用的函数。</p>\n<p>⭐<strong>不变性</strong>（Immutability）：即一个对象被实例化后，其属性不能够被改变。这是语言级别的设计支持的。在 Java 中，我们必须自己创建不可变的数据结构（正如String、基本类型、math类一样）。<a href=\"https://www.baeldung.com/immutables\">Immutables</a>和<a href=\"https://www.baeldung.com/intro-to-project-lombok\">Project Lombok</a>提供了现成的框架，用于在 Java 中定义不可变数据结构。</p>\n<p>⭐<strong>引用透明</strong>（Referential Transparency）：如果将表达式替换为其相应的值，且没有对程序的行为造成影响时，那么该表达式就是引用透明的。换句话说，引用透明的表达式没有副作用且具有不变性。</p>\n<p>下面是baeldung的一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleData</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Logger logger = Logger.getGlobal();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    logger.log(Level.INFO, <span class=\"string\">&quot;Get data called for SimpleData&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SimpleData <span class=\"title\">setData</span><span class=\"params\">(String data)</span> </span>&#123;</span><br><span class=\"line\">    logger.log(Level.INFO, <span class=\"string\">&quot;Set data called for SimpleData&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对logger的三个调用在语义上是等效的，但在引用上并不透明</span></span><br><span class=\"line\">String data = <span class=\"keyword\">new</span> SimpleData().setData(<span class=\"string\">&quot;Baeldung&quot;</span>).getData();</span><br><span class=\"line\"><span class=\"comment\">// 不是引用透明的，因为它会产生副作用，其将会打印一条日志。如果我们像第三次调用一样用它的值替换这个调用，我们将不会打印该日志。</span></span><br><span class=\"line\">logger.log(Level.INFO, <span class=\"keyword\">new</span> SimpleData().setData(<span class=\"string\">&quot;Baeldung&quot;</span>).getData());</span><br><span class=\"line\"><span class=\"comment\">// 不是引用透明的，因为SimpleData是可变的。</span></span><br><span class=\"line\">logger.log(Level.INFO, data);</span><br><span class=\"line\">logger.log(Level.INFO, <span class=\"string\">&quot;Baeldung&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h4 id=\"函数式编程的作用：\"><a href=\"#函数式编程的作用：\" class=\"headerlink\" title=\"函数式编程的作用：\"></a>函数式编程的作用：</h4><p>采用函数式编程的最大优势是纯函数和不可变状态。大多数编程的挑战的根源在于副作用和可变状态。去掉它们会使我们的程序更易于阅读、推理、测试和维护。</p>\n<p><br><br><br></p>\n<hr>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><h4 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>函数式接口实际上只是函数式编程的定义，它将作为方法参数，被传给其他方法，而实现这些接口的方法一般被表现为lambda表达式（当然你也可以用一般接口的形式来实现函数式接口，也可以通过匿名内部类来实现，但lambda表达式实际上就是为了简化上述情况而产生的）。</p>\n<p><br><br></p>\n<h4 id=\"函数式接口的定义：\"><a href=\"#函数式接口的定义：\" class=\"headerlink\" title=\"函数式接口的定义：\"></a>函数式接口的定义：</h4><p>要定义一个函数式接口，需要满足以下两种情况</p>\n<ol>\n<li>使用@FunctionalInterface注解，标注接口为函数式接口</li>\n<li>接口内部必须只有一个或以下的普通接口方法。但可以有任意数量的接口默认方法和接口静态方法，这些都不影响函数式接口的定义。</li>\n</ol>\n<p><br><br></p>\n<h4 id=\"JDK中的函数式接口：\"><a href=\"#JDK中的函数式接口：\" class=\"headerlink\" title=\"JDK中的函数式接口：\"></a>JDK中的函数式接口：</h4><p><strong>Function</strong>：接受一个参数，并返回一个结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接受一个参数，并返回一个结果</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// apply方法的组合实现 表示before.apply(v)的函数输出值r将作为this.apply(r)的输入值</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;V, R&gt; <span class=\"title\">compose</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(before);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// apply方法的组合实现 表示this.apply(t)的函数输出值r将作为after.apply(r)的输入值</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;T, V&gt; <span class=\"title\">andThen</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 函数将永远将输入参数作为输出参数</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Function&lt;T, T&gt; <span class=\"title\">identity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t -&gt; t;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p><strong>Predicate</strong>：接受一个参数，返回Boolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接受一个参数，返回Boolean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示两个Predicate的与判断 this.test(t) and a.test(t)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title\">and</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; other)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 表示非Predicate的判断 !this.test(t)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title\">negate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; !test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示两个Predicate的或判断 this.test(t) or a.test(t)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title\">or</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; other)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Predicate&lt;T&gt; <span class=\"title\">isEqual</span><span class=\"params\">(Object targetRef)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">null</span> == targetRef)</span><br><span class=\"line\">                ? Objects::isNull</span><br><span class=\"line\">                : object -&gt; targetRef.equals(object);</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n<br>\n\n\n<p><strong>Supplier</strong>：无参返回一个结果。该函数可以接受无参构造方法、无参方法来返回一个结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Supplier</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 无参返回一个结果</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p><strong>Consumer</strong>：接受一个参数，并处理，无返回结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Consumer</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接受一个参数，并处理，无返回结果</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 组合操作 表示消费的先后顺序，当前实例消费完成后，after才开始消费</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Consumer&lt;T&gt; <span class=\"title\">andThen</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; after)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h4 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><p>使用上面的函数接口实现简单的判断和输出功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FITest</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断输入的密码是否正确 正确时计算并返回结果</span></span><br><span class=\"line\">        FITest&lt;String, String&gt; fiTest = <span class=\"keyword\">new</span> FITest&lt;&gt;();</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入密码： &quot;</span>);</span><br><span class=\"line\">        String key = sc.next();</span><br><span class=\"line\">        String result = fiTest.getIfTrue(key, <span class=\"comment\">// 输入数据</span></span><br><span class=\"line\">                k1 -&gt; k1 + <span class=\"string\">&quot; Is Right KEY! &quot;</span>, <span class=\"comment\">// Predicate判断为真时的回调方法</span></span><br><span class=\"line\">                k2 -&gt; k2.equals(<span class=\"string\">&quot;KEY&quot;</span>) <span class=\"comment\">// 判断条件</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断正确时打印输出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> R <span class=\"title\">getIfTrue</span><span class=\"params\">(T t, Function&lt;T, R&gt; function, Predicate&lt;T&gt; predicate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!predicate.test(t)) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;密码错误！&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> function.apply(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入输出结果</span></span><br><span class=\"line\">请输入密码： NKEY</span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br><span class=\"line\">密码错误！</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">请输入密码： KEY</span><br><span class=\"line\">KEY Is Right KEY! </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<h3 id=\"Lambda表达式：Lambda-Expressions\"><a href=\"#Lambda表达式：Lambda-Expressions\" class=\"headerlink\" title=\"Lambda表达式：Lambda Expressions\"></a>Lambda表达式：Lambda Expressions</h3><h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><p>即是一个<strong>匿名函数</strong>，即没有函数名的函数。Lambda表达式可以让我们不用实现函数式接口，而是通过函数体完成其接口方法。Lambda是实现回调函数（callback function）的一种方式。</p>\n<p><br><br></p>\n<h4 id=\"结构：\"><a href=\"#结构：\" class=\"headerlink\" title=\"结构：\"></a>结构：</h4><p>（输入 +） 函数体 （+ 输出）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入(String a)   </span></span><br><span class=\"line\"><span class=\"comment\">// &quot;-&gt;&quot; 符号后的部分都可以当作函数体 </span></span><br><span class=\"line\"><span class=\"comment\">// 输出一个String类型的变量upper</span></span><br><span class=\"line\">(String a) -&gt; &#123;</span><br><span class=\"line\">    String upper = a.toUpperCase();</span><br><span class=\"line\">    System.out.println(upper);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> upper;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h4 id=\"语法规则：\"><a href=\"#语法规则：\" class=\"headerlink\" title=\"语法规则：\"></a>语法规则：</h4><ol>\n<li>声明类型、不声明类型</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) -&gt; a + b</span><br><span class=\"line\"></span><br><span class=\"line\">(a, b) -&gt; a - b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前面两个表达式含义相同，相当于下面的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a +b;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意：单个参数需要声明类型时，必须使用“()”圆括号。<br><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个入参</span></span><br><span class=\"line\">(List&lt;String&gt; l) -&gt; &#123;</span><br><span class=\"line\">  l.forEach(element -&gt; System.out.println(element));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<ol start=\"2\">\n<li>有输入参数、没有输入参数</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(String a) -&gt; <span class=\"keyword\">new</span> String(a)</span><br><span class=\"line\"><span class=\"comment\">// 需要一个没有内容的括号表示无参</span></span><br><span class=\"line\">() -&gt; <span class=\"keyword\">new</span> String()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上相当于一个是有参方法，一个是无参方法</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">newStr</span><span class=\"params\">(String a)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">newStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String();</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"3\">\n<li>单条执行语句、多条执行语句</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() -&gt; <span class=\"string\">&quot;lambda&quot;</span>.toUpperCase()</span><br><span class=\"line\"></span><br><span class=\"line\">() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// other statement</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;lambda&quot;</span>.toUpperCase();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：单条语句可以省去“{}”</p>\n<br>\n\n<ol start=\"4\">\n<li>带有输出的Lambda表达式、不带有输出</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有返回值</span></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无返回值</span></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; &#123;</span><br><span class=\"line\">    list.clear();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; list.clear()</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li>当函数体只有一条且为输出语句时，需要确保简写表达式语句有返回值</li>\n<li>当无返回值的表达式只有一条时，需要确保简写表达式不会有返回值</li>\n</ol>\n<p><br><br><br></p>\n<hr>\n<h3 id=\"方法引用：Method-Reference\"><a href=\"#方法引用：Method-Reference\" class=\"headerlink\" title=\"方法引用：Method Reference\"></a>方法引用：Method Reference</h3><h4 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h4><p>当使用一个Lambda表达式创建一个匿名函数时，如果该函数什么都不做，仅仅只是调用一个现有的方法时，就可以使用方法的名字来代表该方法的调用。</p>\n<br>\n\n<p>方法引用即是用现有方法的名字，来紧凑的表达一个易于阅读的Lambda表达式。</p>\n<br>\n\n<p>方法引用使用两个冒号 <strong>::</strong> 表示</p>\n<p><br><br></p>\n<h4 id=\"方法引用种类：\"><a href=\"#方法引用种类：\" class=\"headerlink\" title=\"方法引用种类：\"></a>方法引用种类：</h4><table>\n<thead>\n<tr>\n<th>种类</th>\n<th>句法</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>引用静态方法</td>\n<td>ContainingClass::staticMethodName</td>\n<td>Person::compareByAgeMethodReferencesExamples::appendStrings</td>\n</tr>\n<tr>\n<td>引用类的实例对象的方法</td>\n<td>containingObject::instanceMethodName</td>\n<td>myComparisonProvider::compareByNamemyApp::appendStrings2</td>\n</tr>\n<tr>\n<td>引用特殊类型的任意对象的实例方法</td>\n<td>ContainingType::methodName</td>\n<td>String::compareToIgnoreCaseString::concat</td>\n</tr>\n<tr>\n<td>引用构造函数</td>\n<td>ClassName::new</td>\n<td>HashSet::new</td>\n</tr>\n</tbody></table>\n<br>\n下面的代码是Oracle文档的一段代码实例：\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.BiFunction;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodReferencesExamples</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">mergeThings</span><span class=\"params\">(T a, T b, BiFunction&lt;T, T, T&gt; merger)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merger.apply(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">appendStrings</span><span class=\"params\">(String a, String b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">appendStrings2</span><span class=\"params\">(String a, String b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        MethodReferencesExamples myApp = <span class=\"keyword\">new</span> MethodReferencesExamples();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Calling the method mergeThings with a lambda expression</span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, (a, b) -&gt; a + b));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Reference to a static method</span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, MethodReferencesExamples::appendStrings));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Reference to an instance method of a particular object        </span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, myApp::appendStrings2));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Reference to an instance method of an arbitrary object of a</span></span><br><span class=\"line\">        <span class=\"comment\">// particular type</span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, String::concat));</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<p><strong>结语</strong>：花费了大概一周的空闲时间，终于对函数式编程有了初步的了解，接下来，将会继续学习函数式编程在Java中的实际应用：Stream流式操作。也希望能在实际的编码中能写出优美、可读性强且可维护性高的函数式编程语句，加油！</p>\n<p>当然，如果文中有错误，也希望能即时提醒。</p>\n<p><br><br></p>\n<hr>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">Lambda Expressions</a></p>\n<p><a href=\"https://www.baeldung.com/java-functional-programming\">Functional Programming in Java</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Functional_programming\">Functional programming</a><br><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\">Method References</a></p>\n<p><a href=\"https://stackoverflow.com/questions/10141124/any-difference-between-first-class-function-and-high-order-function\">Any difference between First Class Function and High Order Function</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_30849591/article/details/95599961\">first-class functions：函数是一等公民</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">Higher-order_function</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/First-class_function\">First-class_function</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\">Side effect</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>导读：函数式编程，或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。</p>\n<hr>\n<h2 id=\"函数式编程：Functional-programming\"><a href=\"#函数式编程：Functional-programming\" class=\"headerlink\" title=\"函数式编程：Functional programming\"></a>函数式编程：Functional programming</h2><h3 id=\"函数式编程的一些基本概念\"><a href=\"#函数式编程的一些基本概念\" class=\"headerlink\" title=\"函数式编程的一些基本概念\"></a>函数式编程的一些基本概念</h3><p>函数式编程，又称函数程序设计、泛函编程，是一种编程范式。</p>\n<p><br><br></p>\n<h4 id=\"函数式编程的定义：\"><a href=\"#函数式编程的定义：\" class=\"headerlink\" title=\"函数式编程的定义：\"></a>函数式编程的定义：</h4><p>简单来说：函数式编程就是将计算机的程序运算比作数学中的函数运算，函数运算的最终结果只能取决于输入值。当使用相同参数调用函数时，它将始终返回相同的结果。</p>\n<p>规范来说：函数式编程有时被视为纯函数式编程的同义词，是将所有函数视为确定性数学函数或纯函数的函数式编程的一个子集。当使用一些给定参数调用纯函数时，它将始终返回相同的结果，并且不受任何可变状态或其他副作用(<strong>side effect</strong>)的影响。</p>\n<p><br><br></p>\n<h4 id=\"程序的副作用：\"><a href=\"#程序的副作用：\" class=\"headerlink\" title=\"程序的副作用：\"></a>程序的副作用：</h4><p>定义：如果一次操作、一个方法或一个表达式在其本地环境之外修改了一些变量的状态，那么就可以认为程序产生了副作用。</p>\n<p>副作用包括修改非局部变量、修改静态局部变量、修改通过引用传递的可变参数、执行I/O或调用其他副作用函数。</p>\n<p><strong>副作用的表现</strong>：</p>\n<ul>\n<li>在方法变更一个状态后将其从新变更为新的状态</li>\n<li>在方法执行期间变更本地（非当前方法的局部变量）或全局的变量</li>\n<li>方法执行未返回前的一次数据库保存操作</li>\n<li>在方法中打印的日志</li>\n<li>在方法中执行I/O操作</li>\n</ul>\n<br>\n\n<h4 id=\"函数编程与数学函数：\"><a href=\"#函数编程与数学函数：\" class=\"headerlink\" title=\"函数编程与数学函数：\"></a>函数编程与数学函数：</h4><p>数学中的函数：将函数输入和输出相关联的表达式，函数的输出值始终依赖于函数的输入值。此外，多个函数可以组合成一个新的函数形式。</p>\n<p>类似如下例子。表达式：y=x^2 - 1，输入：x=5，输出：y=24，且当x=5时，输出始终为24；</p>\n<p>那么函数式编程也是类似的，有表达式：函数体（代码块），输入：方法参数，输出：返回值。</p>\n<br>\n\n<h4 id=\"设计函数式编程应该遵循的原则：\"><a href=\"#设计函数式编程应该遵循的原则：\" class=\"headerlink\" title=\"设计函数式编程应该遵循的原则：\"></a>设计函数式编程应该遵循的原则：</h4><ul>\n<li>First-Class and Higher-Order Functions</li>\n<li>纯函数</li>\n<li>不变性</li>\n<li>引用透明</li>\n</ul>\n<p>当然以上原则并不需要完全遵循，只是作为更为完美的函数设计的参考。下面将对上述的原则一一解释</p>\n<p>⭐<strong>First-Class and Higher-Order Functions</strong></p>\n<p><em><strong>First-Class Function</strong></em>：一等函数，即在一门编程语言中，函数与变量并没有实质区别，函数也可以同普通变量一样，作为参数传递给其他函数，或将它们作为其他函数的值返回，并将它们分配给变量或将它们存储在数据结构中。这就意味着，函数名称与普通变量一样，其将被定义为函数类型 + 函数名称，如同 int a一样，只是这里的函数名称实际是由代码块组成的函数运算块。</p>\n<p><em><strong>Higher-Order Function</strong></em>：高阶函数有两以下两个特征：</p>\n<ol>\n<li>将一个或多个函数作为参数</li>\n<li>将函数作为结果返回</li>\n</ol>\n<p><em><strong>一等函数和高阶函数的区别</strong></em>：</p>\n<ol>\n<li>一等函数针对编程语言：当某种语言具有一等函数特性时，那么该语言将会把函数视为普通变量。更常见的说法是“一种语言是否支持一等函数”。</li>\n<li>高阶函数针对函数：高阶函数是对其他函数起作用的函数，当一个函数有N个函数作为参数或将函数作为返回值，那么该函数就是一个高阶函数。</li>\n<li>这两件事密切相关，因为很难想象一种具有一流函数的语言不支持高阶函数，相反，很难想象具有高阶函数但没有一流函数支持的语言。</li>\n</ol>\n<p>⭐<strong>纯函数</strong>（Pure Functions）：即是没有副作用的函数。</p>\n<p>⭐<strong>不变性</strong>（Immutability）：即一个对象被实例化后，其属性不能够被改变。这是语言级别的设计支持的。在 Java 中，我们必须自己创建不可变的数据结构（正如String、基本类型、math类一样）。<a href=\"https://www.baeldung.com/immutables\">Immutables</a>和<a href=\"https://www.baeldung.com/intro-to-project-lombok\">Project Lombok</a>提供了现成的框架，用于在 Java 中定义不可变数据结构。</p>\n<p>⭐<strong>引用透明</strong>（Referential Transparency）：如果将表达式替换为其相应的值，且没有对程序的行为造成影响时，那么该表达式就是引用透明的。换句话说，引用透明的表达式没有副作用且具有不变性。</p>\n<p>下面是baeldung的一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleData</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Logger logger = Logger.getGlobal();</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    logger.log(Level.INFO, <span class=\"string\">&quot;Get data called for SimpleData&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SimpleData <span class=\"title\">setData</span><span class=\"params\">(String data)</span> </span>&#123;</span><br><span class=\"line\">    logger.log(Level.INFO, <span class=\"string\">&quot;Set data called for SimpleData&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对logger的三个调用在语义上是等效的，但在引用上并不透明</span></span><br><span class=\"line\">String data = <span class=\"keyword\">new</span> SimpleData().setData(<span class=\"string\">&quot;Baeldung&quot;</span>).getData();</span><br><span class=\"line\"><span class=\"comment\">// 不是引用透明的，因为它会产生副作用，其将会打印一条日志。如果我们像第三次调用一样用它的值替换这个调用，我们将不会打印该日志。</span></span><br><span class=\"line\">logger.log(Level.INFO, <span class=\"keyword\">new</span> SimpleData().setData(<span class=\"string\">&quot;Baeldung&quot;</span>).getData());</span><br><span class=\"line\"><span class=\"comment\">// 不是引用透明的，因为SimpleData是可变的。</span></span><br><span class=\"line\">logger.log(Level.INFO, data);</span><br><span class=\"line\">logger.log(Level.INFO, <span class=\"string\">&quot;Baeldung&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h4 id=\"函数式编程的作用：\"><a href=\"#函数式编程的作用：\" class=\"headerlink\" title=\"函数式编程的作用：\"></a>函数式编程的作用：</h4><p>采用函数式编程的最大优势是纯函数和不可变状态。大多数编程的挑战的根源在于副作用和可变状态。去掉它们会使我们的程序更易于阅读、推理、测试和维护。</p>\n<p><br><br><br></p>\n<hr>\n<h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><h4 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h4><p>函数式接口实际上只是函数式编程的定义，它将作为方法参数，被传给其他方法，而实现这些接口的方法一般被表现为lambda表达式（当然你也可以用一般接口的形式来实现函数式接口，也可以通过匿名内部类来实现，但lambda表达式实际上就是为了简化上述情况而产生的）。</p>\n<p><br><br></p>\n<h4 id=\"函数式接口的定义：\"><a href=\"#函数式接口的定义：\" class=\"headerlink\" title=\"函数式接口的定义：\"></a>函数式接口的定义：</h4><p>要定义一个函数式接口，需要满足以下两种情况</p>\n<ol>\n<li>使用@FunctionalInterface注解，标注接口为函数式接口</li>\n<li>接口内部必须只有一个或以下的普通接口方法。但可以有任意数量的接口默认方法和接口静态方法，这些都不影响函数式接口的定义。</li>\n</ol>\n<p><br><br></p>\n<h4 id=\"JDK中的函数式接口：\"><a href=\"#JDK中的函数式接口：\" class=\"headerlink\" title=\"JDK中的函数式接口：\"></a>JDK中的函数式接口：</h4><p><strong>Function</strong>：接受一个参数，并返回一个结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接受一个参数，并返回一个结果</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// apply方法的组合实现 表示before.apply(v)的函数输出值r将作为this.apply(r)的输入值</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;V, R&gt; <span class=\"title\">compose</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> V, ? extends T&gt; before)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(before);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// apply方法的组合实现 表示this.apply(t)的函数输出值r将作为after.apply(r)的输入值</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;V&gt; <span class=\"function\">Function&lt;T, V&gt; <span class=\"title\">andThen</span><span class=\"params\">(Function&lt;? <span class=\"keyword\">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 函数将永远将输入参数作为输出参数</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Function&lt;T, T&gt; <span class=\"title\">identity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t -&gt; t;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p><strong>Predicate</strong>：接受一个参数，返回Boolean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接受一个参数，返回Boolean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示两个Predicate的与判断 this.test(t) and a.test(t)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title\">and</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; other)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 表示非Predicate的判断 !this.test(t)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title\">negate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; !test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示两个Predicate的或判断 this.test(t) or a.test(t)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Predicate&lt;T&gt; <span class=\"title\">or</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; other)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(other);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Predicate&lt;T&gt; <span class=\"title\">isEqual</span><span class=\"params\">(Object targetRef)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">null</span> == targetRef)</span><br><span class=\"line\">                ? Objects::isNull</span><br><span class=\"line\">                : object -&gt; targetRef.equals(object);</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n\n<br>\n\n\n<p><strong>Supplier</strong>：无参返回一个结果。该函数可以接受无参构造方法、无参方法来返回一个结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Supplier</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 无参返回一个结果</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<p><strong>Consumer</strong>：接受一个参数，并处理，无返回结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Consumer</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接受一个参数，并处理，无返回结果</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 组合操作 表示消费的先后顺序，当前实例消费完成后，after才开始消费</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> Consumer&lt;T&gt; <span class=\"title\">andThen</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; after)</span> </span>&#123;</span><br><span class=\"line\">        Objects.requireNonNull(after);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h4 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h4><p>使用上面的函数接口实现简单的判断和输出功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FITest</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断输入的密码是否正确 正确时计算并返回结果</span></span><br><span class=\"line\">        FITest&lt;String, String&gt; fiTest = <span class=\"keyword\">new</span> FITest&lt;&gt;();</span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;请输入密码： &quot;</span>);</span><br><span class=\"line\">        String key = sc.next();</span><br><span class=\"line\">        String result = fiTest.getIfTrue(key, <span class=\"comment\">// 输入数据</span></span><br><span class=\"line\">                k1 -&gt; k1 + <span class=\"string\">&quot; Is Right KEY! &quot;</span>, <span class=\"comment\">// Predicate判断为真时的回调方法</span></span><br><span class=\"line\">                k2 -&gt; k2.equals(<span class=\"string\">&quot;KEY&quot;</span>) <span class=\"comment\">// 判断条件</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断正确时打印输出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> R <span class=\"title\">getIfTrue</span><span class=\"params\">(T t, Function&lt;T, R&gt; function, Predicate&lt;T&gt; predicate)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!predicate.test(t)) &#123;</span><br><span class=\"line\">            System.err.println(<span class=\"string\">&quot;密码错误！&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> function.apply(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入输出结果</span></span><br><span class=\"line\">请输入密码： NKEY</span><br><span class=\"line\"><span class=\"keyword\">null</span></span><br><span class=\"line\">密码错误！</span><br><span class=\"line\">----------------------</span><br><span class=\"line\">请输入密码： KEY</span><br><span class=\"line\">KEY Is Right KEY! </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<h3 id=\"Lambda表达式：Lambda-Expressions\"><a href=\"#Lambda表达式：Lambda-Expressions\" class=\"headerlink\" title=\"Lambda表达式：Lambda Expressions\"></a>Lambda表达式：Lambda Expressions</h3><h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><p>即是一个<strong>匿名函数</strong>，即没有函数名的函数。Lambda表达式可以让我们不用实现函数式接口，而是通过函数体完成其接口方法。Lambda是实现回调函数（callback function）的一种方式。</p>\n<p><br><br></p>\n<h4 id=\"结构：\"><a href=\"#结构：\" class=\"headerlink\" title=\"结构：\"></a>结构：</h4><p>（输入 +） 函数体 （+ 输出）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入(String a)   </span></span><br><span class=\"line\"><span class=\"comment\">// &quot;-&gt;&quot; 符号后的部分都可以当作函数体 </span></span><br><span class=\"line\"><span class=\"comment\">// 输出一个String类型的变量upper</span></span><br><span class=\"line\">(String a) -&gt; &#123;</span><br><span class=\"line\">    String upper = a.toUpperCase();</span><br><span class=\"line\">    System.out.println(upper);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> upper;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<h4 id=\"语法规则：\"><a href=\"#语法规则：\" class=\"headerlink\" title=\"语法规则：\"></a>语法规则：</h4><ol>\n<li>声明类型、不声明类型</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) -&gt; a + b</span><br><span class=\"line\"></span><br><span class=\"line\">(a, b) -&gt; a - b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前面两个表达式含义相同，相当于下面的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a +b;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注意：单个参数需要声明类型时，必须使用“()”圆括号。<br><br></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个入参</span></span><br><span class=\"line\">(List&lt;String&gt; l) -&gt; &#123;</span><br><span class=\"line\">  l.forEach(element -&gt; System.out.println(element));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<ol start=\"2\">\n<li>有输入参数、没有输入参数</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(String a) -&gt; <span class=\"keyword\">new</span> String(a)</span><br><span class=\"line\"><span class=\"comment\">// 需要一个没有内容的括号表示无参</span></span><br><span class=\"line\">() -&gt; <span class=\"keyword\">new</span> String()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上相当于一个是有参方法，一个是无参方法</span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">newStr</span><span class=\"params\">(String a)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">newStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String();</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"3\">\n<li>单条执行语句、多条执行语句</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() -&gt; <span class=\"string\">&quot;lambda&quot;</span>.toUpperCase()</span><br><span class=\"line\"></span><br><span class=\"line\">() -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// other statement</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;lambda&quot;</span>.toUpperCase();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：单条语句可以省去“{}”</p>\n<br>\n\n<ol start=\"4\">\n<li>带有输出的Lambda表达式、不带有输出</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 有返回值</span></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; list</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无返回值</span></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; &#123;</span><br><span class=\"line\">    list.clear();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(List&lt;String&gt; list) -&gt; list.clear()</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li>当函数体只有一条且为输出语句时，需要确保简写表达式语句有返回值</li>\n<li>当无返回值的表达式只有一条时，需要确保简写表达式不会有返回值</li>\n</ol>\n<p><br><br><br></p>\n<hr>\n<h3 id=\"方法引用：Method-Reference\"><a href=\"#方法引用：Method-Reference\" class=\"headerlink\" title=\"方法引用：Method Reference\"></a>方法引用：Method Reference</h3><h4 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h4><p>当使用一个Lambda表达式创建一个匿名函数时，如果该函数什么都不做，仅仅只是调用一个现有的方法时，就可以使用方法的名字来代表该方法的调用。</p>\n<br>\n\n<p>方法引用即是用现有方法的名字，来紧凑的表达一个易于阅读的Lambda表达式。</p>\n<br>\n\n<p>方法引用使用两个冒号 <strong>::</strong> 表示</p>\n<p><br><br></p>\n<h4 id=\"方法引用种类：\"><a href=\"#方法引用种类：\" class=\"headerlink\" title=\"方法引用种类：\"></a>方法引用种类：</h4><table>\n<thead>\n<tr>\n<th>种类</th>\n<th>句法</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>引用静态方法</td>\n<td>ContainingClass::staticMethodName</td>\n<td>Person::compareByAgeMethodReferencesExamples::appendStrings</td>\n</tr>\n<tr>\n<td>引用类的实例对象的方法</td>\n<td>containingObject::instanceMethodName</td>\n<td>myComparisonProvider::compareByNamemyApp::appendStrings2</td>\n</tr>\n<tr>\n<td>引用特殊类型的任意对象的实例方法</td>\n<td>ContainingType::methodName</td>\n<td>String::compareToIgnoreCaseString::concat</td>\n</tr>\n<tr>\n<td>引用构造函数</td>\n<td>ClassName::new</td>\n<td>HashSet::new</td>\n</tr>\n</tbody></table>\n<br>\n下面的代码是Oracle文档的一段代码实例：\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.BiFunction;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MethodReferencesExamples</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">mergeThings</span><span class=\"params\">(T a, T b, BiFunction&lt;T, T, T&gt; merger)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> merger.apply(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">appendStrings</span><span class=\"params\">(String a, String b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">appendStrings2</span><span class=\"params\">(String a, String b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        MethodReferencesExamples myApp = <span class=\"keyword\">new</span> MethodReferencesExamples();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Calling the method mergeThings with a lambda expression</span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, (a, b) -&gt; a + b));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Reference to a static method</span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, MethodReferencesExamples::appendStrings));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Reference to an instance method of a particular object        </span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, myApp::appendStrings2));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Reference to an instance method of an arbitrary object of a</span></span><br><span class=\"line\">        <span class=\"comment\">// particular type</span></span><br><span class=\"line\">        System.out.println(MethodReferencesExamples.</span><br><span class=\"line\">            mergeThings(<span class=\"string\">&quot;Hello &quot;</span>, <span class=\"string\">&quot;World!&quot;</span>, String::concat));</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n\n<p><br><br></p>\n<p><strong>结语</strong>：花费了大概一周的空闲时间，终于对函数式编程有了初步的了解，接下来，将会继续学习函数式编程在Java中的实际应用：Stream流式操作。也希望能在实际的编码中能写出优美、可读性强且可维护性高的函数式编程语句，加油！</p>\n<p>当然，如果文中有错误，也希望能即时提醒。</p>\n<p><br><br></p>\n<hr>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">Lambda Expressions</a></p>\n<p><a href=\"https://www.baeldung.com/java-functional-programming\">Functional Programming in Java</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Functional_programming\">Functional programming</a><br><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\">Method References</a></p>\n<p><a href=\"https://stackoverflow.com/questions/10141124/any-difference-between-first-class-function-and-high-order-function\">Any difference between First Class Function and High Order Function</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_30849591/article/details/95599961\">first-class functions：函数是一等公民</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">Higher-order_function</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/First-class_function\">First-class_function</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Side_effect_(computer_science)\">Side effect</a></p>\n"},{"title":"Java并发： 使用CompletionService来接收线程池计算的结果","author":"WangJwi","_content":"\n导读：当我们向线程池提交一组任务，并希望返回结果时，我们通常会保留任务的Future，并在循环中反复调用isDone判断该任务是否完成。这一方法虽然可行，但有些繁琐，幸运的是，CompletionService可以更好的完成这一任务。\n\n\n<br><br>\n\n------\n\n# Java并发 使用CompletionService来接收线程池计算的结果\n\n\n\n\n------\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)","source":"_posts/2021-08-03-java-concurrency-2.md","raw":"---\ntitle:  \"Java并发： 使用CompletionService来接收线程池计算的结果\"\nauthor: WangJwi\ncategories:\n- java\ntags:\n- thread pool\n- concurrency\n---\n\n导读：当我们向线程池提交一组任务，并希望返回结果时，我们通常会保留任务的Future，并在循环中反复调用isDone判断该任务是否完成。这一方法虽然可行，但有些繁琐，幸运的是，CompletionService可以更好的完成这一任务。\n\n\n<br><br>\n\n------\n\n# Java并发 使用CompletionService来接收线程池计算的结果\n\n\n\n\n------\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)","slug":"2021-08-03-java-concurrency-2","published":1,"date":"2021-12-22T07:32:13.065Z","updated":"2021-12-22T07:05:39.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxh8313n00065cv1gf6k5a7f","content":"<p>导读：当我们向线程池提交一组任务，并希望返回结果时，我们通常会保留任务的Future，并在循环中反复调用isDone判断该任务是否完成。这一方法虽然可行，但有些繁琐，幸运的是，CompletionService可以更好的完成这一任务。</p>\n<p><br><br></p>\n<hr>\n<h1 id=\"Java并发-使用CompletionService来接收线程池计算的结果\"><a href=\"#Java并发-使用CompletionService来接收线程池计算的结果\" class=\"headerlink\" title=\"Java并发 使用CompletionService来接收线程池计算的结果\"></a>Java并发 使用CompletionService来接收线程池计算的结果</h1><hr>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>导读：当我们向线程池提交一组任务，并希望返回结果时，我们通常会保留任务的Future，并在循环中反复调用isDone判断该任务是否完成。这一方法虽然可行，但有些繁琐，幸运的是，CompletionService可以更好的完成这一任务。</p>\n<p><br><br></p>\n<hr>\n<h1 id=\"Java并发-使用CompletionService来接收线程池计算的结果\"><a href=\"#Java并发-使用CompletionService来接收线程池计算的结果\" class=\"headerlink\" title=\"Java并发 使用CompletionService来接收线程池计算的结果\"></a>Java并发 使用CompletionService来接收线程池计算的结果</h1><hr>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n"},{"title":"Java并发： 多线程的异常捕获","author":"WangJwi","_content":"\n导读：当我们的线程池中任务数量多且线程执行存在未知的异常时，我们很可能会忽略它们，从而使得数据缺失或流程中断。因此如何捕获和处理这些异常就显得尤为重要。\n\n\n<br><br>\n\n------\n\n# Java并发 多线程的异常捕获\n\n\n\n\n------\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)","source":"_posts/2021-08-03-java-concurrency-1.md","raw":"---\ntitle:  \"Java并发： 多线程的异常捕获\"\nauthor: WangJwi\ncategories:\n- java\ntags:\n- thread pool\n- concurrency\n---\n\n导读：当我们的线程池中任务数量多且线程执行存在未知的异常时，我们很可能会忽略它们，从而使得数据缺失或流程中断。因此如何捕获和处理这些异常就显得尤为重要。\n\n\n<br><br>\n\n------\n\n# Java并发 多线程的异常捕获\n\n\n\n\n------\n\n参考：\n\n[Redis Documentation](https://redis.io/documentation)\n\n[Redis维基百科](https://en.wikipedia.org/wiki/Redis)","slug":"2021-08-03-java-concurrency-1","published":1,"date":"2021-12-22T07:32:13.063Z","updated":"2021-12-22T07:05:39.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxh8313p00095cv1b8sx0j4n","content":"<p>导读：当我们的线程池中任务数量多且线程执行存在未知的异常时，我们很可能会忽略它们，从而使得数据缺失或流程中断。因此如何捕获和处理这些异常就显得尤为重要。</p>\n<p><br><br></p>\n<hr>\n<h1 id=\"Java并发-多线程的异常捕获\"><a href=\"#Java并发-多线程的异常捕获\" class=\"headerlink\" title=\"Java并发 多线程的异常捕获\"></a>Java并发 多线程的异常捕获</h1><hr>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>导读：当我们的线程池中任务数量多且线程执行存在未知的异常时，我们很可能会忽略它们，从而使得数据缺失或流程中断。因此如何捕获和处理这些异常就显得尤为重要。</p>\n<p><br><br></p>\n<hr>\n<h1 id=\"Java并发-多线程的异常捕获\"><a href=\"#Java并发-多线程的异常捕获\" class=\"headerlink\" title=\"Java并发 多线程的异常捕获\"></a>Java并发 多线程的异常捕获</h1><hr>\n<p>参考：</p>\n<p><a href=\"https://redis.io/documentation\">Redis Documentation</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Redis\">Redis维基百科</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-12-22T07:30:00.786Z","updated":"1985-10-26T08:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxh8313q000a5cv1bzinaqlf","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxh8313c00005cv1c2f81tmp","category_id":"ckxh8313j00025cv14zwkaj4z","_id":"ckxh8313s000c5cv12tva27xt"},{"post_id":"ckxh8313i00015cv13kac4vk8","category_id":"ckxh8313j00025cv14zwkaj4z","_id":"ckxh8313t000f5cv11auccwbq"},{"post_id":"ckxh8313l00045cv1cwwn5ii0","category_id":"ckxh8313r000b5cv1bfui6rpq","_id":"ckxh8313u000k5cv1f4n8funp"},{"post_id":"ckxh8313m00055cv1ezjhe91b","category_id":"ckxh8313r000b5cv1bfui6rpq","_id":"ckxh8313v000n5cv159irfrok"},{"post_id":"ckxh8313n00065cv1gf6k5a7f","category_id":"ckxh8313u000j5cv13cm73taa","_id":"ckxh8313w000r5cv17nfvfi2c"},{"post_id":"ckxh8313p00095cv1b8sx0j4n","category_id":"ckxh8313u000j5cv13cm73taa","_id":"ckxh8313w000t5cv1grqx6103"}],"PostTag":[{"post_id":"ckxh8313c00005cv1c2f81tmp","tag_id":"ckxh8313l00035cv1gpwi3j57","_id":"ckxh8313s000e5cv102oz7twd"},{"post_id":"ckxh8313c00005cv1c2f81tmp","tag_id":"ckxh8313o00085cv16g9vfalz","_id":"ckxh8313t000g5cv16xh75ng1"},{"post_id":"ckxh8313i00015cv13kac4vk8","tag_id":"ckxh8313l00035cv1gpwi3j57","_id":"ckxh8313u000m5cv11noy4bnn"},{"post_id":"ckxh8313i00015cv13kac4vk8","tag_id":"ckxh8313t000i5cv14n6bcws2","_id":"ckxh8313v000o5cv1f710ewfa"},{"post_id":"ckxh8313l00045cv1cwwn5ii0","tag_id":"ckxh8313u000l5cv18rc5g1q7","_id":"ckxh8313x000v5cv1grrg8hpw"},{"post_id":"ckxh8313l00045cv1cwwn5ii0","tag_id":"ckxh8313w000q5cv127z18dw4","_id":"ckxh8313x000w5cv1b3exfbq6"},{"post_id":"ckxh8313l00045cv1cwwn5ii0","tag_id":"ckxh8313w000s5cv1ghzxf2nz","_id":"ckxh8313x000y5cv17in5h9db"},{"post_id":"ckxh8313m00055cv1ezjhe91b","tag_id":"ckxh8313u000l5cv18rc5g1q7","_id":"ckxh8313y00125cv1atx60dqf"},{"post_id":"ckxh8313m00055cv1ezjhe91b","tag_id":"ckxh8313x000x5cv1766c9ckk","_id":"ckxh8313y00135cv1gn8y6mr5"},{"post_id":"ckxh8313m00055cv1ezjhe91b","tag_id":"ckxh8313x000z5cv10csc1p41","_id":"ckxh8313z00155cv1dlkn6bdj"},{"post_id":"ckxh8313m00055cv1ezjhe91b","tag_id":"ckxh8313y00105cv1fxm48gsx","_id":"ckxh8313z00165cv14t7lbudw"},{"post_id":"ckxh8313n00065cv1gf6k5a7f","tag_id":"ckxh8313y00115cv15coffytx","_id":"ckxh8313z00185cv11ban7c3p"},{"post_id":"ckxh8313n00065cv1gf6k5a7f","tag_id":"ckxh8313z00145cv10pr3bi32","_id":"ckxh8313z00195cv10jjde0gw"},{"post_id":"ckxh8313p00095cv1b8sx0j4n","tag_id":"ckxh8313y00115cv15coffytx","_id":"ckxh83140001b5cv12ew71dji"},{"post_id":"ckxh8313p00095cv1b8sx0j4n","tag_id":"ckxh8313z00145cv10pr3bi32","_id":"ckxh83140001c5cv1dsvzh1xw"}],"Tag":[{"name":"redis","_id":"ckxh8313l00035cv1gpwi3j57"},{"name":"数据结构","_id":"ckxh8313o00085cv16g9vfalz"},{"name":"key-value","_id":"ckxh8313t000i5cv14n6bcws2"},{"name":"Java","_id":"ckxh8313u000l5cv18rc5g1q7"},{"name":"反射","_id":"ckxh8313w000q5cv127z18dw4"},{"name":"Reflection","_id":"ckxh8313w000s5cv1ghzxf2nz"},{"name":"Lambda","_id":"ckxh8313x000x5cv1766c9ckk"},{"name":"Stream","_id":"ckxh8313x000z5cv10csc1p41"},{"name":"functional programming","_id":"ckxh8313y00105cv1fxm48gsx"},{"name":"thread pool","_id":"ckxh8313y00115cv15coffytx"},{"name":"concurrency","_id":"ckxh8313z00145cv10pr3bi32"}]}}