<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WangJwi</title>
    <description>积跬步以至千里~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 22 May 2021 15:32:50 +0800</pubDate>
    <lastBuildDate>Sat, 22 May 2021 15:32:50 +0800</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Java8 函数式编程</title>
        <description>&lt;p&gt;函数式编程，或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。&lt;/p&gt;

&lt;h2 id=&quot;函数式编程functional-programming&quot;&gt;函数式编程：Functional programming&lt;/h2&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://www.logicbig.com/how-to/code-snippets/jcode-java-8-streams-stream-collect.html&quot;&gt;Java 8 Stream&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;Lambda Expressions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.baeldung.com/java-functional-programming&quot;&gt;Functional Programming in Java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;Functional programming&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;什么是函数式编程&quot;&gt;什么是函数式编程&lt;/h3&gt;

&lt;p&gt;函数式编程，或称函数程序设计、泛函编程，是一种编程范式，它将电脑运算视为函数运算，并且避免使用程序状态以及易变对象。其中，λ演算为该语言最重要的基础。而且，λ演算的函数可以接受函数作为输入参数和输出返回值。&lt;/p&gt;

&lt;p&gt;比起指令式编程，函数式编程更加强调程序执行的结果而非执行的过程，倡导利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂的运算，而不是设计一个复杂的执行过程。&lt;/p&gt;

&lt;p&gt;在函数式编程中，函数是第一类对象，意思是说一个函数，既可以作为其它函数的输入参数值，也可以从函数中返回值，被修改或者被分配给一个变量。&lt;/p&gt;

&lt;h3 id=&quot;函数式接口&quot;&gt;函数式接口&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要定义一个函数式接口，需要满足以下两种情况&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用@FunctionalInterface注解，标注接口为函数式接口&lt;/li&gt;
  &lt;li&gt;接口内部必须只有一个或以下的普通接口方法。可以有任意数量的接口默认方法和接口静态方法，这些都不影响函数式接口的定义。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;函数式接口实际上只是函数式编程的定义，它将作为方法参数，被传给其他方法，而实现这些接口的方法一般被表现为lambda表达式（当然你也可以用一般接口的形式来实现函数式接口，也可以通过匿名内部类来实现，但lambda表达式实际上就是为了简化上述情况而产生的）。&lt;/p&gt;

&lt;p&gt;常用的函数式接口：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function&lt;/strong&gt;：接受一个参数，并返回一个结果&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;@FunctionalInterface
public interface Function&amp;lt;T, R&amp;gt; {


    // 接受一个参数，并返回一个结果
    R apply(T t);


    // apply方法的组合实现 表示before.apply(v)的函数输出值r将作为this.apply(r)的输入值
    default &amp;lt;V&amp;gt; Function&amp;lt;V, R&amp;gt; compose(Function&amp;lt;? super V, ? extends T&amp;gt; before) {
        Objects.requireNonNull(before);
        return (V v) -&amp;gt; apply(before.apply(v));
    }


    // apply方法的组合实现 表示this.apply(t)的函数输出值r将作为after.apply(r)的输入值
    default &amp;lt;V&amp;gt; Function&amp;lt;T, V&amp;gt; andThen(Function&amp;lt;? super R, ? extends V&amp;gt; after) {
        Objects.requireNonNull(after);
        return (T t) -&amp;gt; after.apply(apply(t));
    }
    
    // 函数将永远将输入参数作为输出参数
    static &amp;lt;T&amp;gt; Function&amp;lt;T, T&amp;gt; identity() {
        return t -&amp;gt; t;
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Predicate&lt;/strong&gt;：接受一个参数，返回Boolean&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;@FunctionalInterface
public interface Predicate&amp;lt;T&amp;gt; {


    // 接受一个参数，返回Boolean
    boolean test(T t);


    // 表示两个Predicate的与判断 this.test(t) and a.test(t)
    default Predicate&amp;lt;T&amp;gt; and(Predicate&amp;lt;? super T&amp;gt; other) {
        Objects.requireNonNull(other);
        return (t) -&amp;gt; test(t) &amp;amp;&amp;amp; other.test(t);
    }
    
    // 表示非Predicate的判断 !this.test(t)
    default Predicate&amp;lt;T&amp;gt; negate() {
        return (t) -&amp;gt; !test(t);
    }


    // 表示两个Predicate的或判断 this.test(t) or a.test(t)
    default Predicate&amp;lt;T&amp;gt; or(Predicate&amp;lt;? super T&amp;gt; other) {
        Objects.requireNonNull(other);
        return (t) -&amp;gt; test(t) || other.test(t);
    }


    static &amp;lt;T&amp;gt; Predicate&amp;lt;T&amp;gt; isEqual(Object targetRef) {
        return (null == targetRef)
                ? Objects::isNull
                : object -&amp;gt; targetRef.equals(object);
    
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Supplier&lt;/strong&gt;：无参返回一个结果。该函数可以接受无参构造方法、无参方法来返回一个结果&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;@FunctionalInterface
public interface Supplier&amp;lt;T&amp;gt; {


    // 无参返回一个结果
    T get();
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Consumer&lt;/strong&gt;：接受一个参数，并处理，无返回结果&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;@FunctionalInterface
public interface Consumer&amp;lt;T&amp;gt; {


    // 接受一个参数，并处理，无返回结果
    void accept(T t);


    // 组合操作 表示消费的先后顺序，当前实例消费完成后，after才开始消费
    default Consumer&amp;lt;T&amp;gt; andThen(Consumer&amp;lt;? super T&amp;gt; after) {
        Objects.requireNonNull(after);
        return (T t) -&amp;gt; { accept(t); after.accept(t); };
    }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实例：&lt;/p&gt;

&lt;p&gt;这一段内容只做简单介绍，在后文讲解过lambda表达式后，将使用这些函数式接口来实现一些功能。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;public class FITest&amp;lt;T, R&amp;gt; {
    public static void main(String[] args) {
        // 判断输入的密码是否正确 正确时计算并返回结果
        FITest&amp;lt;String, String&amp;gt; fiTest = new FITest&amp;lt;&amp;gt;();
        Scanner sc = new Scanner(System.in);
        System.out.print(&quot;请输入密码： &quot;);
        String key = sc.next();
        String result = fiTest.getIfTrue(key, // 输入数据
                k1 -&amp;gt; k1 + &quot; Is Right KEY! &quot;, // Predicate判断为真时的回调方法
                k2 -&amp;gt; k2.equals(&quot;KEY&quot;) // 判断条件
        );
        System.out.println(result);
    }


    // 判断正确时打印输出
    public R getIfTrue(T t, Function&amp;lt;T, R&amp;gt; function, Predicate&amp;lt;T&amp;gt; predicate) {
        if (predicate.test(t)) {
            return function.apply(t);
        } else {
            System.err.println(&quot;密码错误！&quot;);
        }
        return null;
    }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lambda表达式lambda-expressions&quot;&gt;Lambda表达式：Lambda Expressions&lt;/h3&gt;

&lt;p&gt;概念：&lt;/p&gt;

&lt;p&gt;即是一个&lt;strong&gt;匿名函数&lt;/strong&gt;，即没有函数名的函数。Lambda表达式可以让我们不用实现函数式接口，而是通过函数体完成其接口方法。Lambda是实现回调函数（callback function）的一种方式。&lt;/p&gt;

&lt;p&gt;结构：&lt;/p&gt;

&lt;p&gt;（输入 +） 函数体 （+ 输出）&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// 输入(String a)   
// &quot;-&amp;gt;&quot; 符号后的部分都可以当作函数体 
// 输出一个String类型的变量upper
(String a) -&amp;gt; {
    String upper = a.toUpperCase();
    System.out.println(upper);
    return upper;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;语法规则：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;声明类型、不声明类型&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;(int a, int b) -&amp;gt; a + b


(a, b) -&amp;gt; a - b


// 前面两个表达式含义相同，相当于下面的方法
int sum(int a, int b) {
  return a +b;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：单个参数需要声明类型时，必须使用“(” “ )”圆括号。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// 一个入参
(List&amp;lt;String&amp;gt; l) -&amp;gt; {
  l.forEach(element -&amp;gt; System.out.println(element));
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;有输入参数、没有输入参数&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;(String a) -&amp;gt; new String(a)
// 需要一个没有内容的括号表示无参
() -&amp;gt; new String()


// 以上相当于一个是有参方法，一个是无参方法
String newStr(String a) {
  return new String(a);
}


String newStr() {
  return new String();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;单条执行语句、多条执行语句&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;() -&amp;gt; &quot;lambda&quot;.toUpperCase()


() -&amp;gt; {
    // other statement
    return &quot;lambda&quot;.toUpperCase();
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：单个语句可以省去 { }&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;带有输出的Lambda表达式、不带有输出&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// 有返回值
(List&amp;lt;String&amp;gt; list) -&amp;gt; {
    return list;
}


(List&amp;lt;String&amp;gt; list) -&amp;gt; list




// 无返回值
(List&amp;lt;String&amp;gt; list) -&amp;gt; {
    list.clear();
}


(List&amp;lt;String&amp;gt; list) -&amp;gt; list.clea
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当函数体只有一条且为输出语句时，需要确保简写表达式语句有返回值&lt;/li&gt;
  &lt;li&gt;当无返回值的表达式只有一条时，需要确保简写表达式不会有返回值&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;方法引用method-reference&quot;&gt;方法引用：Method Reference&lt;/h3&gt;

&lt;p&gt;定义：&lt;/p&gt;

&lt;p&gt;当使用一个Lambda表达式创建一个匿名函数时，如果该函数什么都不做，仅仅只是调用一个现有的方法时，就可以使用方法的名字来代表该方法的调用会让程序更为清晰，方法引用便可以让你实现此功能。&lt;/p&gt;

&lt;p&gt;方法引用即使用现有方法的名字，来紧凑的表达一个易于阅读的Lambda表达式。&lt;/p&gt;

&lt;p&gt;方法引用使用两个冒号 :: 表示&lt;/p&gt;

&lt;p&gt;方法引用种类：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;种类&lt;/th&gt;
      &lt;th&gt;句法&lt;/th&gt;
      &lt;th&gt;例子&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;引用静态方法&lt;/td&gt;
      &lt;td&gt;ContainingClass::staticMethodName&lt;/td&gt;
      &lt;td&gt;Person::compareByAgeMethodReferencesExamples::appendStrings&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;引用类的实例对象的方法&lt;/td&gt;
      &lt;td&gt;containingObject::instanceMethodName&lt;/td&gt;
      &lt;td&gt;myComparisonProvider::compareByNamemyApp::appendStrings2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;引用特殊类型的任意对象的实例方法&lt;/td&gt;
      &lt;td&gt;ContainingType::methodName&lt;/td&gt;
      &lt;td&gt;String::compareToIgnoreCaseString::concat&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;引用构造函数&lt;/td&gt;
      &lt;td&gt;ClassName::new&lt;/td&gt;
      &lt;td&gt;HashSet::new&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;下面的代码是Oracle的一段代码实例：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import java.util.function.BiFunction;


public class MethodReferencesExamples {
    
    public static &amp;lt;T&amp;gt; T mergeThings(T a, T b, BiFunction&amp;lt;T, T, T&amp;gt; merger) {
        return merger.apply(a, b);
    }
    
    public static String appendStrings(String a, String b) {
        return a + b;
    }
    
    public String appendStrings2(String a, String b) {
        return a + b;
    }


    public static void main(String[] args) {
        
        MethodReferencesExamples myApp = new MethodReferencesExamples();


        // Calling the method mergeThings with a lambda expression
        System.out.println(MethodReferencesExamples.
            mergeThings(&quot;Hello &quot;, &quot;World!&quot;, (a, b) -&amp;gt; a + b));
        
        // Reference to a static method
        System.out.println(MethodReferencesExamples.
            mergeThings(&quot;Hello &quot;, &quot;World!&quot;, MethodReferencesExamples::appendStrings));


        // Reference to an instance method of a particular object        
        System.out.println(MethodReferencesExamples.
            mergeThings(&quot;Hello &quot;, &quot;World!&quot;, myApp::appendStrings2));
        
        // Reference to an instance method of an arbitrary object of a
        // particular type
        System.out.println(MethodReferencesExamples.
            mergeThings(&quot;Hello &quot;, &quot;World!&quot;, String::concat));
   
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;流式操作stream&quot;&gt;流式操作：Stream&lt;/h3&gt;
</description>
        <pubDate>Sat, 22 May 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/Functional-Programming/</link>
        <guid isPermaLink="true">http://localhost:4000/Functional-Programming/</guid>
        
        <category>Java</category>
        
        <category>stream， lambda</category>
        
        <category>functional programming</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Java反射机制</title>
        <description>&lt;p&gt;反射通常由需要检查或修改Java虚拟机中运行的应用程序的运行时行为的程序使用。这是一个相对高级的功能，只应由对语言基础有很深了解的开发人员使用。考虑到这一警告，反射是一种强大的技术，可以使应用程序执行原本不可能的操作。&lt;/p&gt;

&lt;h2 id=&quot;java反射机制&quot;&gt;Java反射机制&lt;/h2&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/reflect/index.html&quot;&gt;The Reflection API&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;反射原理&quot;&gt;反射原理：&lt;/h3&gt;
&lt;p&gt;Java在编译之后会生成一个class文件，反射通过字节码文件找到其类中的方法和属性等。&lt;/p&gt;

&lt;h3 id=&quot;反射的用途&quot;&gt;反射的用途：&lt;/h3&gt;
&lt;p&gt;反射功能通常用于检查或修改Java虚拟机运行中（runtime）的应用程序的行为。反射是一种强大的技术，可以运行原本不可能的操作。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在运行中分析类的能力，可以通过完全限定类名创建类的对象实例。&lt;/li&gt;
  &lt;li&gt;在运行中查看和操作对象，可以遍历类的成员变量。&lt;/li&gt;
  &lt;li&gt;反射允许代码执行非反射代码中非法的操作，可以检索和访问类的私有成员变量，包括私有属性、方法等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意：要有选择的使用反射功能，如果可以直接执行操作，那么最好不要使用反射。&lt;/p&gt;

&lt;h3 id=&quot;反射的缺点&quot;&gt;反射的缺点：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;额外的性能开销（&lt;strong&gt;Performance Overhead&lt;/strong&gt;）：由于反射涉及动态类型的解析，它无法执行某些Java虚拟机优化，因此反射操作的性能通常要比非反射操作慢。&lt;/li&gt;
  &lt;li&gt;安全限制（&lt;strong&gt;Security Restrictions&lt;/strong&gt;）：反射需要运行时操作权限，此操作可能在一些安全管理器下不被允许。&lt;/li&gt;
  &lt;li&gt;内部泄露（&lt;strong&gt;Exposure of Internals&lt;/strong&gt;）：由于反射允许代码执行非反射代码中非法的操作（例如访问私有字段和方法），因此使用反射可能会导致意外的副作用，这可能会使代码无法正常工作并可能破坏可移植性。反射性代码破坏了抽象，因此可能会随着平台的升级而改变行为。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;获取对象类的方式&quot;&gt;获取对象类的方式:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Object.getClass()&lt;/strong&gt;。从一个实例对象中获取它的类。这仅适用于继承自Object的引用类型（当然Java的类默认继承于Object）。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;Map&amp;lt;String, String&amp;gt; hashMap = new HashMap&amp;lt;&amp;gt;();
Class&amp;lt;? extends Map&amp;gt; aClass = hashMap.getClass();
String text = &quot;text&quot;;
Class&amp;lt;? extends String&amp;gt; aClass1 = text.getClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;// Object类
public final native Class&amp;lt;?&amp;gt; getClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;XXX.class&lt;/strong&gt;。直接从未实例化的类获取类。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Class&amp;lt;Integer&amp;gt; integerClass = int.class;
Class&amp;lt;HashMap&amp;gt; hashMapClass = HashMap.class;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Class.forName()&lt;/strong&gt;。通过完全限定类名获取类。即包名加类名（java.util.HashMap）。否则会报找不到类错误。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Class&amp;lt;HashMap&amp;gt; hashMapClass = Class.forName(&quot;java.util.HashMap&quot;);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// class类
public static Class&amp;lt;?&amp;gt; forName(String className)
            throws ClassNotFoundException {
    Class&amp;lt;?&amp;gt; caller = Reflection.getCallerClass();
    return forName0(className, true, ClassLoader.getClassLoader(caller), caller);
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Integer.TYPE&lt;/strong&gt;。基本类型的包装类通过TYPE获取类。都是Java早期版本的产物，已过时。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// Integer
@SuppressWarnings(&quot;unchecked&quot;)
public static final Class&amp;lt;Integer&amp;gt;  TYPE = (Class&amp;lt;Integer&amp;gt;) Class.getPrimitiveClass(&quot;int&quot;);


// Double
@SuppressWarnings(&quot;unchecked&quot;)
public static final Class&amp;lt;Double&amp;gt;   TYPE = (Class&amp;lt;Double&amp;gt;) Class.getPrimitiveClass(&quot;double&quot;);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;通过反射类ClassAPI获取类。注意，只有在已经直接或间接获得一个类的情况下，才可以访问这些API。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;try {
  Class&amp;lt;?&amp;gt; className = Class.forName(&quot;java.lang.String&quot;);
  // 获取父类
  Class&amp;lt;?&amp;gt; superclass = className.getSuperclass();
  // 返回调用类的成员变量，包括所有公共的类、接口和枚举
  Class&amp;lt;?&amp;gt;[] classes = className.getClasses();
  // 返回调用类的依赖，包括所有类、接口和显式声明的枚举
  Class&amp;lt;?&amp;gt;[] declaredClasses = className.getDeclaredClasses();
} catch (ClassNotFoundException e) {
  e.printStackTrace();
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;获取类的成员变量&quot;&gt;获取类的成员变量：&lt;/h3&gt;

&lt;p&gt;获取字段：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;Class&lt;/a&gt; API&lt;/th&gt;
      &lt;th&gt;是否是列表&lt;/th&gt;
      &lt;th&gt;是否获取父类属性&lt;/th&gt;
      &lt;th&gt;能否能获取私有字段&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredField-java.lang.String-&quot;&gt;getDeclaredField()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getField-java.lang.String-&quot;&gt;getField()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredFields--&quot;&gt;getDeclaredFields()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getFields--&quot;&gt;getFields()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;获取方法：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;Class&lt;/a&gt; API&lt;/th&gt;
      &lt;th&gt;List of members?&lt;/th&gt;
      &lt;th&gt;Inherited members?&lt;/th&gt;
      &lt;th&gt;Private members?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethod-java.lang.String-java.lang.Class...-&quot;&gt;getDeclaredMethod()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-&quot;&gt;getMethod()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredMethods--&quot;&gt;getDeclaredMethods()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethods--&quot;&gt;getMethods()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;获取构造器：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html&quot;&gt;Class&lt;/a&gt; API&lt;/th&gt;
      &lt;th&gt;List of members?&lt;/th&gt;
      &lt;th&gt;Inherited members?&lt;/th&gt;
      &lt;th&gt;Private members?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructor-java.lang.Class...-&quot;&gt;getDeclaredConstructor()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;N/A1&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructor-java.lang.Class...-&quot;&gt;getConstructor()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
      &lt;td&gt;N/A1&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getDeclaredConstructors--&quot;&gt;getDeclaredConstructors()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;N/A1&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getConstructors--&quot;&gt;getConstructors()&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;yes&lt;/td&gt;
      &lt;td&gt;N/A1&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;javalangreflectfield&quot;&gt;java.lang.reflect.Field&lt;/h3&gt;

&lt;p&gt;Field字段具有类型和值。Field提供访问属性对象类型信息的方法；以及获取和设置字段值的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取字段类型：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;字段可以是原始类型或引用类型。&lt;/p&gt;

&lt;p&gt;有八种基本类型：boolean，byte，short，int，long，char，float，和double。&lt;/p&gt;

&lt;p&gt;引用类型是java.lang.Object类的直接或间接子类，包含接口，数组和枚举类型等 。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取字段修饰符：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;访问修饰符：public，protected，和private&lt;/li&gt;
  &lt;li&gt;仅用于字段的控制运行时行为的修饰符：transient和volatile&lt;/li&gt;
  &lt;li&gt;限制单实例的修饰符： static&lt;/li&gt;
  &lt;li&gt;禁止值修改的修饰符： final&lt;/li&gt;
  &lt;li&gt;注解&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Class&amp;lt;?&amp;gt; className = Class.forName(&quot;java.util.HashMap&quot;);
Field table = className.getDeclaredField(&quot;table&quot;);
// 获取属性的名字
String name = table.getName();
// 获取属性的类型
Class&amp;lt;?&amp;gt; type = table.getType();
// 获取修饰符
int modifiers = table.getModifiers();
System.out.println(Modifier.toString(modifiers));
// 获取注解
Override annotation = table.getDeclaredAnnotation(Override.class);
Annotation[] declaredAnnotations = table.getDeclaredAnnotations();
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;获取和设置字段值：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;给定一个类的实例，可以使用反射来设置该类中字段的值。通常仅在特殊情况下无法以常规方式设置值时才执行此操作。因为这样的访问通常会违反该类的设计意图，所以应绝对谨慎地使用它。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：通过反射设置字段的值会有一定的性能开销，因为必须进行各种操作，例如验证访问权限。从运行时的角度来看，效果是相同的，并且操作是原子的，就好像直接在类代码中更改了值一样。除此之外，反射会破坏Java原本的设定，列如可以重新设置final属性的值等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;反射修改final修饰的属性值到JVM对String的优化：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;反射功能强大，能修改private以及final修饰的变量。如下代码中，展示了JVM的优化以及反射的一些劣势。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;@Data
public class FieldReflectDemo {
  // 引用直接指向常量池中的常量值
  private final String constantStr = &quot;FinalConstantStringField&quot;;
  // JVM优化了getter方法，直接将对constantStr引用全部替换成了常量
//  public String getConstantStr() {return &quot;FinalConstantStringField&quot;;}


  // 在堆中新建了一个对象
  private final String newStr = new String(&quot;FinalNewStringField&quot;);
  
  public FieldReflectDemo(){}
    
    public static void main(String[] args) {
    FieldReflectDemo fieldReflectDemo = new FieldReflectDemo();
    try {
      Class&amp;lt;?&amp;gt; className = fieldReflectDemo.getClass();
      Field constantStr = className.getDeclaredField(&quot;constantStr&quot;);
      Field newStr = className.getDeclaredField(&quot;newStr&quot;);
      // 获取实例对象的字段值
      System.out.println(&quot;constantStr原：&quot; + constantStr.get(fieldReflectDemo));
      System.out.println(&quot;newStr原：&quot; + newStr.get(fieldReflectDemo));
      constantStr.setAccessible(true);
      newStr.setAccessible(true);
      constantStr.set(fieldReflectDemo, &quot;New Filed Name&quot;);
      newStr.set(fieldReflectDemo, &quot;New Filed Name&quot;);
      System.out.println(&quot;constantStr反射修改：&quot; + constantStr.get(fieldReflectDemo));
      System.out.println(&quot;newStr反射修改：&quot; + newStr.get(fieldReflectDemo));
    } catch (NoSuchFieldException | IllegalAccessException e) {
      e.printStackTrace();
    }
    System.out.println(&quot;constantStr实例对象值：&quot; + fieldReflectDemo.getConstantStr());
    System.out.println(&quot;newStr实例对象值：&quot; + fieldReflectDemo.getNewStr());
  }
  
  /**
   * 输出
   * constantStr原：FinalConstantStringField
   * newStr原：FinalNewStringField
   * constantStr反射修改：New Filed Name
   * newStr反射修改：New Filed Name
   * constantStr实例对象值：FinalConstantStringField
   * newStr实例对象值：New Filed Name
   */
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为JVM在编译时期, 就把final类型的&lt;strong&gt;直接赋值的String&lt;/strong&gt;进行了优化, 在编译时期就会把String处理成常量。反射成功将其值修改成功了，但是在它的get方法中，返回的不是当前变量，而是返回JVM优化好的一个常量值。&lt;/p&gt;

&lt;h3 id=&quot;javalangreflectmethod&quot;&gt;java.lang.reflect.Method&lt;/h3&gt;

&lt;p&gt;Method方法具有参数和返回值，并且方法可能抛出异常。Method提供获取参数信息、返回值的方法；它也可以调用（invoke）给定对象的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取方法类型的信息：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;方法声明包含了方法名、修饰符、参数、返回类型以及抛出的多个异常。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;public class MethodReflectDemo {


public MethodReflectDemo() {
  
private void getNothing(String name) {
  
public int getNumByName(String name) throws NullPointerException {
  if (StringUtils.isEmpty(name))
    throw new NullPointerException(&quot;名字为空&quot;);
  return name.length();
}


  public static void main(String[] args) {
    MethodReflectDemo methodReflectDemo = new MethodReflectDemo();
    try {
      Class&amp;lt;? extends MethodReflectDemo&amp;gt; demoClass = methodReflectDemo.getClass();
      Method method = demoClass.getDeclaredMethod(&quot;getNumByName&quot;, String.class);
      String name = method.getName();
      System.out.println(&quot;方法名：&quot; + name);
      // 修饰符
      int modifiers = method.getModifiers();
      System.out.println(&quot;所有修饰符：&quot; + Modifier.toString(modifiers));
      // 参数
      Parameter[] parameters = method.getParameters();
      // 返回类型
      Class&amp;lt;?&amp;gt; returnType = method.getReturnType();
      System.out.println(&quot;返回类型：&quot; + returnType.getTypeName());
      // 异常
      Class&amp;lt;?&amp;gt;[] exceptionTypes = method.getExceptionTypes();
      System.out.println(&quot;&quot;);
    } catch (NoSuchMethodException e) {
      e.printStackTrace();
    }
  }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;javalangreflectconstructor&quot;&gt;java.lang.reflect.Constructor&lt;/h3&gt;

&lt;p&gt;Constructor与Method相似，但有两个主要例外：第一，构造函数没有返回值；第二，构造函数的调用为给定的类创建对象的新实例。&lt;/p&gt;
</description>
        <pubDate>Fri, 21 May 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/JAVA-reflection/</link>
        <guid isPermaLink="true">http://localhost:4000/JAVA-reflection/</guid>
        
        <category>Java</category>
        
        <category>反射</category>
        
        <category>Reflection</category>
        
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
